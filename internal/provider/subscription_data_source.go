// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SubscriptionDataSource{}
var _ datasource.DataSourceWithConfigure = &SubscriptionDataSource{}

func NewSubscriptionDataSource() datasource.DataSource {
	return &SubscriptionDataSource{}
}

// SubscriptionDataSource is the data source implementation.
type SubscriptionDataSource struct {
	// Provider configured SDK client.
	client *sdk.GraviteeApim

	// environment ID
	EnvironmentID types.String `tfsdk:"environment_id"`

	// organization ID
	OrganizationID types.String `tfsdk:"organization_id"`
}

// SubscriptionDataSourceModel describes the data model.
type SubscriptionDataSourceModel struct {
	APIHrid         types.String      `tfsdk:"api_hrid"`
	ApplicationHrid types.String      `tfsdk:"application_hrid"`
	EndingAt        timetypes.RFC3339 `tfsdk:"ending_at"`
	EnvironmentID   types.String      `tfsdk:"environment_id"`
	Hrid            types.String      `tfsdk:"hrid"`
	ID              types.String      `tfsdk:"id"`
	OrganizationID  types.String      `tfsdk:"organization_id"`
	PlanHrid        types.String      `tfsdk:"plan_hrid"`
	StartingAt      timetypes.RFC3339 `tfsdk:"starting_at"`
}

// Metadata returns the data source type name.
func (r *SubscriptionDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_subscription"
}

// Schema defines the schema for the data source.
func (r *SubscriptionDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Subscription DataSource",

		Attributes: map[string]schema.Attribute{
			"api_hrid": schema.StringAttribute{
				Computed:    true,
				Description: `The API's Hrid that you want to subscribe to.`,
			},
			"application_hrid": schema.StringAttribute{
				Computed:    true,
				Description: `Application's Hrid that needs to subscribe to the API.`,
			},
			"ending_at": schema.StringAttribute{
				CustomType: timetypes.RFC3339Type{},
				Computed:   true,
			},
			"environment_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `environment ID`,
			},
			"hrid": schema.StringAttribute{
				Required:    true,
				Description: `Human-readable ID of a spec`,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`).String()),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `Subscription's uuid.`,
			},
			"organization_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `organization ID`,
			},
			"plan_hrid": schema.StringAttribute{
				Computed:    true,
				Description: `API plan's Hrid`,
			},
			"starting_at": schema.StringAttribute{
				CustomType: timetypes.RFC3339Type{},
				Computed:   true,
			},
		},
	}
}

func (r *SubscriptionDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(*ApimProviderConfigureData)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *ApimProviderConfigureData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.EnvironmentID = providerData.EnvironmentID
	r.OrganizationID = providerData.OrganizationID
	r.client = providerData.SDKClient
}

func (r *SubscriptionDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SubscriptionDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.EnvironmentID.IsNull() {
		data.EnvironmentID = r.EnvironmentID
	}

	if data.OrganizationID.IsNull() {
		data.OrganizationID = r.OrganizationID
	}

	request, requestDiags := data.ToOperationsGetSubscriptionRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Subscriptions.Get(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SubscriptionState != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSubscriptionState(ctx, res.SubscriptionState)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
