// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/gravitee-io/terraform-provider-apim/internal/provider/typeconvert"
	tfTypes "github.com/gravitee-io/terraform-provider-apim/internal/provider/types"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/operations"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *Apiv4ResourceModel) RefreshFromSharedApiv4State(ctx context.Context, resp *shared.APIV4State) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Analytics == nil {
			r.Analytics = nil
		} else {
			r.Analytics = &tfTypes.Analytics{}
			r.Analytics.Enabled = types.BoolPointerValue(resp.Analytics.Enabled)
			if resp.Analytics.Logging == nil {
				r.Analytics.Logging = nil
			} else {
				r.Analytics.Logging = &tfTypes.LoggingV4{}
				r.Analytics.Logging.Condition = types.StringPointerValue(resp.Analytics.Logging.Condition)
				if resp.Analytics.Logging.Content == nil {
					r.Analytics.Logging.Content = nil
				} else {
					r.Analytics.Logging.Content = &tfTypes.LoggingContentV4{}
					r.Analytics.Logging.Content.Headers = types.BoolPointerValue(resp.Analytics.Logging.Content.Headers)
					r.Analytics.Logging.Content.MessageHeaders = types.BoolPointerValue(resp.Analytics.Logging.Content.MessageHeaders)
					r.Analytics.Logging.Content.MessageMetadata = types.BoolPointerValue(resp.Analytics.Logging.Content.MessageMetadata)
					r.Analytics.Logging.Content.MessagePayload = types.BoolPointerValue(resp.Analytics.Logging.Content.MessagePayload)
					r.Analytics.Logging.Content.Payload = types.BoolPointerValue(resp.Analytics.Logging.Content.Payload)
				}
				r.Analytics.Logging.MessageCondition = types.StringPointerValue(resp.Analytics.Logging.MessageCondition)
				if resp.Analytics.Logging.Mode == nil {
					r.Analytics.Logging.Mode = nil
				} else {
					r.Analytics.Logging.Mode = &tfTypes.LoggingModeV4{}
					r.Analytics.Logging.Mode.Endpoint = types.BoolPointerValue(resp.Analytics.Logging.Mode.Endpoint)
					r.Analytics.Logging.Mode.Entrypoint = types.BoolPointerValue(resp.Analytics.Logging.Mode.Entrypoint)
				}
				if resp.Analytics.Logging.Phase == nil {
					r.Analytics.Logging.Phase = nil
				} else {
					r.Analytics.Logging.Phase = &tfTypes.LoggingPhase{}
					r.Analytics.Logging.Phase.Request = types.BoolPointerValue(resp.Analytics.Logging.Phase.Request)
					r.Analytics.Logging.Phase.Response = types.BoolPointerValue(resp.Analytics.Logging.Phase.Response)
				}
			}
			if resp.Analytics.Sampling == nil {
				r.Analytics.Sampling = nil
			} else {
				r.Analytics.Sampling = &tfTypes.Sampling{}
				r.Analytics.Sampling.Type = types.StringValue(string(resp.Analytics.Sampling.Type))
				r.Analytics.Sampling.Value = types.StringPointerValue(resp.Analytics.Sampling.Value)
			}
			if resp.Analytics.Tracing == nil {
				r.Analytics.Tracing = nil
			} else {
				r.Analytics.Tracing = &tfTypes.TracingV4{}
				r.Analytics.Tracing.Enabled = types.BoolPointerValue(resp.Analytics.Tracing.Enabled)
				r.Analytics.Tracing.Verbose = types.BoolPointerValue(resp.Analytics.Tracing.Verbose)
			}
		}
		r.Categories = make([]types.String, 0, len(resp.Categories))
		for _, v := range resp.Categories {
			r.Categories = append(r.Categories, types.StringValue(v))
		}
		r.CrossID = types.StringPointerValue(resp.CrossID)
		r.Description = types.StringPointerValue(resp.Description)
		r.EndpointGroups = []tfTypes.EndpointGroupV4{}

		for _, endpointGroupsItem := range resp.EndpointGroups {
			var endpointGroups tfTypes.EndpointGroupV4

			endpointGroups.Endpoints = []tfTypes.EndpointV4{}

			for _, endpointsItem := range endpointGroupsItem.Endpoints {
				var endpoints tfTypes.EndpointV4

				if endpointsItem.Configuration == nil {
					endpoints.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult, _ := json.Marshal(endpointsItem.Configuration)
					endpoints.Configuration = jsontypes.NewNormalizedValue(string(configurationResult))
				}
				endpoints.InheritConfiguration = types.BoolPointerValue(endpointsItem.InheritConfiguration)
				endpoints.Name = types.StringPointerValue(endpointsItem.Name)
				endpoints.Secondary = types.BoolPointerValue(endpointsItem.Secondary)
				if endpointsItem.Services == nil {
					endpoints.Services = nil
				} else {
					endpoints.Services = &tfTypes.EndpointServices{}
					if endpointsItem.Services.HealthCheck == nil {
						endpoints.Services.HealthCheck = nil
					} else {
						endpoints.Services.HealthCheck = &tfTypes.ServiceV4{}
						configurationResult1, _ := json.Marshal(endpointsItem.Services.HealthCheck.Configuration)
						endpoints.Services.HealthCheck.Configuration = jsontypes.NewNormalizedValue(string(configurationResult1))
						endpoints.Services.HealthCheck.Enabled = types.BoolPointerValue(endpointsItem.Services.HealthCheck.Enabled)
						endpoints.Services.HealthCheck.OverrideConfiguration = types.BoolPointerValue(endpointsItem.Services.HealthCheck.OverrideConfiguration)
						endpoints.Services.HealthCheck.Type = types.StringValue(endpointsItem.Services.HealthCheck.Type)
					}
				}
				if endpointsItem.SharedConfigurationOverride == nil {
					endpoints.SharedConfigurationOverride = jsontypes.NewNormalizedNull()
				} else {
					sharedConfigurationOverrideResult, _ := json.Marshal(endpointsItem.SharedConfigurationOverride)
					endpoints.SharedConfigurationOverride = jsontypes.NewNormalizedValue(string(sharedConfigurationOverrideResult))
				}
				endpoints.Tenants = make([]types.String, 0, len(endpointsItem.Tenants))
				for _, v := range endpointsItem.Tenants {
					endpoints.Tenants = append(endpoints.Tenants, types.StringValue(v))
				}
				endpoints.Type = types.StringValue(endpointsItem.Type)
				endpoints.Weight = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(endpointsItem.Weight))

				endpointGroups.Endpoints = append(endpointGroups.Endpoints, endpoints)
			}
			if endpointGroupsItem.LoadBalancer == nil {
				endpointGroups.LoadBalancer = nil
			} else {
				endpointGroups.LoadBalancer = &tfTypes.LoadBalancer{}
				if endpointGroupsItem.LoadBalancer.Type != nil {
					endpointGroups.LoadBalancer.Type = types.StringValue(string(*endpointGroupsItem.LoadBalancer.Type))
				} else {
					endpointGroups.LoadBalancer.Type = types.StringNull()
				}
			}
			endpointGroups.Name = types.StringPointerValue(endpointGroupsItem.Name)
			if endpointGroupsItem.Services == nil {
				endpointGroups.Services = nil
			} else {
				endpointGroups.Services = &tfTypes.EndpointGroupServices{}
				if endpointGroupsItem.Services.Discovery == nil {
					endpointGroups.Services.Discovery = nil
				} else {
					endpointGroups.Services.Discovery = &tfTypes.ServiceV4{}
					configurationResult2, _ := json.Marshal(endpointGroupsItem.Services.Discovery.Configuration)
					endpointGroups.Services.Discovery.Configuration = jsontypes.NewNormalizedValue(string(configurationResult2))
					endpointGroups.Services.Discovery.Enabled = types.BoolPointerValue(endpointGroupsItem.Services.Discovery.Enabled)
					endpointGroups.Services.Discovery.OverrideConfiguration = types.BoolPointerValue(endpointGroupsItem.Services.Discovery.OverrideConfiguration)
					endpointGroups.Services.Discovery.Type = types.StringValue(endpointGroupsItem.Services.Discovery.Type)
				}
				if endpointGroupsItem.Services.HealthCheck == nil {
					endpointGroups.Services.HealthCheck = nil
				} else {
					endpointGroups.Services.HealthCheck = &tfTypes.ServiceV4{}
					configurationResult3, _ := json.Marshal(endpointGroupsItem.Services.HealthCheck.Configuration)
					endpointGroups.Services.HealthCheck.Configuration = jsontypes.NewNormalizedValue(string(configurationResult3))
					endpointGroups.Services.HealthCheck.Enabled = types.BoolPointerValue(endpointGroupsItem.Services.HealthCheck.Enabled)
					endpointGroups.Services.HealthCheck.OverrideConfiguration = types.BoolPointerValue(endpointGroupsItem.Services.HealthCheck.OverrideConfiguration)
					endpointGroups.Services.HealthCheck.Type = types.StringValue(endpointGroupsItem.Services.HealthCheck.Type)
				}
			}
			if endpointGroupsItem.SharedConfiguration == nil {
				endpointGroups.SharedConfiguration = jsontypes.NewNormalizedNull()
			} else {
				sharedConfigurationResult, _ := json.Marshal(endpointGroupsItem.SharedConfiguration)
				endpointGroups.SharedConfiguration = jsontypes.NewNormalizedValue(string(sharedConfigurationResult))
			}
			endpointGroups.Type = types.StringValue(endpointGroupsItem.Type)

			r.EndpointGroups = append(r.EndpointGroups, endpointGroups)
		}
		if resp.Failover == nil {
			r.Failover = nil
		} else {
			r.Failover = &tfTypes.FailoverV4{}
			r.Failover.Enabled = types.BoolPointerValue(resp.Failover.Enabled)
			r.Failover.MaxFailures = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Failover.MaxFailures))
			r.Failover.MaxRetries = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Failover.MaxRetries))
			r.Failover.OpenStateDuration = types.Int64PointerValue(resp.Failover.OpenStateDuration)
			r.Failover.PerSubscription = types.BoolPointerValue(resp.Failover.PerSubscription)
			r.Failover.SlowCallDuration = types.Int64PointerValue(resp.Failover.SlowCallDuration)
		}
		if resp.FlowExecution == nil {
			r.FlowExecution = nil
		} else {
			r.FlowExecution = &tfTypes.FlowExecution{}
			r.FlowExecution.MatchRequired = types.BoolPointerValue(resp.FlowExecution.MatchRequired)
			if resp.FlowExecution.Mode != nil {
				r.FlowExecution.Mode = types.StringValue(string(*resp.FlowExecution.Mode))
			} else {
				r.FlowExecution.Mode = types.StringNull()
			}
		}
		r.Flows = []tfTypes.FlowV4{}

		for _, flowsItem := range resp.Flows {
			var flows tfTypes.FlowV4

			flows.Connect = []tfTypes.StepV4{}

			for _, connectItem := range flowsItem.Connect {
				var connect tfTypes.StepV4

				connect.Condition = types.StringPointerValue(connectItem.Condition)
				if connectItem.Configuration == nil {
					connect.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult4, _ := json.Marshal(connectItem.Configuration)
					connect.Configuration = jsontypes.NewNormalizedValue(string(configurationResult4))
				}
				connect.Description = types.StringPointerValue(connectItem.Description)
				connect.Enabled = types.BoolPointerValue(connectItem.Enabled)
				connect.MessageCondition = types.StringPointerValue(connectItem.MessageCondition)
				connect.Name = types.StringPointerValue(connectItem.Name)
				connect.Policy = types.StringValue(connectItem.Policy)

				flows.Connect = append(flows.Connect, connect)
			}
			flows.Enabled = types.BoolPointerValue(flowsItem.Enabled)
			flows.Interact = []tfTypes.StepV4{}

			for _, interactItem := range flowsItem.Interact {
				var interact tfTypes.StepV4

				interact.Condition = types.StringPointerValue(interactItem.Condition)
				if interactItem.Configuration == nil {
					interact.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult5, _ := json.Marshal(interactItem.Configuration)
					interact.Configuration = jsontypes.NewNormalizedValue(string(configurationResult5))
				}
				interact.Description = types.StringPointerValue(interactItem.Description)
				interact.Enabled = types.BoolPointerValue(interactItem.Enabled)
				interact.MessageCondition = types.StringPointerValue(interactItem.MessageCondition)
				interact.Name = types.StringPointerValue(interactItem.Name)
				interact.Policy = types.StringValue(interactItem.Policy)

				flows.Interact = append(flows.Interact, interact)
			}
			flows.Name = types.StringPointerValue(flowsItem.Name)
			flows.Publish = []tfTypes.StepV4{}

			for _, publishItem := range flowsItem.Publish {
				var publish tfTypes.StepV4

				publish.Condition = types.StringPointerValue(publishItem.Condition)
				if publishItem.Configuration == nil {
					publish.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult6, _ := json.Marshal(publishItem.Configuration)
					publish.Configuration = jsontypes.NewNormalizedValue(string(configurationResult6))
				}
				publish.Description = types.StringPointerValue(publishItem.Description)
				publish.Enabled = types.BoolPointerValue(publishItem.Enabled)
				publish.MessageCondition = types.StringPointerValue(publishItem.MessageCondition)
				publish.Name = types.StringPointerValue(publishItem.Name)
				publish.Policy = types.StringValue(publishItem.Policy)

				flows.Publish = append(flows.Publish, publish)
			}
			flows.Request = []tfTypes.StepV4{}

			for _, requestItem := range flowsItem.Request {
				var request tfTypes.StepV4

				request.Condition = types.StringPointerValue(requestItem.Condition)
				if requestItem.Configuration == nil {
					request.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult7, _ := json.Marshal(requestItem.Configuration)
					request.Configuration = jsontypes.NewNormalizedValue(string(configurationResult7))
				}
				request.Description = types.StringPointerValue(requestItem.Description)
				request.Enabled = types.BoolPointerValue(requestItem.Enabled)
				request.MessageCondition = types.StringPointerValue(requestItem.MessageCondition)
				request.Name = types.StringPointerValue(requestItem.Name)
				request.Policy = types.StringValue(requestItem.Policy)

				flows.Request = append(flows.Request, request)
			}
			flows.Response = []tfTypes.StepV4{}

			for _, responseItem := range flowsItem.Response {
				var response tfTypes.StepV4

				response.Condition = types.StringPointerValue(responseItem.Condition)
				if responseItem.Configuration == nil {
					response.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult8, _ := json.Marshal(responseItem.Configuration)
					response.Configuration = jsontypes.NewNormalizedValue(string(configurationResult8))
				}
				response.Description = types.StringPointerValue(responseItem.Description)
				response.Enabled = types.BoolPointerValue(responseItem.Enabled)
				response.MessageCondition = types.StringPointerValue(responseItem.MessageCondition)
				response.Name = types.StringPointerValue(responseItem.Name)
				response.Policy = types.StringValue(responseItem.Policy)

				flows.Response = append(flows.Response, response)
			}
			flows.Selectors = []tfTypes.Selector{}

			for _, selectorsItem := range flowsItem.Selectors {
				var selectors tfTypes.Selector

				if selectorsItem.ChannelSelector != nil {
					selectors.Channel = &tfTypes.ChannelSelector{}
					selectors.Channel.Channel = types.StringPointerValue(selectorsItem.ChannelSelector.Channel)
					if selectorsItem.ChannelSelector.ChannelOperator != nil {
						selectors.Channel.ChannelOperator = types.StringValue(string(*selectorsItem.ChannelSelector.ChannelOperator))
					} else {
						selectors.Channel.ChannelOperator = types.StringNull()
					}
					selectors.Channel.Entrypoints = make([]types.String, 0, len(selectorsItem.ChannelSelector.Entrypoints))
					for _, v := range selectorsItem.ChannelSelector.Entrypoints {
						selectors.Channel.Entrypoints = append(selectors.Channel.Entrypoints, types.StringValue(v))
					}
					selectors.Channel.Operations = make([]types.String, 0, len(selectorsItem.ChannelSelector.Operations))
					for _, v := range selectorsItem.ChannelSelector.Operations {
						selectors.Channel.Operations = append(selectors.Channel.Operations, types.StringValue(string(v)))
					}
					selectors.Channel.Type = types.StringValue(string(selectorsItem.ChannelSelector.Type))
				}
				if selectorsItem.ConditionSelector != nil {
					selectors.Condition = &tfTypes.ConditionSelector{}
					selectors.Condition.Condition = types.StringValue(selectorsItem.ConditionSelector.Condition)
					selectors.Condition.Type = types.StringValue(string(selectorsItem.ConditionSelector.Type))
				}
				if selectorsItem.HTTPSelector != nil {
					selectors.HTTP = &tfTypes.HTTPSelector{}
					selectors.HTTP.Methods = make([]types.String, 0, len(selectorsItem.HTTPSelector.Methods))
					for _, v := range selectorsItem.HTTPSelector.Methods {
						selectors.HTTP.Methods = append(selectors.HTTP.Methods, types.StringValue(string(v)))
					}
					selectors.HTTP.Path = types.StringPointerValue(selectorsItem.HTTPSelector.Path)
					if selectorsItem.HTTPSelector.PathOperator != nil {
						selectors.HTTP.PathOperator = types.StringValue(string(*selectorsItem.HTTPSelector.PathOperator))
					} else {
						selectors.HTTP.PathOperator = types.StringNull()
					}
					selectors.HTTP.Type = types.StringValue(string(selectorsItem.HTTPSelector.Type))
				}

				flows.Selectors = append(flows.Selectors, selectors)
			}
			flows.Subscribe = []tfTypes.StepV4{}

			for _, subscribeItem := range flowsItem.Subscribe {
				var subscribe tfTypes.StepV4

				subscribe.Condition = types.StringPointerValue(subscribeItem.Condition)
				if subscribeItem.Configuration == nil {
					subscribe.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult9, _ := json.Marshal(subscribeItem.Configuration)
					subscribe.Configuration = jsontypes.NewNormalizedValue(string(configurationResult9))
				}
				subscribe.Description = types.StringPointerValue(subscribeItem.Description)
				subscribe.Enabled = types.BoolPointerValue(subscribeItem.Enabled)
				subscribe.MessageCondition = types.StringPointerValue(subscribeItem.MessageCondition)
				subscribe.Name = types.StringPointerValue(subscribeItem.Name)
				subscribe.Policy = types.StringValue(subscribeItem.Policy)

				flows.Subscribe = append(flows.Subscribe, subscribe)
			}
			flows.Tags = make([]types.String, 0, len(flowsItem.Tags))
			for _, v := range flowsItem.Tags {
				flows.Tags = append(flows.Tags, types.StringValue(v))
			}

			r.Flows = append(r.Flows, flows)
		}
		r.Groups = make([]types.String, 0, len(resp.Groups))
		for _, v := range resp.Groups {
			r.Groups = append(r.Groups, types.StringValue(v))
		}
		r.Hrid = types.StringValue(resp.Hrid)
		r.ID = types.StringPointerValue(resp.ID)
		r.Labels = make([]types.String, 0, len(resp.Labels))
		for _, v := range resp.Labels {
			r.Labels = append(r.Labels, types.StringValue(v))
		}
		r.LifecycleState = types.StringValue(string(resp.LifecycleState))
		r.Listeners = []tfTypes.Listener{}

		for _, listenersItem := range resp.Listeners {
			var listeners tfTypes.Listener

			if listenersItem.HTTPListener != nil {
				listeners.HTTP = &tfTypes.HTTPListener{}
				if listenersItem.HTTPListener.Cors == nil {
					listeners.HTTP.Cors = nil
				} else {
					listeners.HTTP.Cors = &tfTypes.Cors{}
					listeners.HTTP.Cors.AllowCredentials = types.BoolPointerValue(listenersItem.HTTPListener.Cors.AllowCredentials)
					listeners.HTTP.Cors.AllowHeaders = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.AllowHeaders))
					for _, v := range listenersItem.HTTPListener.Cors.AllowHeaders {
						listeners.HTTP.Cors.AllowHeaders = append(listeners.HTTP.Cors.AllowHeaders, types.StringValue(v))
					}
					listeners.HTTP.Cors.AllowMethods = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.AllowMethods))
					for _, v := range listenersItem.HTTPListener.Cors.AllowMethods {
						listeners.HTTP.Cors.AllowMethods = append(listeners.HTTP.Cors.AllowMethods, types.StringValue(string(v)))
					}
					listeners.HTTP.Cors.AllowOrigin = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.AllowOrigin))
					for _, v := range listenersItem.HTTPListener.Cors.AllowOrigin {
						listeners.HTTP.Cors.AllowOrigin = append(listeners.HTTP.Cors.AllowOrigin, types.StringValue(v))
					}
					listeners.HTTP.Cors.Enabled = types.BoolPointerValue(listenersItem.HTTPListener.Cors.Enabled)
					listeners.HTTP.Cors.ExposeHeaders = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.ExposeHeaders))
					for _, v := range listenersItem.HTTPListener.Cors.ExposeHeaders {
						listeners.HTTP.Cors.ExposeHeaders = append(listeners.HTTP.Cors.ExposeHeaders, types.StringValue(v))
					}
					listeners.HTTP.Cors.MaxAge = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(listenersItem.HTTPListener.Cors.MaxAge))
					listeners.HTTP.Cors.RunPolicies = types.BoolPointerValue(listenersItem.HTTPListener.Cors.RunPolicies)
				}
				listeners.HTTP.Entrypoints = []tfTypes.Entrypoint{}

				for _, entrypointsItem := range listenersItem.HTTPListener.Entrypoints {
					var entrypoints tfTypes.Entrypoint

					if entrypointsItem.Configuration == nil {
						entrypoints.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult10, _ := json.Marshal(entrypointsItem.Configuration)
						entrypoints.Configuration = jsontypes.NewNormalizedValue(string(configurationResult10))
					}
					if entrypointsItem.Dlq == nil {
						entrypoints.Dlq = nil
					} else {
						entrypoints.Dlq = &tfTypes.Dlq{}
						entrypoints.Dlq.Endpoint = types.StringPointerValue(entrypointsItem.Dlq.Endpoint)
					}
					if entrypointsItem.Qos != nil {
						entrypoints.Qos = types.StringValue(string(*entrypointsItem.Qos))
					} else {
						entrypoints.Qos = types.StringNull()
					}
					entrypoints.Type = types.StringValue(entrypointsItem.Type)

					listeners.HTTP.Entrypoints = append(listeners.HTTP.Entrypoints, entrypoints)
				}
				listeners.HTTP.Paths = []tfTypes.PathV4{}

				for _, pathsItem := range listenersItem.HTTPListener.Paths {
					var paths tfTypes.PathV4

					paths.Host = types.StringPointerValue(pathsItem.Host)
					paths.OverrideAccess = types.BoolPointerValue(pathsItem.OverrideAccess)
					paths.Path = types.StringPointerValue(pathsItem.Path)

					listeners.HTTP.Paths = append(listeners.HTTP.Paths, paths)
				}
				listeners.HTTP.Servers = make([]types.String, 0, len(listenersItem.HTTPListener.Servers))
				for _, v := range listenersItem.HTTPListener.Servers {
					listeners.HTTP.Servers = append(listeners.HTTP.Servers, types.StringValue(v))
				}
				listeners.HTTP.Type = types.StringValue(string(listenersItem.HTTPListener.Type))
			}
			if listenersItem.KafkaListener != nil {
				listeners.Kafka = &tfTypes.KafkaListener{}
				listeners.Kafka.Entrypoints = []tfTypes.Entrypoint{}

				for _, entrypointsItem1 := range listenersItem.KafkaListener.Entrypoints {
					var entrypoints1 tfTypes.Entrypoint

					if entrypointsItem1.Configuration == nil {
						entrypoints1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult11, _ := json.Marshal(entrypointsItem1.Configuration)
						entrypoints1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult11))
					}
					if entrypointsItem1.Dlq == nil {
						entrypoints1.Dlq = nil
					} else {
						entrypoints1.Dlq = &tfTypes.Dlq{}
						entrypoints1.Dlq.Endpoint = types.StringPointerValue(entrypointsItem1.Dlq.Endpoint)
					}
					if entrypointsItem1.Qos != nil {
						entrypoints1.Qos = types.StringValue(string(*entrypointsItem1.Qos))
					} else {
						entrypoints1.Qos = types.StringNull()
					}
					entrypoints1.Type = types.StringValue(entrypointsItem1.Type)

					listeners.Kafka.Entrypoints = append(listeners.Kafka.Entrypoints, entrypoints1)
				}
				listeners.Kafka.Host = types.StringValue(listenersItem.KafkaListener.Host)
				listeners.Kafka.Servers = make([]types.String, 0, len(listenersItem.KafkaListener.Servers))
				for _, v := range listenersItem.KafkaListener.Servers {
					listeners.Kafka.Servers = append(listeners.Kafka.Servers, types.StringValue(v))
				}
				listeners.Kafka.Type = types.StringValue(string(listenersItem.KafkaListener.Type))
			}
			if listenersItem.SubscriptionListener != nil {
				listeners.Subscription = &tfTypes.SubscriptionListener{}
				listeners.Subscription.Entrypoints = []tfTypes.Entrypoint{}

				for _, entrypointsItem2 := range listenersItem.SubscriptionListener.Entrypoints {
					var entrypoints2 tfTypes.Entrypoint

					if entrypointsItem2.Configuration == nil {
						entrypoints2.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult12, _ := json.Marshal(entrypointsItem2.Configuration)
						entrypoints2.Configuration = jsontypes.NewNormalizedValue(string(configurationResult12))
					}
					if entrypointsItem2.Dlq == nil {
						entrypoints2.Dlq = nil
					} else {
						entrypoints2.Dlq = &tfTypes.Dlq{}
						entrypoints2.Dlq.Endpoint = types.StringPointerValue(entrypointsItem2.Dlq.Endpoint)
					}
					if entrypointsItem2.Qos != nil {
						entrypoints2.Qos = types.StringValue(string(*entrypointsItem2.Qos))
					} else {
						entrypoints2.Qos = types.StringNull()
					}
					entrypoints2.Type = types.StringValue(entrypointsItem2.Type)

					listeners.Subscription.Entrypoints = append(listeners.Subscription.Entrypoints, entrypoints2)
				}
				listeners.Subscription.Servers = make([]types.String, 0, len(listenersItem.SubscriptionListener.Servers))
				for _, v := range listenersItem.SubscriptionListener.Servers {
					listeners.Subscription.Servers = append(listeners.Subscription.Servers, types.StringValue(v))
				}
				listeners.Subscription.Type = types.StringValue(string(listenersItem.SubscriptionListener.Type))
			}
			if listenersItem.TCPListener != nil {
				listeners.TCP = &tfTypes.TCPListener{}
				listeners.TCP.Entrypoints = []tfTypes.Entrypoint{}

				for _, entrypointsItem3 := range listenersItem.TCPListener.Entrypoints {
					var entrypoints3 tfTypes.Entrypoint

					if entrypointsItem3.Configuration == nil {
						entrypoints3.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult13, _ := json.Marshal(entrypointsItem3.Configuration)
						entrypoints3.Configuration = jsontypes.NewNormalizedValue(string(configurationResult13))
					}
					if entrypointsItem3.Dlq == nil {
						entrypoints3.Dlq = nil
					} else {
						entrypoints3.Dlq = &tfTypes.Dlq{}
						entrypoints3.Dlq.Endpoint = types.StringPointerValue(entrypointsItem3.Dlq.Endpoint)
					}
					if entrypointsItem3.Qos != nil {
						entrypoints3.Qos = types.StringValue(string(*entrypointsItem3.Qos))
					} else {
						entrypoints3.Qos = types.StringNull()
					}
					entrypoints3.Type = types.StringValue(entrypointsItem3.Type)

					listeners.TCP.Entrypoints = append(listeners.TCP.Entrypoints, entrypoints3)
				}
				listeners.TCP.Hosts = make([]types.String, 0, len(listenersItem.TCPListener.Hosts))
				for _, v := range listenersItem.TCPListener.Hosts {
					listeners.TCP.Hosts = append(listeners.TCP.Hosts, types.StringValue(v))
				}
				listeners.TCP.Servers = make([]types.String, 0, len(listenersItem.TCPListener.Servers))
				for _, v := range listenersItem.TCPListener.Servers {
					listeners.TCP.Servers = append(listeners.TCP.Servers, types.StringValue(v))
				}
				listeners.TCP.Type = types.StringValue(string(listenersItem.TCPListener.Type))
			}

			r.Listeners = append(r.Listeners, listeners)
		}
		r.Members = []tfTypes.Member{}

		for _, membersItem := range resp.Members {
			var members tfTypes.Member

			members.Role = types.StringValue(membersItem.Role)
			members.Source = types.StringValue(membersItem.Source)
			members.SourceID = types.StringValue(membersItem.SourceID)

			r.Members = append(r.Members, members)
		}
		r.Metadata = []tfTypes.Metadata{}

		for _, metadataItem := range resp.Metadata {
			var metadata tfTypes.Metadata

			metadata.DefaultValue = types.StringPointerValue(metadataItem.DefaultValue)
			metadata.Format = types.StringValue(string(metadataItem.Format))
			metadata.Hidden = types.BoolPointerValue(metadataItem.Hidden)
			metadata.Key = types.StringPointerValue(metadataItem.Key)
			metadata.Name = types.StringValue(metadataItem.Name)
			metadata.Value = types.StringPointerValue(metadataItem.Value)

			r.Metadata = append(r.Metadata, metadata)
		}
		r.Name = types.StringValue(resp.Name)
		r.Pages = []tfTypes.PageV4{}

		for _, pagesItem := range resp.Pages {
			var pages tfTypes.PageV4

			if len(pagesItem.Configuration) > 0 {
				pages.Configuration = make(map[string]types.String, len(pagesItem.Configuration))
				for key, value := range pagesItem.Configuration {
					pages.Configuration[key] = types.StringValue(value)
				}
			}
			pages.Content = types.StringPointerValue(pagesItem.Content)
			pages.CrossID = types.StringPointerValue(pagesItem.CrossID)
			pages.Homepage = types.BoolPointerValue(pagesItem.Homepage)
			pages.Hrid = types.StringValue(pagesItem.Hrid)
			pages.Name = types.StringValue(pagesItem.Name)
			pages.ParentHrid = types.StringPointerValue(pagesItem.ParentHrid)
			pages.Published = types.BoolPointerValue(pagesItem.Published)
			if pagesItem.Source == nil {
				pages.Source = nil
			} else {
				pages.Source = &tfTypes.PageSource{}
				if pagesItem.Source.Configuration == nil {
					pages.Source.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult14, _ := json.Marshal(pagesItem.Source.Configuration)
					pages.Source.Configuration = jsontypes.NewNormalizedValue(string(configurationResult14))
				}
				pages.Source.Type = types.StringPointerValue(pagesItem.Source.Type)
			}
			pages.Type = types.StringValue(string(pagesItem.Type))
			if pagesItem.Visibility != nil {
				pages.Visibility = types.StringValue(string(*pagesItem.Visibility))
			} else {
				pages.Visibility = types.StringNull()
			}

			r.Pages = append(r.Pages, pages)
		}
		r.Plans = []tfTypes.PlanV4{}

		for _, plansItem := range resp.Plans {
			var plans tfTypes.PlanV4

			plans.Characteristics = make([]types.String, 0, len(plansItem.Characteristics))
			for _, v := range plansItem.Characteristics {
				plans.Characteristics = append(plans.Characteristics, types.StringValue(v))
			}
			plans.Description = types.StringPointerValue(plansItem.Description)
			plans.ExcludedGroups = make([]types.String, 0, len(plansItem.ExcludedGroups))
			for _, v := range plansItem.ExcludedGroups {
				plans.ExcludedGroups = append(plans.ExcludedGroups, types.StringValue(v))
			}
			plans.Flows = []tfTypes.FlowV4{}

			for _, flowsItem1 := range plansItem.Flows {
				var flows1 tfTypes.FlowV4

				flows1.Connect = []tfTypes.StepV4{}

				for _, connectItem1 := range flowsItem1.Connect {
					var connect1 tfTypes.StepV4

					connect1.Condition = types.StringPointerValue(connectItem1.Condition)
					if connectItem1.Configuration == nil {
						connect1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult15, _ := json.Marshal(connectItem1.Configuration)
						connect1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult15))
					}
					connect1.Description = types.StringPointerValue(connectItem1.Description)
					connect1.Enabled = types.BoolPointerValue(connectItem1.Enabled)
					connect1.MessageCondition = types.StringPointerValue(connectItem1.MessageCondition)
					connect1.Name = types.StringPointerValue(connectItem1.Name)
					connect1.Policy = types.StringValue(connectItem1.Policy)

					flows1.Connect = append(flows1.Connect, connect1)
				}
				flows1.Enabled = types.BoolPointerValue(flowsItem1.Enabled)
				flows1.Interact = []tfTypes.StepV4{}

				for _, interactItem1 := range flowsItem1.Interact {
					var interact1 tfTypes.StepV4

					interact1.Condition = types.StringPointerValue(interactItem1.Condition)
					if interactItem1.Configuration == nil {
						interact1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult16, _ := json.Marshal(interactItem1.Configuration)
						interact1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult16))
					}
					interact1.Description = types.StringPointerValue(interactItem1.Description)
					interact1.Enabled = types.BoolPointerValue(interactItem1.Enabled)
					interact1.MessageCondition = types.StringPointerValue(interactItem1.MessageCondition)
					interact1.Name = types.StringPointerValue(interactItem1.Name)
					interact1.Policy = types.StringValue(interactItem1.Policy)

					flows1.Interact = append(flows1.Interact, interact1)
				}
				flows1.Name = types.StringPointerValue(flowsItem1.Name)
				flows1.Publish = []tfTypes.StepV4{}

				for _, publishItem1 := range flowsItem1.Publish {
					var publish1 tfTypes.StepV4

					publish1.Condition = types.StringPointerValue(publishItem1.Condition)
					if publishItem1.Configuration == nil {
						publish1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult17, _ := json.Marshal(publishItem1.Configuration)
						publish1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult17))
					}
					publish1.Description = types.StringPointerValue(publishItem1.Description)
					publish1.Enabled = types.BoolPointerValue(publishItem1.Enabled)
					publish1.MessageCondition = types.StringPointerValue(publishItem1.MessageCondition)
					publish1.Name = types.StringPointerValue(publishItem1.Name)
					publish1.Policy = types.StringValue(publishItem1.Policy)

					flows1.Publish = append(flows1.Publish, publish1)
				}
				flows1.Request = []tfTypes.StepV4{}

				for _, requestItem1 := range flowsItem1.Request {
					var request1 tfTypes.StepV4

					request1.Condition = types.StringPointerValue(requestItem1.Condition)
					if requestItem1.Configuration == nil {
						request1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult18, _ := json.Marshal(requestItem1.Configuration)
						request1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult18))
					}
					request1.Description = types.StringPointerValue(requestItem1.Description)
					request1.Enabled = types.BoolPointerValue(requestItem1.Enabled)
					request1.MessageCondition = types.StringPointerValue(requestItem1.MessageCondition)
					request1.Name = types.StringPointerValue(requestItem1.Name)
					request1.Policy = types.StringValue(requestItem1.Policy)

					flows1.Request = append(flows1.Request, request1)
				}
				flows1.Response = []tfTypes.StepV4{}

				for _, responseItem1 := range flowsItem1.Response {
					var response1 tfTypes.StepV4

					response1.Condition = types.StringPointerValue(responseItem1.Condition)
					if responseItem1.Configuration == nil {
						response1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult19, _ := json.Marshal(responseItem1.Configuration)
						response1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult19))
					}
					response1.Description = types.StringPointerValue(responseItem1.Description)
					response1.Enabled = types.BoolPointerValue(responseItem1.Enabled)
					response1.MessageCondition = types.StringPointerValue(responseItem1.MessageCondition)
					response1.Name = types.StringPointerValue(responseItem1.Name)
					response1.Policy = types.StringValue(responseItem1.Policy)

					flows1.Response = append(flows1.Response, response1)
				}
				flows1.Selectors = []tfTypes.Selector{}

				for _, selectorsItem1 := range flowsItem1.Selectors {
					var selectors1 tfTypes.Selector

					if selectorsItem1.ChannelSelector != nil {
						selectors1.Channel = &tfTypes.ChannelSelector{}
						selectors1.Channel.Channel = types.StringPointerValue(selectorsItem1.ChannelSelector.Channel)
						if selectorsItem1.ChannelSelector.ChannelOperator != nil {
							selectors1.Channel.ChannelOperator = types.StringValue(string(*selectorsItem1.ChannelSelector.ChannelOperator))
						} else {
							selectors1.Channel.ChannelOperator = types.StringNull()
						}
						selectors1.Channel.Entrypoints = make([]types.String, 0, len(selectorsItem1.ChannelSelector.Entrypoints))
						for _, v := range selectorsItem1.ChannelSelector.Entrypoints {
							selectors1.Channel.Entrypoints = append(selectors1.Channel.Entrypoints, types.StringValue(v))
						}
						selectors1.Channel.Operations = make([]types.String, 0, len(selectorsItem1.ChannelSelector.Operations))
						for _, v := range selectorsItem1.ChannelSelector.Operations {
							selectors1.Channel.Operations = append(selectors1.Channel.Operations, types.StringValue(string(v)))
						}
						selectors1.Channel.Type = types.StringValue(string(selectorsItem1.ChannelSelector.Type))
					}
					if selectorsItem1.ConditionSelector != nil {
						selectors1.Condition = &tfTypes.ConditionSelector{}
						selectors1.Condition.Condition = types.StringValue(selectorsItem1.ConditionSelector.Condition)
						selectors1.Condition.Type = types.StringValue(string(selectorsItem1.ConditionSelector.Type))
					}
					if selectorsItem1.HTTPSelector != nil {
						selectors1.HTTP = &tfTypes.HTTPSelector{}
						selectors1.HTTP.Methods = make([]types.String, 0, len(selectorsItem1.HTTPSelector.Methods))
						for _, v := range selectorsItem1.HTTPSelector.Methods {
							selectors1.HTTP.Methods = append(selectors1.HTTP.Methods, types.StringValue(string(v)))
						}
						selectors1.HTTP.Path = types.StringPointerValue(selectorsItem1.HTTPSelector.Path)
						if selectorsItem1.HTTPSelector.PathOperator != nil {
							selectors1.HTTP.PathOperator = types.StringValue(string(*selectorsItem1.HTTPSelector.PathOperator))
						} else {
							selectors1.HTTP.PathOperator = types.StringNull()
						}
						selectors1.HTTP.Type = types.StringValue(string(selectorsItem1.HTTPSelector.Type))
					}

					flows1.Selectors = append(flows1.Selectors, selectors1)
				}
				flows1.Subscribe = []tfTypes.StepV4{}

				for _, subscribeItem1 := range flowsItem1.Subscribe {
					var subscribe1 tfTypes.StepV4

					subscribe1.Condition = types.StringPointerValue(subscribeItem1.Condition)
					if subscribeItem1.Configuration == nil {
						subscribe1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult20, _ := json.Marshal(subscribeItem1.Configuration)
						subscribe1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult20))
					}
					subscribe1.Description = types.StringPointerValue(subscribeItem1.Description)
					subscribe1.Enabled = types.BoolPointerValue(subscribeItem1.Enabled)
					subscribe1.MessageCondition = types.StringPointerValue(subscribeItem1.MessageCondition)
					subscribe1.Name = types.StringPointerValue(subscribeItem1.Name)
					subscribe1.Policy = types.StringValue(subscribeItem1.Policy)

					flows1.Subscribe = append(flows1.Subscribe, subscribe1)
				}
				flows1.Tags = make([]types.String, 0, len(flowsItem1.Tags))
				for _, v := range flowsItem1.Tags {
					flows1.Tags = append(flows1.Tags, types.StringValue(v))
				}

				plans.Flows = append(plans.Flows, flows1)
			}
			plans.GeneralConditionsHrid = types.StringPointerValue(plansItem.GeneralConditionsHrid)
			plans.Hrid = types.StringValue(plansItem.Hrid)
			plans.Mode = types.StringValue(string(plansItem.Mode))
			plans.Name = types.StringValue(plansItem.Name)
			if plansItem.Security.Configuration == nil {
				plans.Security.Configuration = jsontypes.NewNormalizedNull()
			} else {
				configurationResult21, _ := json.Marshal(plansItem.Security.Configuration)
				plans.Security.Configuration = jsontypes.NewNormalizedValue(string(configurationResult21))
			}
			plans.Security.Type = types.StringValue(string(plansItem.Security.Type))
			plans.SelectionRule = types.StringPointerValue(plansItem.SelectionRule)
			plans.Status = types.StringValue(string(plansItem.Status))
			plans.Tags = make([]types.String, 0, len(plansItem.Tags))
			for _, v := range plansItem.Tags {
				plans.Tags = append(plans.Tags, types.StringValue(v))
			}
			if plansItem.Type != nil {
				plans.Type = types.StringValue(string(*plansItem.Type))
			} else {
				plans.Type = types.StringNull()
			}
			if plansItem.Validation != nil {
				plans.Validation = types.StringValue(string(*plansItem.Validation))
			} else {
				plans.Validation = types.StringNull()
			}

			r.Plans = append(r.Plans, plans)
		}
		if resp.PrimaryOwner == nil {
			r.PrimaryOwner = nil
		} else {
			r.PrimaryOwner = &tfTypes.PrimaryOwner{}
			r.PrimaryOwner.DisplayName = types.StringPointerValue(resp.PrimaryOwner.DisplayName)
			r.PrimaryOwner.Email = types.StringPointerValue(resp.PrimaryOwner.Email)
			r.PrimaryOwner.ID = types.StringPointerValue(resp.PrimaryOwner.ID)
			if resp.PrimaryOwner.Type != nil {
				r.PrimaryOwner.Type = types.StringValue(string(*resp.PrimaryOwner.Type))
			} else {
				r.PrimaryOwner.Type = types.StringNull()
			}
		}
		r.Properties = []tfTypes.Property{}

		for _, propertiesItem := range resp.Properties {
			var properties tfTypes.Property

			propertiesPriorData := properties
			properties.Dynamic = types.BoolPointerValue(propertiesItem.Dynamic)
			properties.Encryptable = propertiesPriorData.Encryptable
			properties.Encrypted = types.BoolPointerValue(propertiesItem.Encrypted)
			properties.Key = types.StringValue(propertiesItem.Key)
			properties.Value = types.StringValue(propertiesItem.Value)

			r.Properties = append(r.Properties, properties)
		}
		r.Resources = []tfTypes.APIResource{}

		for _, resourcesItem := range resp.Resources {
			var resources tfTypes.APIResource

			configurationResult22, _ := json.Marshal(resourcesItem.Configuration)
			resources.Configuration = jsontypes.NewNormalizedValue(string(configurationResult22))
			resources.Enabled = types.BoolPointerValue(resourcesItem.Enabled)
			resources.Name = types.StringValue(resourcesItem.Name)
			resources.Type = types.StringValue(resourcesItem.Type)

			r.Resources = append(r.Resources, resources)
		}
		if len(resp.ResponseTemplates) > 0 {
			r.ResponseTemplates = make(map[string]map[string]tfTypes.ResponseTemplate, len(resp.ResponseTemplates))
			for responseTemplatesKey, responseTemplatesValue := range resp.ResponseTemplates {
				var responseTemplatesResult map[string]tfTypes.ResponseTemplate
				if len(responseTemplatesValue) > 0 {
					responseTemplatesResult = make(map[string]tfTypes.ResponseTemplate, len(responseTemplatesValue))
					for responseTemplateKey, responseTemplateValue := range responseTemplatesValue {
						var responseTemplateResult tfTypes.ResponseTemplate
						responseTemplateResult.Body = types.StringPointerValue(responseTemplateValue.Body)
						if len(responseTemplateValue.Headers) > 0 {
							responseTemplateResult.Headers = make(map[string]types.String, len(responseTemplateValue.Headers))
							for key1, value1 := range responseTemplateValue.Headers {
								responseTemplateResult.Headers[key1] = types.StringValue(value1)
							}
						}
						responseTemplateResult.PropagateErrorKeyToLogs = types.BoolPointerValue(responseTemplateValue.PropagateErrorKeyToLogs)
						responseTemplateResult.Status = types.Int64Value(responseTemplateValue.Status)

						responseTemplatesResult[responseTemplateKey] = responseTemplateResult
					}
				}

				r.ResponseTemplates[responseTemplatesKey] = responseTemplatesResult
			}
		}
		if resp.Services == nil {
			r.Services = nil
		} else {
			r.Services = &tfTypes.APIServices{}
			if resp.Services.DynamicProperty == nil {
				r.Services.DynamicProperty = nil
			} else {
				r.Services.DynamicProperty = &tfTypes.ServiceV4{}
				configurationResult23, _ := json.Marshal(resp.Services.DynamicProperty.Configuration)
				r.Services.DynamicProperty.Configuration = jsontypes.NewNormalizedValue(string(configurationResult23))
				r.Services.DynamicProperty.Enabled = types.BoolPointerValue(resp.Services.DynamicProperty.Enabled)
				r.Services.DynamicProperty.OverrideConfiguration = types.BoolPointerValue(resp.Services.DynamicProperty.OverrideConfiguration)
				r.Services.DynamicProperty.Type = types.StringValue(resp.Services.DynamicProperty.Type)
			}
		}
		if resp.State != nil {
			r.State = types.StringValue(string(*resp.State))
		} else {
			r.State = types.StringNull()
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.Type = types.StringValue(string(resp.Type))
		r.Version = types.StringValue(resp.Version)
		if resp.Visibility != nil {
			r.Visibility = types.StringValue(string(*resp.Visibility))
		} else {
			r.Visibility = types.StringNull()
		}
	}

	return diags
}

func (r *Apiv4ResourceModel) ToOperationsCreateOrUpdateApisRequest(ctx context.Context) (*operations.CreateOrUpdateApisRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	apiV4Spec, apiV4SpecDiags := r.ToSharedApiv4Spec(ctx)
	diags.Append(apiV4SpecDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateOrUpdateApisRequest{
		OrganizationID: organizationID,
		EnvironmentID:  environmentID,
		APIV4Spec:      *apiV4Spec,
	}

	return &out, diags
}

func (r *Apiv4ResourceModel) ToOperationsDeleteAPIRequest(ctx context.Context) (*operations.DeleteAPIRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	var hrid string
	hrid = r.Hrid.ValueString()

	out := operations.DeleteAPIRequest{
		OrganizationID: organizationID,
		EnvironmentID:  environmentID,
		Hrid:           hrid,
	}

	return &out, diags
}

func (r *Apiv4ResourceModel) ToOperationsGetAPIRequest(ctx context.Context) (*operations.GetAPIRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	var hrid string
	hrid = r.Hrid.ValueString()

	out := operations.GetAPIRequest{
		OrganizationID: organizationID,
		EnvironmentID:  environmentID,
		Hrid:           hrid,
	}

	return &out, diags
}

func (r *Apiv4ResourceModel) ToSharedApiv4Spec(ctx context.Context) (*shared.APIV4Spec, diag.Diagnostics) {
	var diags diag.Diagnostics

	var hrid string
	hrid = r.Hrid.ValueString()

	var name string
	name = r.Name.ValueString()

	var version string
	version = r.Version.ValueString()

	typeVar := shared.APIType(r.Type.ValueString())
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	listeners := make([]shared.Listener, 0, len(r.Listeners))
	for _, listenersItem := range r.Listeners {
		if listenersItem.HTTP != nil {
			typeVar1 := shared.ListenerType(listenersItem.HTTP.Type.ValueString())
			entrypoints := make([]shared.Entrypoint, 0, len(listenersItem.HTTP.Entrypoints))
			for _, entrypointsItem := range listenersItem.HTTP.Entrypoints {
				var type1 string
				type1 = entrypointsItem.Type.ValueString()

				qos := new(shared.Qos)
				if !entrypointsItem.Qos.IsUnknown() && !entrypointsItem.Qos.IsNull() {
					*qos = shared.Qos(entrypointsItem.Qos.ValueString())
				} else {
					qos = nil
				}
				var dlq *shared.Dlq
				if entrypointsItem.Dlq != nil {
					endpoint := new(string)
					if !entrypointsItem.Dlq.Endpoint.IsUnknown() && !entrypointsItem.Dlq.Endpoint.IsNull() {
						*endpoint = entrypointsItem.Dlq.Endpoint.ValueString()
					} else {
						endpoint = nil
					}
					dlq = &shared.Dlq{
						Endpoint: endpoint,
					}
				}
				var configuration interface{}
				if !entrypointsItem.Configuration.IsUnknown() && !entrypointsItem.Configuration.IsNull() {
					_ = json.Unmarshal([]byte(entrypointsItem.Configuration.ValueString()), &configuration)
				}
				entrypoints = append(entrypoints, shared.Entrypoint{
					Type:          type1,
					Qos:           qos,
					Dlq:           dlq,
					Configuration: configuration,
				})
			}
			servers := make([]string, 0, len(listenersItem.HTTP.Servers))
			for _, serversItem := range listenersItem.HTTP.Servers {
				servers = append(servers, serversItem.ValueString())
			}
			paths := make([]shared.PathV4, 0, len(listenersItem.HTTP.Paths))
			for _, pathsItem := range listenersItem.HTTP.Paths {
				host := new(string)
				if !pathsItem.Host.IsUnknown() && !pathsItem.Host.IsNull() {
					*host = pathsItem.Host.ValueString()
				} else {
					host = nil
				}
				path := new(string)
				if !pathsItem.Path.IsUnknown() && !pathsItem.Path.IsNull() {
					*path = pathsItem.Path.ValueString()
				} else {
					path = nil
				}
				overrideAccess := new(bool)
				if !pathsItem.OverrideAccess.IsUnknown() && !pathsItem.OverrideAccess.IsNull() {
					*overrideAccess = pathsItem.OverrideAccess.ValueBool()
				} else {
					overrideAccess = nil
				}
				paths = append(paths, shared.PathV4{
					Host:           host,
					Path:           path,
					OverrideAccess: overrideAccess,
				})
			}
			var cors *shared.Cors
			if listenersItem.HTTP.Cors != nil {
				enabled := new(bool)
				if !listenersItem.HTTP.Cors.Enabled.IsUnknown() && !listenersItem.HTTP.Cors.Enabled.IsNull() {
					*enabled = listenersItem.HTTP.Cors.Enabled.ValueBool()
				} else {
					enabled = nil
				}
				allowCredentials := new(bool)
				if !listenersItem.HTTP.Cors.AllowCredentials.IsUnknown() && !listenersItem.HTTP.Cors.AllowCredentials.IsNull() {
					*allowCredentials = listenersItem.HTTP.Cors.AllowCredentials.ValueBool()
				} else {
					allowCredentials = nil
				}
				allowHeaders := make([]string, 0, len(listenersItem.HTTP.Cors.AllowHeaders))
				for _, allowHeadersItem := range listenersItem.HTTP.Cors.AllowHeaders {
					allowHeaders = append(allowHeaders, allowHeadersItem.ValueString())
				}
				allowMethods := make([]shared.AllowMethod, 0, len(listenersItem.HTTP.Cors.AllowMethods))
				for _, allowMethodsItem := range listenersItem.HTTP.Cors.AllowMethods {
					allowMethods = append(allowMethods, shared.AllowMethod(allowMethodsItem.ValueString()))
				}
				allowOrigin := make([]string, 0, len(listenersItem.HTTP.Cors.AllowOrigin))
				for _, allowOriginItem := range listenersItem.HTTP.Cors.AllowOrigin {
					allowOrigin = append(allowOrigin, allowOriginItem.ValueString())
				}
				exposeHeaders := make([]string, 0, len(listenersItem.HTTP.Cors.ExposeHeaders))
				for _, exposeHeadersItem := range listenersItem.HTTP.Cors.ExposeHeaders {
					exposeHeaders = append(exposeHeaders, exposeHeadersItem.ValueString())
				}
				maxAge := new(int)
				if !listenersItem.HTTP.Cors.MaxAge.IsUnknown() && !listenersItem.HTTP.Cors.MaxAge.IsNull() {
					*maxAge = int(listenersItem.HTTP.Cors.MaxAge.ValueInt32())
				} else {
					maxAge = nil
				}
				runPolicies := new(bool)
				if !listenersItem.HTTP.Cors.RunPolicies.IsUnknown() && !listenersItem.HTTP.Cors.RunPolicies.IsNull() {
					*runPolicies = listenersItem.HTTP.Cors.RunPolicies.ValueBool()
				} else {
					runPolicies = nil
				}
				cors = &shared.Cors{
					Enabled:          enabled,
					AllowCredentials: allowCredentials,
					AllowHeaders:     allowHeaders,
					AllowMethods:     allowMethods,
					AllowOrigin:      allowOrigin,
					ExposeHeaders:    exposeHeaders,
					MaxAge:           maxAge,
					RunPolicies:      runPolicies,
				}
			}
			httpListener := shared.HTTPListener{
				Type:        typeVar1,
				Entrypoints: entrypoints,
				Servers:     servers,
				Paths:       paths,
				Cors:        cors,
			}
			listeners = append(listeners, shared.Listener{
				HTTPListener: &httpListener,
			})
		}
		if listenersItem.Subscription != nil {
			typeVar2 := shared.ListenerType(listenersItem.Subscription.Type.ValueString())
			entrypoints1 := make([]shared.Entrypoint, 0, len(listenersItem.Subscription.Entrypoints))
			for _, entrypointsItem1 := range listenersItem.Subscription.Entrypoints {
				var type2 string
				type2 = entrypointsItem1.Type.ValueString()

				qos1 := new(shared.Qos)
				if !entrypointsItem1.Qos.IsUnknown() && !entrypointsItem1.Qos.IsNull() {
					*qos1 = shared.Qos(entrypointsItem1.Qos.ValueString())
				} else {
					qos1 = nil
				}
				var dlq1 *shared.Dlq
				if entrypointsItem1.Dlq != nil {
					endpoint1 := new(string)
					if !entrypointsItem1.Dlq.Endpoint.IsUnknown() && !entrypointsItem1.Dlq.Endpoint.IsNull() {
						*endpoint1 = entrypointsItem1.Dlq.Endpoint.ValueString()
					} else {
						endpoint1 = nil
					}
					dlq1 = &shared.Dlq{
						Endpoint: endpoint1,
					}
				}
				var configuration1 interface{}
				if !entrypointsItem1.Configuration.IsUnknown() && !entrypointsItem1.Configuration.IsNull() {
					_ = json.Unmarshal([]byte(entrypointsItem1.Configuration.ValueString()), &configuration1)
				}
				entrypoints1 = append(entrypoints1, shared.Entrypoint{
					Type:          type2,
					Qos:           qos1,
					Dlq:           dlq1,
					Configuration: configuration1,
				})
			}
			servers1 := make([]string, 0, len(listenersItem.Subscription.Servers))
			for _, serversItem1 := range listenersItem.Subscription.Servers {
				servers1 = append(servers1, serversItem1.ValueString())
			}
			subscriptionListener := shared.SubscriptionListener{
				Type:        typeVar2,
				Entrypoints: entrypoints1,
				Servers:     servers1,
			}
			listeners = append(listeners, shared.Listener{
				SubscriptionListener: &subscriptionListener,
			})
		}
		if listenersItem.TCP != nil {
			typeVar3 := shared.ListenerType(listenersItem.TCP.Type.ValueString())
			entrypoints2 := make([]shared.Entrypoint, 0, len(listenersItem.TCP.Entrypoints))
			for _, entrypointsItem2 := range listenersItem.TCP.Entrypoints {
				var type3 string
				type3 = entrypointsItem2.Type.ValueString()

				qos2 := new(shared.Qos)
				if !entrypointsItem2.Qos.IsUnknown() && !entrypointsItem2.Qos.IsNull() {
					*qos2 = shared.Qos(entrypointsItem2.Qos.ValueString())
				} else {
					qos2 = nil
				}
				var dlq2 *shared.Dlq
				if entrypointsItem2.Dlq != nil {
					endpoint2 := new(string)
					if !entrypointsItem2.Dlq.Endpoint.IsUnknown() && !entrypointsItem2.Dlq.Endpoint.IsNull() {
						*endpoint2 = entrypointsItem2.Dlq.Endpoint.ValueString()
					} else {
						endpoint2 = nil
					}
					dlq2 = &shared.Dlq{
						Endpoint: endpoint2,
					}
				}
				var configuration2 interface{}
				if !entrypointsItem2.Configuration.IsUnknown() && !entrypointsItem2.Configuration.IsNull() {
					_ = json.Unmarshal([]byte(entrypointsItem2.Configuration.ValueString()), &configuration2)
				}
				entrypoints2 = append(entrypoints2, shared.Entrypoint{
					Type:          type3,
					Qos:           qos2,
					Dlq:           dlq2,
					Configuration: configuration2,
				})
			}
			servers2 := make([]string, 0, len(listenersItem.TCP.Servers))
			for _, serversItem2 := range listenersItem.TCP.Servers {
				servers2 = append(servers2, serversItem2.ValueString())
			}
			hosts := make([]string, 0, len(listenersItem.TCP.Hosts))
			for _, hostsItem := range listenersItem.TCP.Hosts {
				hosts = append(hosts, hostsItem.ValueString())
			}
			tcpListener := shared.TCPListener{
				Type:        typeVar3,
				Entrypoints: entrypoints2,
				Servers:     servers2,
				Hosts:       hosts,
			}
			listeners = append(listeners, shared.Listener{
				TCPListener: &tcpListener,
			})
		}
		if listenersItem.Kafka != nil {
			typeVar4 := shared.ListenerType(listenersItem.Kafka.Type.ValueString())
			entrypoints3 := make([]shared.Entrypoint, 0, len(listenersItem.Kafka.Entrypoints))
			for _, entrypointsItem3 := range listenersItem.Kafka.Entrypoints {
				var type4 string
				type4 = entrypointsItem3.Type.ValueString()

				qos3 := new(shared.Qos)
				if !entrypointsItem3.Qos.IsUnknown() && !entrypointsItem3.Qos.IsNull() {
					*qos3 = shared.Qos(entrypointsItem3.Qos.ValueString())
				} else {
					qos3 = nil
				}
				var dlq3 *shared.Dlq
				if entrypointsItem3.Dlq != nil {
					endpoint3 := new(string)
					if !entrypointsItem3.Dlq.Endpoint.IsUnknown() && !entrypointsItem3.Dlq.Endpoint.IsNull() {
						*endpoint3 = entrypointsItem3.Dlq.Endpoint.ValueString()
					} else {
						endpoint3 = nil
					}
					dlq3 = &shared.Dlq{
						Endpoint: endpoint3,
					}
				}
				var configuration3 interface{}
				if !entrypointsItem3.Configuration.IsUnknown() && !entrypointsItem3.Configuration.IsNull() {
					_ = json.Unmarshal([]byte(entrypointsItem3.Configuration.ValueString()), &configuration3)
				}
				entrypoints3 = append(entrypoints3, shared.Entrypoint{
					Type:          type4,
					Qos:           qos3,
					Dlq:           dlq3,
					Configuration: configuration3,
				})
			}
			servers3 := make([]string, 0, len(listenersItem.Kafka.Servers))
			for _, serversItem3 := range listenersItem.Kafka.Servers {
				servers3 = append(servers3, serversItem3.ValueString())
			}
			var host1 string
			host1 = listenersItem.Kafka.Host.ValueString()

			kafkaListener := shared.KafkaListener{
				Type:        typeVar4,
				Entrypoints: entrypoints3,
				Servers:     servers3,
				Host:        host1,
			}
			listeners = append(listeners, shared.Listener{
				KafkaListener: &kafkaListener,
			})
		}
	}
	endpointGroups := make([]shared.EndpointGroupV4, 0, len(r.EndpointGroups))
	for _, endpointGroupsItem := range r.EndpointGroups {
		name1 := new(string)
		if !endpointGroupsItem.Name.IsUnknown() && !endpointGroupsItem.Name.IsNull() {
			*name1 = endpointGroupsItem.Name.ValueString()
		} else {
			name1 = nil
		}
		var type5 string
		type5 = endpointGroupsItem.Type.ValueString()

		var loadBalancer *shared.LoadBalancer
		if endpointGroupsItem.LoadBalancer != nil {
			typeVar5 := new(shared.LoadBalancerType)
			if !endpointGroupsItem.LoadBalancer.Type.IsUnknown() && !endpointGroupsItem.LoadBalancer.Type.IsNull() {
				*typeVar5 = shared.LoadBalancerType(endpointGroupsItem.LoadBalancer.Type.ValueString())
			} else {
				typeVar5 = nil
			}
			loadBalancer = &shared.LoadBalancer{
				Type: typeVar5,
			}
		}
		var sharedConfiguration interface{}
		if !endpointGroupsItem.SharedConfiguration.IsUnknown() && !endpointGroupsItem.SharedConfiguration.IsNull() {
			_ = json.Unmarshal([]byte(endpointGroupsItem.SharedConfiguration.ValueString()), &sharedConfiguration)
		}
		endpoints := make([]shared.EndpointV4, 0, len(endpointGroupsItem.Endpoints))
		for _, endpointsItem := range endpointGroupsItem.Endpoints {
			name2 := new(string)
			if !endpointsItem.Name.IsUnknown() && !endpointsItem.Name.IsNull() {
				*name2 = endpointsItem.Name.ValueString()
			} else {
				name2 = nil
			}
			var type6 string
			type6 = endpointsItem.Type.ValueString()

			weight := new(int)
			if !endpointsItem.Weight.IsUnknown() && !endpointsItem.Weight.IsNull() {
				*weight = int(endpointsItem.Weight.ValueInt32())
			} else {
				weight = nil
			}
			inheritConfiguration := new(bool)
			if !endpointsItem.InheritConfiguration.IsUnknown() && !endpointsItem.InheritConfiguration.IsNull() {
				*inheritConfiguration = endpointsItem.InheritConfiguration.ValueBool()
			} else {
				inheritConfiguration = nil
			}
			var configuration4 interface{}
			if !endpointsItem.Configuration.IsUnknown() && !endpointsItem.Configuration.IsNull() {
				_ = json.Unmarshal([]byte(endpointsItem.Configuration.ValueString()), &configuration4)
			}
			var sharedConfigurationOverride interface{}
			if !endpointsItem.SharedConfigurationOverride.IsUnknown() && !endpointsItem.SharedConfigurationOverride.IsNull() {
				_ = json.Unmarshal([]byte(endpointsItem.SharedConfigurationOverride.ValueString()), &sharedConfigurationOverride)
			}
			var services *shared.EndpointServices
			if endpointsItem.Services != nil {
				var healthCheck *shared.ServiceV4
				if endpointsItem.Services.HealthCheck != nil {
					overrideConfiguration := new(bool)
					if !endpointsItem.Services.HealthCheck.OverrideConfiguration.IsUnknown() && !endpointsItem.Services.HealthCheck.OverrideConfiguration.IsNull() {
						*overrideConfiguration = endpointsItem.Services.HealthCheck.OverrideConfiguration.ValueBool()
					} else {
						overrideConfiguration = nil
					}
					var configuration5 interface{}
					_ = json.Unmarshal([]byte(endpointsItem.Services.HealthCheck.Configuration.ValueString()), &configuration5)
					enabled1 := new(bool)
					if !endpointsItem.Services.HealthCheck.Enabled.IsUnknown() && !endpointsItem.Services.HealthCheck.Enabled.IsNull() {
						*enabled1 = endpointsItem.Services.HealthCheck.Enabled.ValueBool()
					} else {
						enabled1 = nil
					}
					var typeVar6 string
					typeVar6 = endpointsItem.Services.HealthCheck.Type.ValueString()

					healthCheck = &shared.ServiceV4{
						OverrideConfiguration: overrideConfiguration,
						Configuration:         configuration5,
						Enabled:               enabled1,
						Type:                  typeVar6,
					}
				}
				services = &shared.EndpointServices{
					HealthCheck: healthCheck,
				}
			}
			secondary := new(bool)
			if !endpointsItem.Secondary.IsUnknown() && !endpointsItem.Secondary.IsNull() {
				*secondary = endpointsItem.Secondary.ValueBool()
			} else {
				secondary = nil
			}
			tenants := make([]string, 0, len(endpointsItem.Tenants))
			for _, tenantsItem := range endpointsItem.Tenants {
				tenants = append(tenants, tenantsItem.ValueString())
			}
			endpoints = append(endpoints, shared.EndpointV4{
				Name:                        name2,
				Type:                        type6,
				Weight:                      weight,
				InheritConfiguration:        inheritConfiguration,
				Configuration:               configuration4,
				SharedConfigurationOverride: sharedConfigurationOverride,
				Services:                    services,
				Secondary:                   secondary,
				Tenants:                     tenants,
			})
		}
		var services1 *shared.EndpointGroupServices
		if endpointGroupsItem.Services != nil {
			var discovery *shared.ServiceV4
			if endpointGroupsItem.Services.Discovery != nil {
				overrideConfiguration1 := new(bool)
				if !endpointGroupsItem.Services.Discovery.OverrideConfiguration.IsUnknown() && !endpointGroupsItem.Services.Discovery.OverrideConfiguration.IsNull() {
					*overrideConfiguration1 = endpointGroupsItem.Services.Discovery.OverrideConfiguration.ValueBool()
				} else {
					overrideConfiguration1 = nil
				}
				var configuration6 interface{}
				_ = json.Unmarshal([]byte(endpointGroupsItem.Services.Discovery.Configuration.ValueString()), &configuration6)
				enabled2 := new(bool)
				if !endpointGroupsItem.Services.Discovery.Enabled.IsUnknown() && !endpointGroupsItem.Services.Discovery.Enabled.IsNull() {
					*enabled2 = endpointGroupsItem.Services.Discovery.Enabled.ValueBool()
				} else {
					enabled2 = nil
				}
				var typeVar7 string
				typeVar7 = endpointGroupsItem.Services.Discovery.Type.ValueString()

				discovery = &shared.ServiceV4{
					OverrideConfiguration: overrideConfiguration1,
					Configuration:         configuration6,
					Enabled:               enabled2,
					Type:                  typeVar7,
				}
			}
			var healthCheck1 *shared.ServiceV4
			if endpointGroupsItem.Services.HealthCheck != nil {
				overrideConfiguration2 := new(bool)
				if !endpointGroupsItem.Services.HealthCheck.OverrideConfiguration.IsUnknown() && !endpointGroupsItem.Services.HealthCheck.OverrideConfiguration.IsNull() {
					*overrideConfiguration2 = endpointGroupsItem.Services.HealthCheck.OverrideConfiguration.ValueBool()
				} else {
					overrideConfiguration2 = nil
				}
				var configuration7 interface{}
				_ = json.Unmarshal([]byte(endpointGroupsItem.Services.HealthCheck.Configuration.ValueString()), &configuration7)
				enabled3 := new(bool)
				if !endpointGroupsItem.Services.HealthCheck.Enabled.IsUnknown() && !endpointGroupsItem.Services.HealthCheck.Enabled.IsNull() {
					*enabled3 = endpointGroupsItem.Services.HealthCheck.Enabled.ValueBool()
				} else {
					enabled3 = nil
				}
				var typeVar8 string
				typeVar8 = endpointGroupsItem.Services.HealthCheck.Type.ValueString()

				healthCheck1 = &shared.ServiceV4{
					OverrideConfiguration: overrideConfiguration2,
					Configuration:         configuration7,
					Enabled:               enabled3,
					Type:                  typeVar8,
				}
			}
			services1 = &shared.EndpointGroupServices{
				Discovery:   discovery,
				HealthCheck: healthCheck1,
			}
		}
		endpointGroups = append(endpointGroups, shared.EndpointGroupV4{
			Name:                name1,
			Type:                type5,
			LoadBalancer:        loadBalancer,
			SharedConfiguration: sharedConfiguration,
			Endpoints:           endpoints,
			Services:            services1,
		})
	}
	var analytics *shared.Analytics
	if r.Analytics != nil {
		enabled4 := new(bool)
		if !r.Analytics.Enabled.IsUnknown() && !r.Analytics.Enabled.IsNull() {
			*enabled4 = r.Analytics.Enabled.ValueBool()
		} else {
			enabled4 = nil
		}
		var sampling *shared.Sampling
		if r.Analytics.Sampling != nil {
			typeVar9 := shared.SamplingType(r.Analytics.Sampling.Type.ValueString())
			value := new(string)
			if !r.Analytics.Sampling.Value.IsUnknown() && !r.Analytics.Sampling.Value.IsNull() {
				*value = r.Analytics.Sampling.Value.ValueString()
			} else {
				value = nil
			}
			sampling = &shared.Sampling{
				Type:  typeVar9,
				Value: value,
			}
		}
		var logging *shared.LoggingV4
		if r.Analytics.Logging != nil {
			condition := new(string)
			if !r.Analytics.Logging.Condition.IsUnknown() && !r.Analytics.Logging.Condition.IsNull() {
				*condition = r.Analytics.Logging.Condition.ValueString()
			} else {
				condition = nil
			}
			messageCondition := new(string)
			if !r.Analytics.Logging.MessageCondition.IsUnknown() && !r.Analytics.Logging.MessageCondition.IsNull() {
				*messageCondition = r.Analytics.Logging.MessageCondition.ValueString()
			} else {
				messageCondition = nil
			}
			var content *shared.LoggingContentV4
			if r.Analytics.Logging.Content != nil {
				headers := new(bool)
				if !r.Analytics.Logging.Content.Headers.IsUnknown() && !r.Analytics.Logging.Content.Headers.IsNull() {
					*headers = r.Analytics.Logging.Content.Headers.ValueBool()
				} else {
					headers = nil
				}
				messageHeaders := new(bool)
				if !r.Analytics.Logging.Content.MessageHeaders.IsUnknown() && !r.Analytics.Logging.Content.MessageHeaders.IsNull() {
					*messageHeaders = r.Analytics.Logging.Content.MessageHeaders.ValueBool()
				} else {
					messageHeaders = nil
				}
				payload := new(bool)
				if !r.Analytics.Logging.Content.Payload.IsUnknown() && !r.Analytics.Logging.Content.Payload.IsNull() {
					*payload = r.Analytics.Logging.Content.Payload.ValueBool()
				} else {
					payload = nil
				}
				messagePayload := new(bool)
				if !r.Analytics.Logging.Content.MessagePayload.IsUnknown() && !r.Analytics.Logging.Content.MessagePayload.IsNull() {
					*messagePayload = r.Analytics.Logging.Content.MessagePayload.ValueBool()
				} else {
					messagePayload = nil
				}
				messageMetadata := new(bool)
				if !r.Analytics.Logging.Content.MessageMetadata.IsUnknown() && !r.Analytics.Logging.Content.MessageMetadata.IsNull() {
					*messageMetadata = r.Analytics.Logging.Content.MessageMetadata.ValueBool()
				} else {
					messageMetadata = nil
				}
				content = &shared.LoggingContentV4{
					Headers:         headers,
					MessageHeaders:  messageHeaders,
					Payload:         payload,
					MessagePayload:  messagePayload,
					MessageMetadata: messageMetadata,
				}
			}
			var phase *shared.LoggingPhase
			if r.Analytics.Logging.Phase != nil {
				request := new(bool)
				if !r.Analytics.Logging.Phase.Request.IsUnknown() && !r.Analytics.Logging.Phase.Request.IsNull() {
					*request = r.Analytics.Logging.Phase.Request.ValueBool()
				} else {
					request = nil
				}
				response := new(bool)
				if !r.Analytics.Logging.Phase.Response.IsUnknown() && !r.Analytics.Logging.Phase.Response.IsNull() {
					*response = r.Analytics.Logging.Phase.Response.ValueBool()
				} else {
					response = nil
				}
				phase = &shared.LoggingPhase{
					Request:  request,
					Response: response,
				}
			}
			var mode *shared.LoggingModeV4
			if r.Analytics.Logging.Mode != nil {
				endpoint4 := new(bool)
				if !r.Analytics.Logging.Mode.Endpoint.IsUnknown() && !r.Analytics.Logging.Mode.Endpoint.IsNull() {
					*endpoint4 = r.Analytics.Logging.Mode.Endpoint.ValueBool()
				} else {
					endpoint4 = nil
				}
				entrypoint := new(bool)
				if !r.Analytics.Logging.Mode.Entrypoint.IsUnknown() && !r.Analytics.Logging.Mode.Entrypoint.IsNull() {
					*entrypoint = r.Analytics.Logging.Mode.Entrypoint.ValueBool()
				} else {
					entrypoint = nil
				}
				mode = &shared.LoggingModeV4{
					Endpoint:   endpoint4,
					Entrypoint: entrypoint,
				}
			}
			logging = &shared.LoggingV4{
				Condition:        condition,
				MessageCondition: messageCondition,
				Content:          content,
				Phase:            phase,
				Mode:             mode,
			}
		}
		var tracing *shared.TracingV4
		if r.Analytics.Tracing != nil {
			enabled5 := new(bool)
			if !r.Analytics.Tracing.Enabled.IsUnknown() && !r.Analytics.Tracing.Enabled.IsNull() {
				*enabled5 = r.Analytics.Tracing.Enabled.ValueBool()
			} else {
				enabled5 = nil
			}
			verbose := new(bool)
			if !r.Analytics.Tracing.Verbose.IsUnknown() && !r.Analytics.Tracing.Verbose.IsNull() {
				*verbose = r.Analytics.Tracing.Verbose.ValueBool()
			} else {
				verbose = nil
			}
			tracing = &shared.TracingV4{
				Enabled: enabled5,
				Verbose: verbose,
			}
		}
		analytics = &shared.Analytics{
			Enabled:  enabled4,
			Sampling: sampling,
			Logging:  logging,
			Tracing:  tracing,
		}
	}
	var failover *shared.FailoverV4
	if r.Failover != nil {
		enabled6 := new(bool)
		if !r.Failover.Enabled.IsUnknown() && !r.Failover.Enabled.IsNull() {
			*enabled6 = r.Failover.Enabled.ValueBool()
		} else {
			enabled6 = nil
		}
		maxRetries := new(int)
		if !r.Failover.MaxRetries.IsUnknown() && !r.Failover.MaxRetries.IsNull() {
			*maxRetries = int(r.Failover.MaxRetries.ValueInt32())
		} else {
			maxRetries = nil
		}
		slowCallDuration := new(int64)
		if !r.Failover.SlowCallDuration.IsUnknown() && !r.Failover.SlowCallDuration.IsNull() {
			*slowCallDuration = r.Failover.SlowCallDuration.ValueInt64()
		} else {
			slowCallDuration = nil
		}
		openStateDuration := new(int64)
		if !r.Failover.OpenStateDuration.IsUnknown() && !r.Failover.OpenStateDuration.IsNull() {
			*openStateDuration = r.Failover.OpenStateDuration.ValueInt64()
		} else {
			openStateDuration = nil
		}
		maxFailures := new(int)
		if !r.Failover.MaxFailures.IsUnknown() && !r.Failover.MaxFailures.IsNull() {
			*maxFailures = int(r.Failover.MaxFailures.ValueInt32())
		} else {
			maxFailures = nil
		}
		perSubscription := new(bool)
		if !r.Failover.PerSubscription.IsUnknown() && !r.Failover.PerSubscription.IsNull() {
			*perSubscription = r.Failover.PerSubscription.ValueBool()
		} else {
			perSubscription = nil
		}
		failover = &shared.FailoverV4{
			Enabled:           enabled6,
			MaxRetries:        maxRetries,
			SlowCallDuration:  slowCallDuration,
			OpenStateDuration: openStateDuration,
			MaxFailures:       maxFailures,
			PerSubscription:   perSubscription,
		}
	}
	properties := make([]shared.PropertyInput, 0, len(r.Properties))
	for _, propertiesItem := range r.Properties {
		var key string
		key = propertiesItem.Key.ValueString()

		var value1 string
		value1 = propertiesItem.Value.ValueString()

		dynamic := new(bool)
		if !propertiesItem.Dynamic.IsUnknown() && !propertiesItem.Dynamic.IsNull() {
			*dynamic = propertiesItem.Dynamic.ValueBool()
		} else {
			dynamic = nil
		}
		encryptable := new(bool)
		if !propertiesItem.Encryptable.IsUnknown() && !propertiesItem.Encryptable.IsNull() {
			*encryptable = propertiesItem.Encryptable.ValueBool()
		} else {
			encryptable = nil
		}
		properties = append(properties, shared.PropertyInput{
			Key:         key,
			Value:       value1,
			Dynamic:     dynamic,
			Encryptable: encryptable,
		})
	}
	resources := make([]shared.APIResource, 0, len(r.Resources))
	for _, resourcesItem := range r.Resources {
		var name3 string
		name3 = resourcesItem.Name.ValueString()

		var type7 string
		type7 = resourcesItem.Type.ValueString()

		var configuration8 interface{}
		_ = json.Unmarshal([]byte(resourcesItem.Configuration.ValueString()), &configuration8)
		enabled7 := new(bool)
		if !resourcesItem.Enabled.IsUnknown() && !resourcesItem.Enabled.IsNull() {
			*enabled7 = resourcesItem.Enabled.ValueBool()
		} else {
			enabled7 = nil
		}
		resources = append(resources, shared.APIResource{
			Name:          name3,
			Type:          type7,
			Configuration: configuration8,
			Enabled:       enabled7,
		})
	}
	plans := make([]shared.PlanV4, 0, len(r.Plans))
	for _, plansItem := range r.Plans {
		var hrid1 string
		hrid1 = plansItem.Hrid.ValueString()

		var name4 string
		name4 = plansItem.Name.ValueString()

		description1 := new(string)
		if !plansItem.Description.IsUnknown() && !plansItem.Description.IsNull() {
			*description1 = plansItem.Description.ValueString()
		} else {
			description1 = nil
		}
		typeVar10 := shared.PlanSecurityType(plansItem.Security.Type.ValueString())
		var configuration9 interface{}
		if !plansItem.Security.Configuration.IsUnknown() && !plansItem.Security.Configuration.IsNull() {
			_ = json.Unmarshal([]byte(plansItem.Security.Configuration.ValueString()), &configuration9)
		}
		security := shared.PlanSecurity{
			Type:          typeVar10,
			Configuration: configuration9,
		}
		characteristics := make([]string, 0, len(plansItem.Characteristics))
		for _, characteristicsItem := range plansItem.Characteristics {
			characteristics = append(characteristics, characteristicsItem.ValueString())
		}
		excludedGroups := make([]string, 0, len(plansItem.ExcludedGroups))
		for _, excludedGroupsItem := range plansItem.ExcludedGroups {
			excludedGroups = append(excludedGroups, excludedGroupsItem.ValueString())
		}
		selectionRule := new(string)
		if !plansItem.SelectionRule.IsUnknown() && !plansItem.SelectionRule.IsNull() {
			*selectionRule = plansItem.SelectionRule.ValueString()
		} else {
			selectionRule = nil
		}
		status := shared.PlanStatus(plansItem.Status.ValueString())
		tags1 := make([]string, 0, len(plansItem.Tags))
		for _, tagsItem1 := range plansItem.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
		type8 := new(shared.PlanType)
		if !plansItem.Type.IsUnknown() && !plansItem.Type.IsNull() {
			*type8 = shared.PlanType(plansItem.Type.ValueString())
		} else {
			type8 = nil
		}
		validation := new(shared.PlanValidation)
		if !plansItem.Validation.IsUnknown() && !plansItem.Validation.IsNull() {
			*validation = shared.PlanValidation(plansItem.Validation.ValueString())
		} else {
			validation = nil
		}
		flows := make([]shared.FlowV4, 0, len(plansItem.Flows))
		for _, flowsItem := range plansItem.Flows {
			name5 := new(string)
			if !flowsItem.Name.IsUnknown() && !flowsItem.Name.IsNull() {
				*name5 = flowsItem.Name.ValueString()
			} else {
				name5 = nil
			}
			enabled8 := new(bool)
			if !flowsItem.Enabled.IsUnknown() && !flowsItem.Enabled.IsNull() {
				*enabled8 = flowsItem.Enabled.ValueBool()
			} else {
				enabled8 = nil
			}
			selectors := make([]shared.Selector, 0, len(flowsItem.Selectors))
			for _, selectorsItem := range flowsItem.Selectors {
				if selectorsItem.HTTP != nil {
					typeVar11 := shared.HTTPSelectorType(selectorsItem.HTTP.Type.ValueString())
					path1 := new(string)
					if !selectorsItem.HTTP.Path.IsUnknown() && !selectorsItem.HTTP.Path.IsNull() {
						*path1 = selectorsItem.HTTP.Path.ValueString()
					} else {
						path1 = nil
					}
					pathOperator := new(shared.Operator)
					if !selectorsItem.HTTP.PathOperator.IsUnknown() && !selectorsItem.HTTP.PathOperator.IsNull() {
						*pathOperator = shared.Operator(selectorsItem.HTTP.PathOperator.ValueString())
					} else {
						pathOperator = nil
					}
					methods := make([]shared.HTTPMethod, 0, len(selectorsItem.HTTP.Methods))
					for _, methodsItem := range selectorsItem.HTTP.Methods {
						methods = append(methods, shared.HTTPMethod(methodsItem.ValueString()))
					}
					httpSelector := shared.HTTPSelector{
						Type:         typeVar11,
						Path:         path1,
						PathOperator: pathOperator,
						Methods:      methods,
					}
					selectors = append(selectors, shared.Selector{
						HTTPSelector: &httpSelector,
					})
				}
				if selectorsItem.Channel != nil {
					typeVar12 := shared.ChannelSelectorType(selectorsItem.Channel.Type.ValueString())
					operationsVar := make([]shared.Operation, 0, len(selectorsItem.Channel.Operations))
					for _, operationsItem := range selectorsItem.Channel.Operations {
						operationsVar = append(operationsVar, shared.Operation(operationsItem.ValueString()))
					}
					channel := new(string)
					if !selectorsItem.Channel.Channel.IsUnknown() && !selectorsItem.Channel.Channel.IsNull() {
						*channel = selectorsItem.Channel.Channel.ValueString()
					} else {
						channel = nil
					}
					channelOperator := new(shared.Operator)
					if !selectorsItem.Channel.ChannelOperator.IsUnknown() && !selectorsItem.Channel.ChannelOperator.IsNull() {
						*channelOperator = shared.Operator(selectorsItem.Channel.ChannelOperator.ValueString())
					} else {
						channelOperator = nil
					}
					entrypoints4 := make([]string, 0, len(selectorsItem.Channel.Entrypoints))
					for _, entrypointsItem4 := range selectorsItem.Channel.Entrypoints {
						entrypoints4 = append(entrypoints4, entrypointsItem4.ValueString())
					}
					channelSelector := shared.ChannelSelector{
						Type:            typeVar12,
						Operations:      operationsVar,
						Channel:         channel,
						ChannelOperator: channelOperator,
						Entrypoints:     entrypoints4,
					}
					selectors = append(selectors, shared.Selector{
						ChannelSelector: &channelSelector,
					})
				}
				if selectorsItem.Condition != nil {
					typeVar13 := shared.ConditionSelectorType(selectorsItem.Condition.Type.ValueString())
					var condition1 string
					condition1 = selectorsItem.Condition.Condition.ValueString()

					conditionSelector := shared.ConditionSelector{
						Type:      typeVar13,
						Condition: condition1,
					}
					selectors = append(selectors, shared.Selector{
						ConditionSelector: &conditionSelector,
					})
				}
			}
			request1 := make([]shared.StepV4, 0, len(flowsItem.Request))
			for _, requestItem := range flowsItem.Request {
				name6 := new(string)
				if !requestItem.Name.IsUnknown() && !requestItem.Name.IsNull() {
					*name6 = requestItem.Name.ValueString()
				} else {
					name6 = nil
				}
				description2 := new(string)
				if !requestItem.Description.IsUnknown() && !requestItem.Description.IsNull() {
					*description2 = requestItem.Description.ValueString()
				} else {
					description2 = nil
				}
				enabled9 := new(bool)
				if !requestItem.Enabled.IsUnknown() && !requestItem.Enabled.IsNull() {
					*enabled9 = requestItem.Enabled.ValueBool()
				} else {
					enabled9 = nil
				}
				var policy string
				policy = requestItem.Policy.ValueString()

				var configuration10 interface{}
				if !requestItem.Configuration.IsUnknown() && !requestItem.Configuration.IsNull() {
					_ = json.Unmarshal([]byte(requestItem.Configuration.ValueString()), &configuration10)
				}
				condition2 := new(string)
				if !requestItem.Condition.IsUnknown() && !requestItem.Condition.IsNull() {
					*condition2 = requestItem.Condition.ValueString()
				} else {
					condition2 = nil
				}
				messageCondition1 := new(string)
				if !requestItem.MessageCondition.IsUnknown() && !requestItem.MessageCondition.IsNull() {
					*messageCondition1 = requestItem.MessageCondition.ValueString()
				} else {
					messageCondition1 = nil
				}
				request1 = append(request1, shared.StepV4{
					Name:             name6,
					Description:      description2,
					Enabled:          enabled9,
					Policy:           policy,
					Configuration:    configuration10,
					Condition:        condition2,
					MessageCondition: messageCondition1,
				})
			}
			response1 := make([]shared.StepV4, 0, len(flowsItem.Response))
			for _, responseItem := range flowsItem.Response {
				name7 := new(string)
				if !responseItem.Name.IsUnknown() && !responseItem.Name.IsNull() {
					*name7 = responseItem.Name.ValueString()
				} else {
					name7 = nil
				}
				description3 := new(string)
				if !responseItem.Description.IsUnknown() && !responseItem.Description.IsNull() {
					*description3 = responseItem.Description.ValueString()
				} else {
					description3 = nil
				}
				enabled10 := new(bool)
				if !responseItem.Enabled.IsUnknown() && !responseItem.Enabled.IsNull() {
					*enabled10 = responseItem.Enabled.ValueBool()
				} else {
					enabled10 = nil
				}
				var policy1 string
				policy1 = responseItem.Policy.ValueString()

				var configuration11 interface{}
				if !responseItem.Configuration.IsUnknown() && !responseItem.Configuration.IsNull() {
					_ = json.Unmarshal([]byte(responseItem.Configuration.ValueString()), &configuration11)
				}
				condition3 := new(string)
				if !responseItem.Condition.IsUnknown() && !responseItem.Condition.IsNull() {
					*condition3 = responseItem.Condition.ValueString()
				} else {
					condition3 = nil
				}
				messageCondition2 := new(string)
				if !responseItem.MessageCondition.IsUnknown() && !responseItem.MessageCondition.IsNull() {
					*messageCondition2 = responseItem.MessageCondition.ValueString()
				} else {
					messageCondition2 = nil
				}
				response1 = append(response1, shared.StepV4{
					Name:             name7,
					Description:      description3,
					Enabled:          enabled10,
					Policy:           policy1,
					Configuration:    configuration11,
					Condition:        condition3,
					MessageCondition: messageCondition2,
				})
			}
			subscribe := make([]shared.StepV4, 0, len(flowsItem.Subscribe))
			for _, subscribeItem := range flowsItem.Subscribe {
				name8 := new(string)
				if !subscribeItem.Name.IsUnknown() && !subscribeItem.Name.IsNull() {
					*name8 = subscribeItem.Name.ValueString()
				} else {
					name8 = nil
				}
				description4 := new(string)
				if !subscribeItem.Description.IsUnknown() && !subscribeItem.Description.IsNull() {
					*description4 = subscribeItem.Description.ValueString()
				} else {
					description4 = nil
				}
				enabled11 := new(bool)
				if !subscribeItem.Enabled.IsUnknown() && !subscribeItem.Enabled.IsNull() {
					*enabled11 = subscribeItem.Enabled.ValueBool()
				} else {
					enabled11 = nil
				}
				var policy2 string
				policy2 = subscribeItem.Policy.ValueString()

				var configuration12 interface{}
				if !subscribeItem.Configuration.IsUnknown() && !subscribeItem.Configuration.IsNull() {
					_ = json.Unmarshal([]byte(subscribeItem.Configuration.ValueString()), &configuration12)
				}
				condition4 := new(string)
				if !subscribeItem.Condition.IsUnknown() && !subscribeItem.Condition.IsNull() {
					*condition4 = subscribeItem.Condition.ValueString()
				} else {
					condition4 = nil
				}
				messageCondition3 := new(string)
				if !subscribeItem.MessageCondition.IsUnknown() && !subscribeItem.MessageCondition.IsNull() {
					*messageCondition3 = subscribeItem.MessageCondition.ValueString()
				} else {
					messageCondition3 = nil
				}
				subscribe = append(subscribe, shared.StepV4{
					Name:             name8,
					Description:      description4,
					Enabled:          enabled11,
					Policy:           policy2,
					Configuration:    configuration12,
					Condition:        condition4,
					MessageCondition: messageCondition3,
				})
			}
			publish := make([]shared.StepV4, 0, len(flowsItem.Publish))
			for _, publishItem := range flowsItem.Publish {
				name9 := new(string)
				if !publishItem.Name.IsUnknown() && !publishItem.Name.IsNull() {
					*name9 = publishItem.Name.ValueString()
				} else {
					name9 = nil
				}
				description5 := new(string)
				if !publishItem.Description.IsUnknown() && !publishItem.Description.IsNull() {
					*description5 = publishItem.Description.ValueString()
				} else {
					description5 = nil
				}
				enabled12 := new(bool)
				if !publishItem.Enabled.IsUnknown() && !publishItem.Enabled.IsNull() {
					*enabled12 = publishItem.Enabled.ValueBool()
				} else {
					enabled12 = nil
				}
				var policy3 string
				policy3 = publishItem.Policy.ValueString()

				var configuration13 interface{}
				if !publishItem.Configuration.IsUnknown() && !publishItem.Configuration.IsNull() {
					_ = json.Unmarshal([]byte(publishItem.Configuration.ValueString()), &configuration13)
				}
				condition5 := new(string)
				if !publishItem.Condition.IsUnknown() && !publishItem.Condition.IsNull() {
					*condition5 = publishItem.Condition.ValueString()
				} else {
					condition5 = nil
				}
				messageCondition4 := new(string)
				if !publishItem.MessageCondition.IsUnknown() && !publishItem.MessageCondition.IsNull() {
					*messageCondition4 = publishItem.MessageCondition.ValueString()
				} else {
					messageCondition4 = nil
				}
				publish = append(publish, shared.StepV4{
					Name:             name9,
					Description:      description5,
					Enabled:          enabled12,
					Policy:           policy3,
					Configuration:    configuration13,
					Condition:        condition5,
					MessageCondition: messageCondition4,
				})
			}
			connect := make([]shared.StepV4, 0, len(flowsItem.Connect))
			for _, connectItem := range flowsItem.Connect {
				name10 := new(string)
				if !connectItem.Name.IsUnknown() && !connectItem.Name.IsNull() {
					*name10 = connectItem.Name.ValueString()
				} else {
					name10 = nil
				}
				description6 := new(string)
				if !connectItem.Description.IsUnknown() && !connectItem.Description.IsNull() {
					*description6 = connectItem.Description.ValueString()
				} else {
					description6 = nil
				}
				enabled13 := new(bool)
				if !connectItem.Enabled.IsUnknown() && !connectItem.Enabled.IsNull() {
					*enabled13 = connectItem.Enabled.ValueBool()
				} else {
					enabled13 = nil
				}
				var policy4 string
				policy4 = connectItem.Policy.ValueString()

				var configuration14 interface{}
				if !connectItem.Configuration.IsUnknown() && !connectItem.Configuration.IsNull() {
					_ = json.Unmarshal([]byte(connectItem.Configuration.ValueString()), &configuration14)
				}
				condition6 := new(string)
				if !connectItem.Condition.IsUnknown() && !connectItem.Condition.IsNull() {
					*condition6 = connectItem.Condition.ValueString()
				} else {
					condition6 = nil
				}
				messageCondition5 := new(string)
				if !connectItem.MessageCondition.IsUnknown() && !connectItem.MessageCondition.IsNull() {
					*messageCondition5 = connectItem.MessageCondition.ValueString()
				} else {
					messageCondition5 = nil
				}
				connect = append(connect, shared.StepV4{
					Name:             name10,
					Description:      description6,
					Enabled:          enabled13,
					Policy:           policy4,
					Configuration:    configuration14,
					Condition:        condition6,
					MessageCondition: messageCondition5,
				})
			}
			interact := make([]shared.StepV4, 0, len(flowsItem.Interact))
			for _, interactItem := range flowsItem.Interact {
				name11 := new(string)
				if !interactItem.Name.IsUnknown() && !interactItem.Name.IsNull() {
					*name11 = interactItem.Name.ValueString()
				} else {
					name11 = nil
				}
				description7 := new(string)
				if !interactItem.Description.IsUnknown() && !interactItem.Description.IsNull() {
					*description7 = interactItem.Description.ValueString()
				} else {
					description7 = nil
				}
				enabled14 := new(bool)
				if !interactItem.Enabled.IsUnknown() && !interactItem.Enabled.IsNull() {
					*enabled14 = interactItem.Enabled.ValueBool()
				} else {
					enabled14 = nil
				}
				var policy5 string
				policy5 = interactItem.Policy.ValueString()

				var configuration15 interface{}
				if !interactItem.Configuration.IsUnknown() && !interactItem.Configuration.IsNull() {
					_ = json.Unmarshal([]byte(interactItem.Configuration.ValueString()), &configuration15)
				}
				condition7 := new(string)
				if !interactItem.Condition.IsUnknown() && !interactItem.Condition.IsNull() {
					*condition7 = interactItem.Condition.ValueString()
				} else {
					condition7 = nil
				}
				messageCondition6 := new(string)
				if !interactItem.MessageCondition.IsUnknown() && !interactItem.MessageCondition.IsNull() {
					*messageCondition6 = interactItem.MessageCondition.ValueString()
				} else {
					messageCondition6 = nil
				}
				interact = append(interact, shared.StepV4{
					Name:             name11,
					Description:      description7,
					Enabled:          enabled14,
					Policy:           policy5,
					Configuration:    configuration15,
					Condition:        condition7,
					MessageCondition: messageCondition6,
				})
			}
			tags2 := make([]string, 0, len(flowsItem.Tags))
			for _, tagsItem2 := range flowsItem.Tags {
				tags2 = append(tags2, tagsItem2.ValueString())
			}
			flows = append(flows, shared.FlowV4{
				Name:      name5,
				Enabled:   enabled8,
				Selectors: selectors,
				Request:   request1,
				Response:  response1,
				Subscribe: subscribe,
				Publish:   publish,
				Connect:   connect,
				Interact:  interact,
				Tags:      tags2,
			})
		}
		mode1 := shared.PlanMode(plansItem.Mode.ValueString())
		generalConditionsHrid := new(string)
		if !plansItem.GeneralConditionsHrid.IsUnknown() && !plansItem.GeneralConditionsHrid.IsNull() {
			*generalConditionsHrid = plansItem.GeneralConditionsHrid.ValueString()
		} else {
			generalConditionsHrid = nil
		}
		plans = append(plans, shared.PlanV4{
			Hrid:                  hrid1,
			Name:                  name4,
			Description:           description1,
			Security:              security,
			Characteristics:       characteristics,
			ExcludedGroups:        excludedGroups,
			SelectionRule:         selectionRule,
			Status:                status,
			Tags:                  tags1,
			Type:                  type8,
			Validation:            validation,
			Flows:                 flows,
			Mode:                  mode1,
			GeneralConditionsHrid: generalConditionsHrid,
		})
	}
	var flowExecution *shared.FlowExecution
	if r.FlowExecution != nil {
		mode2 := new(shared.FlowMode)
		if !r.FlowExecution.Mode.IsUnknown() && !r.FlowExecution.Mode.IsNull() {
			*mode2 = shared.FlowMode(r.FlowExecution.Mode.ValueString())
		} else {
			mode2 = nil
		}
		matchRequired := new(bool)
		if !r.FlowExecution.MatchRequired.IsUnknown() && !r.FlowExecution.MatchRequired.IsNull() {
			*matchRequired = r.FlowExecution.MatchRequired.ValueBool()
		} else {
			matchRequired = nil
		}
		flowExecution = &shared.FlowExecution{
			Mode:          mode2,
			MatchRequired: matchRequired,
		}
	}
	flows1 := make([]shared.FlowV4, 0, len(r.Flows))
	for _, flowsItem1 := range r.Flows {
		name12 := new(string)
		if !flowsItem1.Name.IsUnknown() && !flowsItem1.Name.IsNull() {
			*name12 = flowsItem1.Name.ValueString()
		} else {
			name12 = nil
		}
		enabled15 := new(bool)
		if !flowsItem1.Enabled.IsUnknown() && !flowsItem1.Enabled.IsNull() {
			*enabled15 = flowsItem1.Enabled.ValueBool()
		} else {
			enabled15 = nil
		}
		selectors1 := make([]shared.Selector, 0, len(flowsItem1.Selectors))
		for _, selectorsItem1 := range flowsItem1.Selectors {
			if selectorsItem1.HTTP != nil {
				typeVar14 := shared.HTTPSelectorType(selectorsItem1.HTTP.Type.ValueString())
				path2 := new(string)
				if !selectorsItem1.HTTP.Path.IsUnknown() && !selectorsItem1.HTTP.Path.IsNull() {
					*path2 = selectorsItem1.HTTP.Path.ValueString()
				} else {
					path2 = nil
				}
				pathOperator1 := new(shared.Operator)
				if !selectorsItem1.HTTP.PathOperator.IsUnknown() && !selectorsItem1.HTTP.PathOperator.IsNull() {
					*pathOperator1 = shared.Operator(selectorsItem1.HTTP.PathOperator.ValueString())
				} else {
					pathOperator1 = nil
				}
				methods1 := make([]shared.HTTPMethod, 0, len(selectorsItem1.HTTP.Methods))
				for _, methodsItem1 := range selectorsItem1.HTTP.Methods {
					methods1 = append(methods1, shared.HTTPMethod(methodsItem1.ValueString()))
				}
				httpSelector1 := shared.HTTPSelector{
					Type:         typeVar14,
					Path:         path2,
					PathOperator: pathOperator1,
					Methods:      methods1,
				}
				selectors1 = append(selectors1, shared.Selector{
					HTTPSelector: &httpSelector1,
				})
			}
			if selectorsItem1.Channel != nil {
				typeVar15 := shared.ChannelSelectorType(selectorsItem1.Channel.Type.ValueString())
				operationsVar1 := make([]shared.Operation, 0, len(selectorsItem1.Channel.Operations))
				for _, operationsItem1 := range selectorsItem1.Channel.Operations {
					operationsVar1 = append(operationsVar1, shared.Operation(operationsItem1.ValueString()))
				}
				channel1 := new(string)
				if !selectorsItem1.Channel.Channel.IsUnknown() && !selectorsItem1.Channel.Channel.IsNull() {
					*channel1 = selectorsItem1.Channel.Channel.ValueString()
				} else {
					channel1 = nil
				}
				channelOperator1 := new(shared.Operator)
				if !selectorsItem1.Channel.ChannelOperator.IsUnknown() && !selectorsItem1.Channel.ChannelOperator.IsNull() {
					*channelOperator1 = shared.Operator(selectorsItem1.Channel.ChannelOperator.ValueString())
				} else {
					channelOperator1 = nil
				}
				entrypoints5 := make([]string, 0, len(selectorsItem1.Channel.Entrypoints))
				for _, entrypointsItem5 := range selectorsItem1.Channel.Entrypoints {
					entrypoints5 = append(entrypoints5, entrypointsItem5.ValueString())
				}
				channelSelector1 := shared.ChannelSelector{
					Type:            typeVar15,
					Operations:      operationsVar1,
					Channel:         channel1,
					ChannelOperator: channelOperator1,
					Entrypoints:     entrypoints5,
				}
				selectors1 = append(selectors1, shared.Selector{
					ChannelSelector: &channelSelector1,
				})
			}
			if selectorsItem1.Condition != nil {
				typeVar16 := shared.ConditionSelectorType(selectorsItem1.Condition.Type.ValueString())
				var condition8 string
				condition8 = selectorsItem1.Condition.Condition.ValueString()

				conditionSelector1 := shared.ConditionSelector{
					Type:      typeVar16,
					Condition: condition8,
				}
				selectors1 = append(selectors1, shared.Selector{
					ConditionSelector: &conditionSelector1,
				})
			}
		}
		request2 := make([]shared.StepV4, 0, len(flowsItem1.Request))
		for _, requestItem1 := range flowsItem1.Request {
			name13 := new(string)
			if !requestItem1.Name.IsUnknown() && !requestItem1.Name.IsNull() {
				*name13 = requestItem1.Name.ValueString()
			} else {
				name13 = nil
			}
			description8 := new(string)
			if !requestItem1.Description.IsUnknown() && !requestItem1.Description.IsNull() {
				*description8 = requestItem1.Description.ValueString()
			} else {
				description8 = nil
			}
			enabled16 := new(bool)
			if !requestItem1.Enabled.IsUnknown() && !requestItem1.Enabled.IsNull() {
				*enabled16 = requestItem1.Enabled.ValueBool()
			} else {
				enabled16 = nil
			}
			var policy6 string
			policy6 = requestItem1.Policy.ValueString()

			var configuration16 interface{}
			if !requestItem1.Configuration.IsUnknown() && !requestItem1.Configuration.IsNull() {
				_ = json.Unmarshal([]byte(requestItem1.Configuration.ValueString()), &configuration16)
			}
			condition9 := new(string)
			if !requestItem1.Condition.IsUnknown() && !requestItem1.Condition.IsNull() {
				*condition9 = requestItem1.Condition.ValueString()
			} else {
				condition9 = nil
			}
			messageCondition7 := new(string)
			if !requestItem1.MessageCondition.IsUnknown() && !requestItem1.MessageCondition.IsNull() {
				*messageCondition7 = requestItem1.MessageCondition.ValueString()
			} else {
				messageCondition7 = nil
			}
			request2 = append(request2, shared.StepV4{
				Name:             name13,
				Description:      description8,
				Enabled:          enabled16,
				Policy:           policy6,
				Configuration:    configuration16,
				Condition:        condition9,
				MessageCondition: messageCondition7,
			})
		}
		response2 := make([]shared.StepV4, 0, len(flowsItem1.Response))
		for _, responseItem1 := range flowsItem1.Response {
			name14 := new(string)
			if !responseItem1.Name.IsUnknown() && !responseItem1.Name.IsNull() {
				*name14 = responseItem1.Name.ValueString()
			} else {
				name14 = nil
			}
			description9 := new(string)
			if !responseItem1.Description.IsUnknown() && !responseItem1.Description.IsNull() {
				*description9 = responseItem1.Description.ValueString()
			} else {
				description9 = nil
			}
			enabled17 := new(bool)
			if !responseItem1.Enabled.IsUnknown() && !responseItem1.Enabled.IsNull() {
				*enabled17 = responseItem1.Enabled.ValueBool()
			} else {
				enabled17 = nil
			}
			var policy7 string
			policy7 = responseItem1.Policy.ValueString()

			var configuration17 interface{}
			if !responseItem1.Configuration.IsUnknown() && !responseItem1.Configuration.IsNull() {
				_ = json.Unmarshal([]byte(responseItem1.Configuration.ValueString()), &configuration17)
			}
			condition10 := new(string)
			if !responseItem1.Condition.IsUnknown() && !responseItem1.Condition.IsNull() {
				*condition10 = responseItem1.Condition.ValueString()
			} else {
				condition10 = nil
			}
			messageCondition8 := new(string)
			if !responseItem1.MessageCondition.IsUnknown() && !responseItem1.MessageCondition.IsNull() {
				*messageCondition8 = responseItem1.MessageCondition.ValueString()
			} else {
				messageCondition8 = nil
			}
			response2 = append(response2, shared.StepV4{
				Name:             name14,
				Description:      description9,
				Enabled:          enabled17,
				Policy:           policy7,
				Configuration:    configuration17,
				Condition:        condition10,
				MessageCondition: messageCondition8,
			})
		}
		subscribe1 := make([]shared.StepV4, 0, len(flowsItem1.Subscribe))
		for _, subscribeItem1 := range flowsItem1.Subscribe {
			name15 := new(string)
			if !subscribeItem1.Name.IsUnknown() && !subscribeItem1.Name.IsNull() {
				*name15 = subscribeItem1.Name.ValueString()
			} else {
				name15 = nil
			}
			description10 := new(string)
			if !subscribeItem1.Description.IsUnknown() && !subscribeItem1.Description.IsNull() {
				*description10 = subscribeItem1.Description.ValueString()
			} else {
				description10 = nil
			}
			enabled18 := new(bool)
			if !subscribeItem1.Enabled.IsUnknown() && !subscribeItem1.Enabled.IsNull() {
				*enabled18 = subscribeItem1.Enabled.ValueBool()
			} else {
				enabled18 = nil
			}
			var policy8 string
			policy8 = subscribeItem1.Policy.ValueString()

			var configuration18 interface{}
			if !subscribeItem1.Configuration.IsUnknown() && !subscribeItem1.Configuration.IsNull() {
				_ = json.Unmarshal([]byte(subscribeItem1.Configuration.ValueString()), &configuration18)
			}
			condition11 := new(string)
			if !subscribeItem1.Condition.IsUnknown() && !subscribeItem1.Condition.IsNull() {
				*condition11 = subscribeItem1.Condition.ValueString()
			} else {
				condition11 = nil
			}
			messageCondition9 := new(string)
			if !subscribeItem1.MessageCondition.IsUnknown() && !subscribeItem1.MessageCondition.IsNull() {
				*messageCondition9 = subscribeItem1.MessageCondition.ValueString()
			} else {
				messageCondition9 = nil
			}
			subscribe1 = append(subscribe1, shared.StepV4{
				Name:             name15,
				Description:      description10,
				Enabled:          enabled18,
				Policy:           policy8,
				Configuration:    configuration18,
				Condition:        condition11,
				MessageCondition: messageCondition9,
			})
		}
		publish1 := make([]shared.StepV4, 0, len(flowsItem1.Publish))
		for _, publishItem1 := range flowsItem1.Publish {
			name16 := new(string)
			if !publishItem1.Name.IsUnknown() && !publishItem1.Name.IsNull() {
				*name16 = publishItem1.Name.ValueString()
			} else {
				name16 = nil
			}
			description11 := new(string)
			if !publishItem1.Description.IsUnknown() && !publishItem1.Description.IsNull() {
				*description11 = publishItem1.Description.ValueString()
			} else {
				description11 = nil
			}
			enabled19 := new(bool)
			if !publishItem1.Enabled.IsUnknown() && !publishItem1.Enabled.IsNull() {
				*enabled19 = publishItem1.Enabled.ValueBool()
			} else {
				enabled19 = nil
			}
			var policy9 string
			policy9 = publishItem1.Policy.ValueString()

			var configuration19 interface{}
			if !publishItem1.Configuration.IsUnknown() && !publishItem1.Configuration.IsNull() {
				_ = json.Unmarshal([]byte(publishItem1.Configuration.ValueString()), &configuration19)
			}
			condition12 := new(string)
			if !publishItem1.Condition.IsUnknown() && !publishItem1.Condition.IsNull() {
				*condition12 = publishItem1.Condition.ValueString()
			} else {
				condition12 = nil
			}
			messageCondition10 := new(string)
			if !publishItem1.MessageCondition.IsUnknown() && !publishItem1.MessageCondition.IsNull() {
				*messageCondition10 = publishItem1.MessageCondition.ValueString()
			} else {
				messageCondition10 = nil
			}
			publish1 = append(publish1, shared.StepV4{
				Name:             name16,
				Description:      description11,
				Enabled:          enabled19,
				Policy:           policy9,
				Configuration:    configuration19,
				Condition:        condition12,
				MessageCondition: messageCondition10,
			})
		}
		connect1 := make([]shared.StepV4, 0, len(flowsItem1.Connect))
		for _, connectItem1 := range flowsItem1.Connect {
			name17 := new(string)
			if !connectItem1.Name.IsUnknown() && !connectItem1.Name.IsNull() {
				*name17 = connectItem1.Name.ValueString()
			} else {
				name17 = nil
			}
			description12 := new(string)
			if !connectItem1.Description.IsUnknown() && !connectItem1.Description.IsNull() {
				*description12 = connectItem1.Description.ValueString()
			} else {
				description12 = nil
			}
			enabled20 := new(bool)
			if !connectItem1.Enabled.IsUnknown() && !connectItem1.Enabled.IsNull() {
				*enabled20 = connectItem1.Enabled.ValueBool()
			} else {
				enabled20 = nil
			}
			var policy10 string
			policy10 = connectItem1.Policy.ValueString()

			var configuration20 interface{}
			if !connectItem1.Configuration.IsUnknown() && !connectItem1.Configuration.IsNull() {
				_ = json.Unmarshal([]byte(connectItem1.Configuration.ValueString()), &configuration20)
			}
			condition13 := new(string)
			if !connectItem1.Condition.IsUnknown() && !connectItem1.Condition.IsNull() {
				*condition13 = connectItem1.Condition.ValueString()
			} else {
				condition13 = nil
			}
			messageCondition11 := new(string)
			if !connectItem1.MessageCondition.IsUnknown() && !connectItem1.MessageCondition.IsNull() {
				*messageCondition11 = connectItem1.MessageCondition.ValueString()
			} else {
				messageCondition11 = nil
			}
			connect1 = append(connect1, shared.StepV4{
				Name:             name17,
				Description:      description12,
				Enabled:          enabled20,
				Policy:           policy10,
				Configuration:    configuration20,
				Condition:        condition13,
				MessageCondition: messageCondition11,
			})
		}
		interact1 := make([]shared.StepV4, 0, len(flowsItem1.Interact))
		for _, interactItem1 := range flowsItem1.Interact {
			name18 := new(string)
			if !interactItem1.Name.IsUnknown() && !interactItem1.Name.IsNull() {
				*name18 = interactItem1.Name.ValueString()
			} else {
				name18 = nil
			}
			description13 := new(string)
			if !interactItem1.Description.IsUnknown() && !interactItem1.Description.IsNull() {
				*description13 = interactItem1.Description.ValueString()
			} else {
				description13 = nil
			}
			enabled21 := new(bool)
			if !interactItem1.Enabled.IsUnknown() && !interactItem1.Enabled.IsNull() {
				*enabled21 = interactItem1.Enabled.ValueBool()
			} else {
				enabled21 = nil
			}
			var policy11 string
			policy11 = interactItem1.Policy.ValueString()

			var configuration21 interface{}
			if !interactItem1.Configuration.IsUnknown() && !interactItem1.Configuration.IsNull() {
				_ = json.Unmarshal([]byte(interactItem1.Configuration.ValueString()), &configuration21)
			}
			condition14 := new(string)
			if !interactItem1.Condition.IsUnknown() && !interactItem1.Condition.IsNull() {
				*condition14 = interactItem1.Condition.ValueString()
			} else {
				condition14 = nil
			}
			messageCondition12 := new(string)
			if !interactItem1.MessageCondition.IsUnknown() && !interactItem1.MessageCondition.IsNull() {
				*messageCondition12 = interactItem1.MessageCondition.ValueString()
			} else {
				messageCondition12 = nil
			}
			interact1 = append(interact1, shared.StepV4{
				Name:             name18,
				Description:      description13,
				Enabled:          enabled21,
				Policy:           policy11,
				Configuration:    configuration21,
				Condition:        condition14,
				MessageCondition: messageCondition12,
			})
		}
		tags3 := make([]string, 0, len(flowsItem1.Tags))
		for _, tagsItem3 := range flowsItem1.Tags {
			tags3 = append(tags3, tagsItem3.ValueString())
		}
		flows1 = append(flows1, shared.FlowV4{
			Name:      name12,
			Enabled:   enabled15,
			Selectors: selectors1,
			Request:   request2,
			Response:  response2,
			Subscribe: subscribe1,
			Publish:   publish1,
			Connect:   connect1,
			Interact:  interact1,
			Tags:      tags3,
		})
	}
	responseTemplates := make(map[string]map[string]shared.ResponseTemplate)
	for responseTemplatesKey, responseTemplatesValue := range r.ResponseTemplates {
		responseTemplatesInst := make(map[string]shared.ResponseTemplate)
		for key1, value2 := range responseTemplatesValue {
			var status1 int64
			status1 = value2.Status.ValueInt64()

			headers1 := make(map[string]string)
			for headersKey, headersValue := range value2.Headers {
				var headersInst string
				headersInst = headersValue.ValueString()

				headers1[headersKey] = headersInst
			}
			body := new(string)
			if !value2.Body.IsUnknown() && !value2.Body.IsNull() {
				*body = value2.Body.ValueString()
			} else {
				body = nil
			}
			propagateErrorKeyToLogs := new(bool)
			if !value2.PropagateErrorKeyToLogs.IsUnknown() && !value2.PropagateErrorKeyToLogs.IsNull() {
				*propagateErrorKeyToLogs = value2.PropagateErrorKeyToLogs.ValueBool()
			} else {
				propagateErrorKeyToLogs = nil
			}
			inst := shared.ResponseTemplate{
				Status:                  status1,
				Headers:                 headers1,
				Body:                    body,
				PropagateErrorKeyToLogs: propagateErrorKeyToLogs,
			}
			responseTemplatesInst[key1] = inst
		}
		responseTemplates[responseTemplatesKey] = responseTemplatesInst
	}
	var services2 *shared.APIServices
	if r.Services != nil {
		var dynamicProperty *shared.ServiceV4
		if r.Services.DynamicProperty != nil {
			overrideConfiguration3 := new(bool)
			if !r.Services.DynamicProperty.OverrideConfiguration.IsUnknown() && !r.Services.DynamicProperty.OverrideConfiguration.IsNull() {
				*overrideConfiguration3 = r.Services.DynamicProperty.OverrideConfiguration.ValueBool()
			} else {
				overrideConfiguration3 = nil
			}
			var configuration22 interface{}
			_ = json.Unmarshal([]byte(r.Services.DynamicProperty.Configuration.ValueString()), &configuration22)
			enabled22 := new(bool)
			if !r.Services.DynamicProperty.Enabled.IsUnknown() && !r.Services.DynamicProperty.Enabled.IsNull() {
				*enabled22 = r.Services.DynamicProperty.Enabled.ValueBool()
			} else {
				enabled22 = nil
			}
			var typeVar17 string
			typeVar17 = r.Services.DynamicProperty.Type.ValueString()

			dynamicProperty = &shared.ServiceV4{
				OverrideConfiguration: overrideConfiguration3,
				Configuration:         configuration22,
				Enabled:               enabled22,
				Type:                  typeVar17,
			}
		}
		services2 = &shared.APIServices{
			DynamicProperty: dynamicProperty,
		}
	}
	groups := make([]string, 0, len(r.Groups))
	for _, groupsItem := range r.Groups {
		groups = append(groups, groupsItem.ValueString())
	}
	visibility := new(shared.Visibility)
	if !r.Visibility.IsUnknown() && !r.Visibility.IsNull() {
		*visibility = shared.Visibility(r.Visibility.ValueString())
	} else {
		visibility = nil
	}
	state := new(shared.LifecycleState)
	if !r.State.IsUnknown() && !r.State.IsNull() {
		*state = shared.LifecycleState(r.State.ValueString())
	} else {
		state = nil
	}
	var primaryOwner *shared.PrimaryOwner
	if r.PrimaryOwner != nil {
		id := new(string)
		if !r.PrimaryOwner.ID.IsUnknown() && !r.PrimaryOwner.ID.IsNull() {
			*id = r.PrimaryOwner.ID.ValueString()
		} else {
			id = nil
		}
		email := new(string)
		if !r.PrimaryOwner.Email.IsUnknown() && !r.PrimaryOwner.Email.IsNull() {
			*email = r.PrimaryOwner.Email.ValueString()
		} else {
			email = nil
		}
		displayName := new(string)
		if !r.PrimaryOwner.DisplayName.IsUnknown() && !r.PrimaryOwner.DisplayName.IsNull() {
			*displayName = r.PrimaryOwner.DisplayName.ValueString()
		} else {
			displayName = nil
		}
		typeVar18 := new(shared.MembershipMemberType)
		if !r.PrimaryOwner.Type.IsUnknown() && !r.PrimaryOwner.Type.IsNull() {
			*typeVar18 = shared.MembershipMemberType(r.PrimaryOwner.Type.ValueString())
		} else {
			typeVar18 = nil
		}
		primaryOwner = &shared.PrimaryOwner{
			ID:          id,
			Email:       email,
			DisplayName: displayName,
			Type:        typeVar18,
		}
	}
	labels := make([]string, 0, len(r.Labels))
	for _, labelsItem := range r.Labels {
		labels = append(labels, labelsItem.ValueString())
	}
	metadata := make([]shared.Metadata, 0, len(r.Metadata))
	for _, metadataItem := range r.Metadata {
		key2 := new(string)
		if !metadataItem.Key.IsUnknown() && !metadataItem.Key.IsNull() {
			*key2 = metadataItem.Key.ValueString()
		} else {
			key2 = nil
		}
		var name19 string
		name19 = metadataItem.Name.ValueString()

		format := shared.MetadataFormat(metadataItem.Format.ValueString())
		value3 := new(string)
		if !metadataItem.Value.IsUnknown() && !metadataItem.Value.IsNull() {
			*value3 = metadataItem.Value.ValueString()
		} else {
			value3 = nil
		}
		defaultValue := new(string)
		if !metadataItem.DefaultValue.IsUnknown() && !metadataItem.DefaultValue.IsNull() {
			*defaultValue = metadataItem.DefaultValue.ValueString()
		} else {
			defaultValue = nil
		}
		hidden := new(bool)
		if !metadataItem.Hidden.IsUnknown() && !metadataItem.Hidden.IsNull() {
			*hidden = metadataItem.Hidden.ValueBool()
		} else {
			hidden = nil
		}
		metadata = append(metadata, shared.Metadata{
			Key:          key2,
			Name:         name19,
			Format:       format,
			Value:        value3,
			DefaultValue: defaultValue,
			Hidden:       hidden,
		})
	}
	lifecycleState := shared.APILifecycleState(r.LifecycleState.ValueString())
	categories := make([]string, 0, len(r.Categories))
	for _, categoriesItem := range r.Categories {
		categories = append(categories, categoriesItem.ValueString())
	}
	members := make([]shared.Member, 0, len(r.Members))
	for _, membersItem := range r.Members {
		var source string
		source = membersItem.Source.ValueString()

		var sourceID string
		sourceID = membersItem.SourceID.ValueString()

		var role string
		role = membersItem.Role.ValueString()

		members = append(members, shared.Member{
			Source:   source,
			SourceID: sourceID,
			Role:     role,
		})
	}
	notifyMembers := new(bool)
	if !r.NotifyMembers.IsUnknown() && !r.NotifyMembers.IsNull() {
		*notifyMembers = r.NotifyMembers.ValueBool()
	} else {
		notifyMembers = nil
	}
	pages := make([]shared.PageV4Input, 0, len(r.Pages))
	for _, pagesItem := range r.Pages {
		var hrid2 string
		hrid2 = pagesItem.Hrid.ValueString()

		var name20 string
		name20 = pagesItem.Name.ValueString()

		type9 := shared.PageType(pagesItem.Type.ValueString())
		content1 := new(string)
		if !pagesItem.Content.IsUnknown() && !pagesItem.Content.IsNull() {
			*content1 = pagesItem.Content.ValueString()
		} else {
			content1 = nil
		}
		published := new(bool)
		if !pagesItem.Published.IsUnknown() && !pagesItem.Published.IsNull() {
			*published = pagesItem.Published.ValueBool()
		} else {
			published = nil
		}
		visibility1 := new(shared.Visibility)
		if !pagesItem.Visibility.IsUnknown() && !pagesItem.Visibility.IsNull() {
			*visibility1 = shared.Visibility(pagesItem.Visibility.ValueString())
		} else {
			visibility1 = nil
		}
		var source1 *shared.PageSource
		if pagesItem.Source != nil {
			typeVar19 := new(string)
			if !pagesItem.Source.Type.IsUnknown() && !pagesItem.Source.Type.IsNull() {
				*typeVar19 = pagesItem.Source.Type.ValueString()
			} else {
				typeVar19 = nil
			}
			var configuration23 interface{}
			if !pagesItem.Source.Configuration.IsUnknown() && !pagesItem.Source.Configuration.IsNull() {
				_ = json.Unmarshal([]byte(pagesItem.Source.Configuration.ValueString()), &configuration23)
			}
			source1 = &shared.PageSource{
				Type:          typeVar19,
				Configuration: configuration23,
			}
		}
		configuration24 := make(map[string]string)
		for configurationKey, configurationValue := range pagesItem.Configuration {
			var configurationInst string
			configurationInst = configurationValue.ValueString()

			configuration24[configurationKey] = configurationInst
		}
		homepage := new(bool)
		if !pagesItem.Homepage.IsUnknown() && !pagesItem.Homepage.IsNull() {
			*homepage = pagesItem.Homepage.ValueBool()
		} else {
			homepage = nil
		}
		parentHrid := new(string)
		if !pagesItem.ParentHrid.IsUnknown() && !pagesItem.ParentHrid.IsNull() {
			*parentHrid = pagesItem.ParentHrid.ValueString()
		} else {
			parentHrid = nil
		}
		pages = append(pages, shared.PageV4Input{
			Hrid:          hrid2,
			Name:          name20,
			Type:          type9,
			Content:       content1,
			Published:     published,
			Visibility:    visibility1,
			Source:        source1,
			Configuration: configuration24,
			Homepage:      homepage,
			ParentHrid:    parentHrid,
		})
	}
	out := shared.APIV4Spec{
		Hrid:              hrid,
		Name:              name,
		Version:           version,
		Type:              typeVar,
		Description:       description,
		Tags:              tags,
		Listeners:         listeners,
		EndpointGroups:    endpointGroups,
		Analytics:         analytics,
		Failover:          failover,
		Properties:        properties,
		Resources:         resources,
		Plans:             plans,
		FlowExecution:     flowExecution,
		Flows:             flows1,
		ResponseTemplates: responseTemplates,
		Services:          services2,
		Groups:            groups,
		Visibility:        visibility,
		State:             state,
		PrimaryOwner:      primaryOwner,
		Labels:            labels,
		Metadata:          metadata,
		LifecycleState:    lifecycleState,
		Categories:        categories,
		Members:           members,
		NotifyMembers:     notifyMembers,
		Pages:             pages,
	}

	return &out, diags
}
