// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"net/http"
	"os"
)

var _ provider.Provider = (*ApimProvider)(nil)
var _ provider.ProviderWithEphemeralResources = (*ApimProvider)(nil)

type ApimProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// ApimProviderConfigureData describes provider configuration data passed to resources.
type ApimProviderConfigureData struct {
	EnvironmentID  types.String `tfsdk:"environment_id"`
	OrganizationID types.String `tfsdk:"organization_id"`
	SDKClient      *sdk.GraviteeApim
}

// ApimProviderModel describes the provider data model.
type ApimProviderModel struct {
	BearerAuth     types.String `tfsdk:"bearer_auth"`
	EnvironmentID  types.String `tfsdk:"environment_id"`
	OrganizationID types.String `tfsdk:"organization_id"`
	Password       types.String `tfsdk:"password"`
	ServerURL      types.String `tfsdk:"server_url"`
	Username       types.String `tfsdk:"username"`
}

func (p *ApimProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "apim"
	resp.Version = p.version
}

func (p *ApimProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"bearer_auth": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"environment_id": schema.StringAttribute{
				Description: `Id of an environment.`,
				Optional:    true,
			},
			"organization_id": schema.StringAttribute{
				Description: `Id of an organization.`,
				Optional:    true,
			},
			"password": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"server_url": schema.StringAttribute{
				Description: `Server URL (defaults to https://apim-master-api.team-apim.gravitee.dev/automation)`,
				Optional:    true,
			},
			"username": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
		},
		MarkdownDescription: `Gravitee: APIM Terraform Provider (alpha)` + "\n" +
			`` + "\n" +
			`Manage APIs and Shared Policy Groups with Terraform`,
	}
}

func (p *ApimProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data ApimProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	ServerURL := data.ServerURL.ValueString()

	if ServerURL == "" && len(os.Getenv("APIM_SERVER_URL")) > 0 {
		ServerURL = os.Getenv("APIM_SERVER_URL")
	}
	if ServerURL == "" {
		ServerURL = "https://apim-master-api.team-apim.gravitee.dev/automation"
	}

	if environmentIDEnvVar, ok := os.LookupEnv("APIM_ENV_ID"); ok && data.EnvironmentID.IsNull() {
		data.EnvironmentID = types.StringValue(environmentIDEnvVar)
	}

	if organizationIDEnvVar, ok := os.LookupEnv("APIM_ORG_ID"); ok && data.OrganizationID.IsNull() {
		data.OrganizationID = types.StringValue(organizationIDEnvVar)
	}
	security := shared.Security{}

	if !data.BearerAuth.IsUnknown() {
		security.BearerAuth = data.BearerAuth.ValueStringPointer()
	}

	if bearerAuthEnvVar := os.Getenv("APIM_SA_TOKEN"); security.BearerAuth == nil && bearerAuthEnvVar != "" {
		security.BearerAuth = &bearerAuthEnvVar
	}

	basicAuth := &shared.SchemeBasicAuth{}

	if !data.Username.IsUnknown() {
		basicAuth.Username = data.Username.ValueString()
	}

	if usernameEnvVar := os.Getenv("APIM_USERNAME"); basicAuth.Username == "" && usernameEnvVar != "" {
		basicAuth.Username = usernameEnvVar
	}

	if !data.Password.IsUnknown() {
		basicAuth.Password = data.Password.ValueString()
	}

	if passwordEnvVar := os.Getenv("APIM_PASSWORD"); basicAuth.Password == "" && passwordEnvVar != "" {
		basicAuth.Password = passwordEnvVar
	}

	if basicAuth.Username != "" || basicAuth.Password != "" {
		security.BasicAuth = basicAuth
	}

	providerHTTPTransportOpts := ProviderHTTPTransportOpts{
		SetHeaders: make(map[string]string),
		Transport:  http.DefaultTransport,
	}

	httpClient := http.DefaultClient
	httpClient.Transport = NewProviderHTTPTransport(providerHTTPTransportOpts)

	opts := []sdk.SDKOption{
		sdk.WithServerURL(ServerURL),
		sdk.WithSecurity(security),
		sdk.WithClient(httpClient),
	}

	if !data.EnvironmentID.IsUnknown() && !data.EnvironmentID.IsNull() {
		opts = append(opts, sdk.WithEnvironmentID(data.EnvironmentID.ValueString()))
	}

	if !data.OrganizationID.IsUnknown() && !data.OrganizationID.IsNull() {
		opts = append(opts, sdk.WithOrganizationID(data.OrganizationID.ValueString()))
	}

	client := sdk.New(opts...)
	configureData := &ApimProviderConfigureData{
		EnvironmentID:  data.EnvironmentID,
		OrganizationID: data.OrganizationID,
		SDKClient:      client,
	}

	resp.DataSourceData = configureData
	resp.EphemeralResourceData = configureData
	resp.ResourceData = configureData
}

func (p *ApimProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewApiv4Resource,
		NewSharedPolicyGroupResource,
	}
}

func (p *ApimProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewApiv4DataSource,
		NewSharedPolicyGroupDataSource,
	}
}

func (p *ApimProvider) EphemeralResources(ctx context.Context) []func() ephemeral.EphemeralResource {
	return []func() ephemeral.EphemeralResource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &ApimProvider{
			version: version,
		}
	}
}
