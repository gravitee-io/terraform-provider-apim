// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	speakeasy_boolplanmodifier "github.com/gravitee-io/terraform-provider-apim/internal/planmodifiers/boolplanmodifier"
	speakeasy_int32planmodifier "github.com/gravitee-io/terraform-provider-apim/internal/planmodifiers/int32planmodifier"
	speakeasy_int64planmodifier "github.com/gravitee-io/terraform-provider-apim/internal/planmodifiers/int64planmodifier"
	speakeasy_listplanmodifier "github.com/gravitee-io/terraform-provider-apim/internal/planmodifiers/listplanmodifier"
	speakeasy_mapplanmodifier "github.com/gravitee-io/terraform-provider-apim/internal/planmodifiers/mapplanmodifier"
	speakeasy_objectplanmodifier "github.com/gravitee-io/terraform-provider-apim/internal/planmodifiers/objectplanmodifier"
	speakeasy_stringplanmodifier "github.com/gravitee-io/terraform-provider-apim/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/gravitee-io/terraform-provider-apim/internal/provider/types"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk"
	"github.com/gravitee-io/terraform-provider-apim/internal/validators"
	speakeasy_listvalidators "github.com/gravitee-io/terraform-provider-apim/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/gravitee-io/terraform-provider-apim/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/gravitee-io/terraform-provider-apim/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int32validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &Apiv4Resource{}
var _ resource.ResourceWithImportState = &Apiv4Resource{}

func NewApiv4Resource() resource.Resource {
	return &Apiv4Resource{}
}

// Apiv4Resource defines the resource implementation.
type Apiv4Resource struct {
	// Provider configured SDK client.
	client *sdk.GraviteeApim

	// environment ID
	EnvironmentID types.String `tfsdk:"environment_id"`

	// organization ID
	OrganizationID types.String `tfsdk:"organization_id"`
}

// Apiv4ResourceModel describes the resource data model.
type Apiv4ResourceModel struct {
	Analytics         *tfTypes.Analytics                             `tfsdk:"analytics"`
	Categories        []types.String                                 `tfsdk:"categories"`
	CrossID           types.String                                   `tfsdk:"cross_id"`
	Description       types.String                                   `tfsdk:"description"`
	EndpointGroups    []tfTypes.EndpointGroupV4                      `tfsdk:"endpoint_groups"`
	EnvironmentID     types.String                                   `tfsdk:"environment_id"`
	Failover          *tfTypes.FailoverV4                            `tfsdk:"failover"`
	FlowExecution     *tfTypes.FlowExecution                         `tfsdk:"flow_execution"`
	Flows             []tfTypes.FlowV4                               `tfsdk:"flows"`
	Groups            []types.String                                 `tfsdk:"groups"`
	Hrid              types.String                                   `tfsdk:"hrid"`
	ID                types.String                                   `tfsdk:"id"`
	Labels            []types.String                                 `tfsdk:"labels"`
	LifecycleState    types.String                                   `tfsdk:"lifecycle_state"`
	Listeners         []tfTypes.Listener                             `tfsdk:"listeners"`
	Members           []tfTypes.Member                               `tfsdk:"members"`
	Metadata          []tfTypes.Metadata                             `tfsdk:"metadata"`
	Name              types.String                                   `tfsdk:"name"`
	NotifyMembers     types.Bool                                     `tfsdk:"notify_members"`
	OrganizationID    types.String                                   `tfsdk:"organization_id"`
	Pages             []tfTypes.PageV4                               `tfsdk:"pages"`
	Plans             []tfTypes.PlanV4                               `tfsdk:"plans"`
	PrimaryOwner      *tfTypes.PrimaryOwner                          `tfsdk:"primary_owner"`
	Properties        []tfTypes.Property                             `tfsdk:"properties"`
	Resources         []tfTypes.Resource                             `tfsdk:"resources"`
	ResponseTemplates map[string]map[string]tfTypes.ResponseTemplate `tfsdk:"response_templates"`
	Services          *tfTypes.APIServices                           `tfsdk:"services"`
	State             types.String                                   `tfsdk:"state"`
	Tags              []types.String                                 `tfsdk:"tags"`
	Type              types.String                                   `tfsdk:"type"`
	Version           types.String                                   `tfsdk:"version"`
	Visibility        types.String                                   `tfsdk:"visibility"`
}

func (r *Apiv4Resource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_apiv4"
}

func (r *Apiv4Resource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Apiv4 Resource",
		Attributes: map[string]schema.Attribute{
			"analytics": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed: true,
						Optional: true,
						Default:  booldefault.StaticBool(true),
						PlanModifiers: []planmodifier.Bool{
							speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
						},
						Description: `Whether or not analytics is enabled. Default: true`,
					},
					"logging": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Attributes: map[string]schema.Attribute{
							"condition": schema.StringAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.String{
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
							},
							"content": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"headers": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
									},
									"message_headers": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
									},
									"message_metadata": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
									},
									"message_payload": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
									},
									"payload": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
									},
								},
								Description: `API logging content`,
							},
							"message_condition": schema.StringAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.String{
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
							},
							"mode": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"endpoint": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
									},
									"entrypoint": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
									},
								},
								Description: `API logging mode`,
							},
							"phase": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"request": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
									},
									"response": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
									},
								},
								Description: `Logging phase`,
							},
						},
						Description: `API logging configuration`,
					},
					"sampling": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Attributes: map[string]schema.Attribute{
							"type": schema.StringAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.String{
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Description: `The type of the sampling. Not Null; must be one of ["PROBABILITY", "TEMPORAL", "COUNT"]`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.OneOf(
										"PROBABILITY",
										"TEMPORAL",
										"COUNT",
									),
								},
							},
							"value": schema.StringAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.String{
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Description: `The value of the sampling`,
							},
						},
						Description: `API analytics sampling`,
					},
					"tracing": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
								},
								Description: `Enable OpenTelemetry tracing`,
							},
							"verbose": schema.BoolAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
								},
								Description: `Enable technical tracing to get more details on request execution. Be careful this settings would generate more noise and would impact performance.`,
							},
						},
						Description: `API analytic tracing`,
					},
				},
				Description: `API analytics`,
			},
			"categories": schema.ListAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				ElementType: types.StringType,
				Description: `The list of category keys associated with this API.`,
			},
			"cross_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `When promoting an API from one environment to the other, this ID identifies the API across those different environments.`,
			},
			"description": schema.StringAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `API's description. A short description of your API.`,
			},
			"endpoint_groups": schema.ListNestedAttribute{
				Required: true,
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"endpoints": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"configuration": schema.StringAttribute{
										CustomType: jsontypes.NormalizedType{},
										Computed:   true,
										Optional:   true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Parsed as JSON.`,
									},
									"inherit_configuration": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										Default:  booldefault.StaticBool(false),
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Is the configuration of the endpoint inherited from the endpoint group it belongs to. Default: false`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The name of the endpoint`,
									},
									"secondary": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										Default:  booldefault.StaticBool(false),
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Is the endpoint a secondary endpoint. Default: false`,
									},
									"services": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"health_check": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Object{
													speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
												},
												Attributes: map[string]schema.Attribute{
													"configuration": schema.StringAttribute{
														CustomType: jsontypes.NormalizedType{},
														Computed:   true,
														Optional:   true,
														PlanModifiers: []planmodifier.String{
															speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
														},
														Description: `The configuration of the service. Parsed as JSON.`,
													},
													"enabled": schema.BoolAttribute{
														Computed: true,
														Optional: true,
														Default:  booldefault.StaticBool(true),
														PlanModifiers: []planmodifier.Bool{
															speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
														},
														Description: `Is the service enabled or not. Default: true`,
													},
													"override_configuration": schema.BoolAttribute{
														Computed: true,
														Optional: true,
														Default:  booldefault.StaticBool(false),
														PlanModifiers: []planmodifier.Bool{
															speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
														},
														Description: `Override the configuration of the service. Default: false`,
													},
													"type": schema.StringAttribute{
														Computed: true,
														Optional: true,
														PlanModifiers: []planmodifier.String{
															speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
														},
													},
												},
												Description: `Service`,
											},
										},
										Description: `API Endpoint Services`,
									},
									"shared_configuration_override": schema.StringAttribute{
										CustomType: jsontypes.NormalizedType{},
										Computed:   true,
										Optional:   true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Parsed as JSON.`,
									},
									"tenants": schema.ListAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										ElementType: types.StringType,
										Description: `The list of tenants associated to the endpoint.`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The type of the endpoint. Not Null`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"weight": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										Default:  int32default.StaticInt32(1),
										PlanModifiers: []planmodifier.Int32{
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `The weight of the endpoint. Default: 1`,
									},
								},
							},
						},
						"load_balancer": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Attributes: map[string]schema.Attribute{
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Default:  stringdefault.StaticString(`ROUND_ROBIN`),
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `Load balancer type. Default: "ROUND_ROBIN"; must be one of ["RANDOM", "ROUND_ROBIN", "WEIGHTED_RANDOM", "WEIGHTED_ROUND_ROBIN"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"RANDOM",
											"ROUND_ROBIN",
											"WEIGHTED_RANDOM",
											"WEIGHTED_ROUND_ROBIN",
										),
									},
								},
							},
							Description: `Load Balancer`,
						},
						"name": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The name of the endpoint group`,
						},
						"services": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Attributes: map[string]schema.Attribute{
								"discovery": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
									},
									Attributes: map[string]schema.Attribute{
										"configuration": schema.StringAttribute{
											CustomType: jsontypes.NormalizedType{},
											Computed:   true,
											Optional:   true,
											PlanModifiers: []planmodifier.String{
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Description: `The configuration of the service. Parsed as JSON.`,
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
											Default:  booldefault.StaticBool(true),
											PlanModifiers: []planmodifier.Bool{
												speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
											},
											Description: `Is the service enabled or not. Default: true`,
										},
										"override_configuration": schema.BoolAttribute{
											Computed: true,
											Optional: true,
											Default:  booldefault.StaticBool(false),
											PlanModifiers: []planmodifier.Bool{
												speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
											},
											Description: `Override the configuration of the service. Default: false`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.String{
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
										},
									},
									Description: `Service`,
								},
								"health_check": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
									},
									Attributes: map[string]schema.Attribute{
										"configuration": schema.StringAttribute{
											CustomType: jsontypes.NormalizedType{},
											Computed:   true,
											Optional:   true,
											PlanModifiers: []planmodifier.String{
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Description: `The configuration of the service. Parsed as JSON.`,
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
											Default:  booldefault.StaticBool(true),
											PlanModifiers: []planmodifier.Bool{
												speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
											},
											Description: `Is the service enabled or not. Default: true`,
										},
										"override_configuration": schema.BoolAttribute{
											Computed: true,
											Optional: true,
											Default:  booldefault.StaticBool(false),
											PlanModifiers: []planmodifier.Bool{
												speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
											},
											Description: `Override the configuration of the service. Default: false`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.String{
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
										},
									},
									Description: `Service`,
								},
							},
							Description: `API Endpoint Group Services`,
						},
						"shared_configuration": schema.StringAttribute{
							CustomType: jsontypes.NormalizedType{},
							Computed:   true,
							Optional:   true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Parsed as JSON.`,
						},
						"type": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The type of the endpoint group. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
					},
				},
				Validators: []validator.List{
					listvalidator.SizeAtLeast(1),
				},
			},
			"environment_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Default:     stringdefault.StaticString(`DEFAULT`),
				Description: `environment ID. Default: "DEFAULT"`,
			},
			"failover": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed: true,
						Optional: true,
						Default:  booldefault.StaticBool(false),
						PlanModifiers: []planmodifier.Bool{
							speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
						},
						Description: `Is the failover enabled. Default: false`,
					},
					"max_failures": schema.Int32Attribute{
						Computed: true,
						Optional: true,
						Default:  int32default.StaticInt32(5),
						PlanModifiers: []planmodifier.Int32{
							speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
						},
						Description: `The maximum number of failures allowed before the circuit breaker can calculate the error rate. Default: 5`,
						Validators: []validator.Int32{
							int32validator.AtLeast(1),
						},
					},
					"max_retries": schema.Int32Attribute{
						Computed: true,
						Optional: true,
						Default:  int32default.StaticInt32(2),
						PlanModifiers: []planmodifier.Int32{
							speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
						},
						Description: `The maximum number of retries. Default: 2`,
					},
					"open_state_duration": schema.Int64Attribute{
						Computed: true,
						Optional: true,
						Default:  int64default.StaticInt64(10000),
						PlanModifiers: []planmodifier.Int64{
							speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
						},
						Description: `The duration in milliseconds to indicate how long the circuit breaker should stay open, before it switches to half open. Default: 10000`,
						Validators: []validator.Int64{
							int64validator.AtLeast(500),
						},
					},
					"per_subscription": schema.BoolAttribute{
						Computed: true,
						Optional: true,
						Default:  booldefault.StaticBool(true),
						PlanModifiers: []planmodifier.Bool{
							speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
						},
						Description: `If true, a circuit breaker breaker will be dedicated for each subscriber, else, one and only circuit breaker will be used for the API. Default: true`,
					},
					"slow_call_duration": schema.Int64Attribute{
						Computed: true,
						Optional: true,
						Default:  int64default.StaticInt64(2000),
						PlanModifiers: []planmodifier.Int64{
							speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
						},
						Description: `The duration in milliseconds to consider a request as slow. Default: 2000`,
						Validators: []validator.Int64{
							int64validator.AtLeast(50),
						},
					},
				},
				Description: `API Failover`,
			},
			"flow_execution": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"match_required": schema.BoolAttribute{
						Computed: true,
						Optional: true,
						Default:  booldefault.StaticBool(false),
						PlanModifiers: []planmodifier.Bool{
							speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
						},
						Description: `Is the flow execution match required. Default: false`,
					},
					"mode": schema.StringAttribute{
						Computed: true,
						Optional: true,
						Default:  stringdefault.StaticString(`DEFAULT`),
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `API's flow mode. Default: "DEFAULT"; must be one of ["BEST_MATCH", "DEFAULT"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"BEST_MATCH",
								"DEFAULT",
							),
						},
					},
				},
				Description: `Flow execution`,
			},
			"flows": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"connect": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The condition of the step`,
									},
									"configuration": schema.StringAttribute{
										CustomType: jsontypes.NormalizedType{},
										Computed:   true,
										Optional:   true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The configuration of the step. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The description of the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										Default:  booldefault.StaticBool(true),
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Is the step enabled or not. Default: true`,
									},
									"message_condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The message condition of the step`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The policy of the step`,
									},
								},
							},
							Description: `Connect flow steps used for NATIVE APIs`,
						},
						"enabled": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							Default:  booldefault.StaticBool(true),
							PlanModifiers: []planmodifier.Bool{
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `Is the flow enabled. Default: true`,
						},
						"id": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Flow's uuid.`,
						},
						"interact": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The condition of the step`,
									},
									"configuration": schema.StringAttribute{
										CustomType: jsontypes.NormalizedType{},
										Computed:   true,
										Optional:   true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The configuration of the step. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The description of the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										Default:  booldefault.StaticBool(true),
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Is the step enabled or not. Default: true`,
									},
									"message_condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The message condition of the step`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The policy of the step`,
									},
								},
							},
							Description: `Interact flow steps used for NATIVE APIs`,
						},
						"name": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Flow's name.`,
						},
						"publish": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The condition of the step`,
									},
									"configuration": schema.StringAttribute{
										CustomType: jsontypes.NormalizedType{},
										Computed:   true,
										Optional:   true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The configuration of the step. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The description of the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										Default:  booldefault.StaticBool(true),
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Is the step enabled or not. Default: true`,
									},
									"message_condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The message condition of the step`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The policy of the step`,
									},
								},
							},
							Description: `Publish flow steps used for MESSAGE and NATIVE APIs`,
						},
						"request": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The condition of the step`,
									},
									"configuration": schema.StringAttribute{
										CustomType: jsontypes.NormalizedType{},
										Computed:   true,
										Optional:   true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The configuration of the step. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The description of the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										Default:  booldefault.StaticBool(true),
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Is the step enabled or not. Default: true`,
									},
									"message_condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The message condition of the step`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The policy of the step`,
									},
								},
							},
							Description: `Request flow steps used for PROXY and MESSAGE APIs`,
						},
						"response": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The condition of the step`,
									},
									"configuration": schema.StringAttribute{
										CustomType: jsontypes.NormalizedType{},
										Computed:   true,
										Optional:   true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The configuration of the step. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The description of the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										Default:  booldefault.StaticBool(true),
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Is the step enabled or not. Default: true`,
									},
									"message_condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The message condition of the step`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The policy of the step`,
									},
								},
							},
							Description: `Response flow steps used for PROXY and MESSAGE APIs`,
						},
						"selectors": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"channel": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"channel": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Default:  stringdefault.StaticString(`/`),
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `The channel of the selector. Default: "/"`,
											},
											"channel_operator": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Default:  stringdefault.StaticString(`STARTS_WITH`),
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `The path operator of the selector. Default: "STARTS_WITH"; must be one of ["EQUALS", "STARTS_WITH"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"EQUALS",
														"STARTS_WITH",
													),
												},
											},
											"entrypoints": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												Validators: []validator.List{
													listvalidator.UniqueValues(),
												},
											},
											"operations": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												Description: `The list of operations associated with this channel selector.`,
												Validators: []validator.List{
													listvalidator.UniqueValues(),
												},
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Selector type. Not Null; must be one of ["HTTP", "CHANNEL", "CONDITION"]`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.OneOf(
														"HTTP",
														"CHANNEL",
														"CONDITION",
													),
												},
											},
										},
										Description: `Channel selector`,
										Validators: []validator.Object{
											objectvalidator.ConflictsWith(path.Expressions{
												path.MatchRelative().AtParent().AtName("condition"),
												path.MatchRelative().AtParent().AtName("http"),
											}...),
										},
									},
									"condition": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `The condition of the selector. Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Selector type. Not Null; must be one of ["HTTP", "CHANNEL", "CONDITION"]`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.OneOf(
														"HTTP",
														"CHANNEL",
														"CONDITION",
													),
												},
											},
										},
										Description: `Condition selector`,
										Validators: []validator.Object{
											objectvalidator.ConflictsWith(path.Expressions{
												path.MatchRelative().AtParent().AtName("channel"),
												path.MatchRelative().AtParent().AtName("http"),
											}...),
										},
									},
									"http": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"methods": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												Validators: []validator.List{
													listvalidator.UniqueValues(),
												},
											},
											"path": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Default:  stringdefault.StaticString(`/`),
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `The path of the selector. Default: "/"`,
											},
											"path_operator": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Default:  stringdefault.StaticString(`STARTS_WITH`),
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `The path operator of the selector. Default: "STARTS_WITH"; must be one of ["EQUALS", "STARTS_WITH"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"EQUALS",
														"STARTS_WITH",
													),
												},
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Selector type. Not Null; must be one of ["HTTP", "CHANNEL", "CONDITION"]`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.OneOf(
														"HTTP",
														"CHANNEL",
														"CONDITION",
													),
												},
											},
										},
										Description: `HTTP selector`,
										Validators: []validator.Object{
											objectvalidator.ConflictsWith(path.Expressions{
												path.MatchRelative().AtParent().AtName("channel"),
												path.MatchRelative().AtParent().AtName("condition"),
											}...),
										},
									},
								},
							},
						},
						"subscribe": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The condition of the step`,
									},
									"configuration": schema.StringAttribute{
										CustomType: jsontypes.NormalizedType{},
										Computed:   true,
										Optional:   true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The configuration of the step. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The description of the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										Default:  booldefault.StaticBool(true),
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Is the step enabled or not. Default: true`,
									},
									"message_condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The message condition of the step`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The policy of the step`,
									},
								},
							},
							Description: `Subscribe flow steps used for MESSAGE and NATIVE APIs`,
						},
						"tags": schema.ListAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							ElementType: types.StringType,
							Description: `Flow's tags.`,
							Validators: []validator.List{
								listvalidator.UniqueValues(),
							},
						},
					},
				},
				Description: `List of flows for the API`,
			},
			"groups": schema.ListAttribute{
				Computed: true,
				Optional: true,
				Default:  listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				ElementType: types.StringType,
				MarkdownDescription: `List of groups associated with the API.` + "\n" +
					`This groups are id or name references to existing groups in APIM.`,
			},
			"hrid": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `A unique human readable id identifying this resource. Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`).String()),
				},
			},
			"id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `API's uuid.`,
			},
			"labels": schema.ListAttribute{
				Computed: true,
				Optional: true,
				Default:  listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				ElementType: types.StringType,
				Description: `List of labels of the API`,
			},
			"lifecycle_state": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `The status of the API regarding the console. must be one of ["ARCHIVED", "CREATED", "DEPRECATED", "PUBLISHED", "UNPUBLISHED"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ARCHIVED",
						"CREATED",
						"DEPRECATED",
						"PUBLISHED",
						"UNPUBLISHED",
					),
				},
			},
			"listeners": schema.ListNestedAttribute{
				Required: true,
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"http": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Attributes: map[string]schema.Attribute{
								"cors": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
									},
									Attributes: map[string]schema.Attribute{
										"allow_credentials": schema.BoolAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
											},
										},
										"allow_headers": schema.ListAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.List{
												speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
											},
											ElementType: types.StringType,
											Validators: []validator.List{
												listvalidator.UniqueValues(),
											},
										},
										"allow_methods": schema.ListAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.List{
												speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
											},
											ElementType: types.StringType,
											Validators: []validator.List{
												listvalidator.UniqueValues(),
											},
										},
										"allow_origin": schema.ListAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.List{
												speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
											},
											ElementType: types.StringType,
											Validators: []validator.List{
												listvalidator.UniqueValues(),
											},
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
											},
										},
										"expose_headers": schema.ListAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.List{
												speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
											},
											ElementType: types.StringType,
											Validators: []validator.List{
												listvalidator.UniqueValues(),
											},
										},
										"max_age": schema.Int32Attribute{
											Computed: true,
											Optional: true,
											Default:  int32default.StaticInt32(-1),
											PlanModifiers: []planmodifier.Int32{
												speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
											},
											Description: `Default: -1`,
										},
										"run_policies": schema.BoolAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
											},
										},
									},
									Description: `Http listener Cross-Origin Resource Sharing`,
								},
								"entrypoints": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
									},
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"configuration": schema.StringAttribute{
												CustomType: jsontypes.NormalizedType{},
												Computed:   true,
												Optional:   true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Parsed as JSON.`,
											},
											"dlq": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Object{
													speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
												},
												Attributes: map[string]schema.Attribute{
													"endpoint": schema.StringAttribute{
														Computed: true,
														Optional: true,
														PlanModifiers: []planmodifier.String{
															speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
														},
														Description: `The endpoint of the DLQ.`,
													},
												},
												Description: `DLQ`,
											},
											"qos": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Default:  stringdefault.StaticString(`AUTO`),
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Type of the quality of service. Default: "AUTO"; must be one of ["NONE", "AUTO", "AT_MOST_ONCE", "AT_LEAST_ONCE"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"NONE",
														"AUTO",
														"AT_MOST_ONCE",
														"AT_LEAST_ONCE",
													),
												},
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `The type of the entrypoint. Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
										},
									},
									Validators: []validator.List{
										listvalidator.SizeAtLeast(1),
									},
								},
								"path_mappings": schema.ListAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
									},
									ElementType: types.StringType,
								},
								"paths": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
									},
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"host": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
											},
											"override_access": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												Default:  booldefault.StaticBool(false),
												PlanModifiers: []planmodifier.Bool{
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												Description: `Default: false`,
											},
											"path": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Default:  stringdefault.StaticString(`/`),
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Default: "/"`,
											},
										},
									},
									Validators: []validator.List{
										listvalidator.SizeAtLeast(1),
									},
								},
								"servers": schema.ListAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
									},
									ElementType: types.StringType,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `Listener type. Not Null; must be one of ["HTTP", "SUBSCRIPTION", "TCP", "KAFKA"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"HTTP",
											"SUBSCRIPTION",
											"TCP",
											"KAFKA",
										),
									},
								},
							},
							Description: `HTTP Listener`,
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("kafka"),
									path.MatchRelative().AtParent().AtName("subscription"),
									path.MatchRelative().AtParent().AtName("tcp"),
								}...),
							},
						},
						"kafka": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Attributes: map[string]schema.Attribute{
								"entrypoints": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
									},
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"configuration": schema.StringAttribute{
												CustomType: jsontypes.NormalizedType{},
												Computed:   true,
												Optional:   true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Parsed as JSON.`,
											},
											"dlq": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Object{
													speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
												},
												Attributes: map[string]schema.Attribute{
													"endpoint": schema.StringAttribute{
														Computed: true,
														Optional: true,
														PlanModifiers: []planmodifier.String{
															speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
														},
														Description: `The endpoint of the DLQ.`,
													},
												},
												Description: `DLQ`,
											},
											"qos": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Default:  stringdefault.StaticString(`AUTO`),
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Type of the quality of service. Default: "AUTO"; must be one of ["NONE", "AUTO", "AT_MOST_ONCE", "AT_LEAST_ONCE"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"NONE",
														"AUTO",
														"AT_MOST_ONCE",
														"AT_LEAST_ONCE",
													),
												},
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `The type of the entrypoint. Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
										},
									},
									Validators: []validator.List{
										listvalidator.SizeAtLeast(1),
									},
								},
								"host": schema.StringAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `A hostname for which the API will match against SNI. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"port": schema.Int64Attribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.Int64{
										speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
									},
									Description: `The port of the listener`,
								},
								"servers": schema.ListAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
									},
									ElementType: types.StringType,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `Listener type. Not Null; must be one of ["HTTP", "SUBSCRIPTION", "TCP", "KAFKA"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"HTTP",
											"SUBSCRIPTION",
											"TCP",
											"KAFKA",
										),
									},
								},
							},
							Description: `Kafka listener`,
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("http"),
									path.MatchRelative().AtParent().AtName("subscription"),
									path.MatchRelative().AtParent().AtName("tcp"),
								}...),
							},
						},
						"subscription": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Attributes: map[string]schema.Attribute{
								"entrypoints": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
									},
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"configuration": schema.StringAttribute{
												CustomType: jsontypes.NormalizedType{},
												Computed:   true,
												Optional:   true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Parsed as JSON.`,
											},
											"dlq": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Object{
													speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
												},
												Attributes: map[string]schema.Attribute{
													"endpoint": schema.StringAttribute{
														Computed: true,
														Optional: true,
														PlanModifiers: []planmodifier.String{
															speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
														},
														Description: `The endpoint of the DLQ.`,
													},
												},
												Description: `DLQ`,
											},
											"qos": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Default:  stringdefault.StaticString(`AUTO`),
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Type of the quality of service. Default: "AUTO"; must be one of ["NONE", "AUTO", "AT_MOST_ONCE", "AT_LEAST_ONCE"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"NONE",
														"AUTO",
														"AT_MOST_ONCE",
														"AT_LEAST_ONCE",
													),
												},
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `The type of the entrypoint. Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
										},
									},
									Validators: []validator.List{
										listvalidator.SizeAtLeast(1),
									},
								},
								"servers": schema.ListAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
									},
									ElementType: types.StringType,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `Listener type. Not Null; must be one of ["HTTP", "SUBSCRIPTION", "TCP", "KAFKA"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"HTTP",
											"SUBSCRIPTION",
											"TCP",
											"KAFKA",
										),
									},
								},
							},
							Description: `Subscription listener`,
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("http"),
									path.MatchRelative().AtParent().AtName("kafka"),
									path.MatchRelative().AtParent().AtName("tcp"),
								}...),
							},
						},
						"tcp": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Attributes: map[string]schema.Attribute{
								"entrypoints": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
									},
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"configuration": schema.StringAttribute{
												CustomType: jsontypes.NormalizedType{},
												Computed:   true,
												Optional:   true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Parsed as JSON.`,
											},
											"dlq": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Object{
													speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
												},
												Attributes: map[string]schema.Attribute{
													"endpoint": schema.StringAttribute{
														Computed: true,
														Optional: true,
														PlanModifiers: []planmodifier.String{
															speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
														},
														Description: `The endpoint of the DLQ.`,
													},
												},
												Description: `DLQ`,
											},
											"qos": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Default:  stringdefault.StaticString(`AUTO`),
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Type of the quality of service. Default: "AUTO"; must be one of ["NONE", "AUTO", "AT_MOST_ONCE", "AT_LEAST_ONCE"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"NONE",
														"AUTO",
														"AT_MOST_ONCE",
														"AT_LEAST_ONCE",
													),
												},
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `The type of the entrypoint. Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
										},
									},
									Validators: []validator.List{
										listvalidator.SizeAtLeast(1),
									},
								},
								"hosts": schema.ListAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
									},
									ElementType: types.StringType,
									Description: `A list of hostnames for which the API will match against SNI.  This must be unique for all TCP listener for a given server id. See 'servers' attribute. Not Null`,
									Validators: []validator.List{
										speakeasy_listvalidators.NotNull(),
										listvalidator.SizeAtLeast(1),
									},
								},
								"servers": schema.ListAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
									},
									ElementType: types.StringType,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `Listener type. Not Null; must be one of ["HTTP", "SUBSCRIPTION", "TCP", "KAFKA"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"HTTP",
											"SUBSCRIPTION",
											"TCP",
											"KAFKA",
										),
									},
								},
							},
							Description: `TCP listener`,
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("http"),
									path.MatchRelative().AtParent().AtName("kafka"),
									path.MatchRelative().AtParent().AtName("subscription"),
								}...),
							},
						},
					},
				},
				Description: `The list of listeners associated with this API.`,
				Validators: []validator.List{
					listvalidator.SizeAtLeast(1),
				},
			},
			"members": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `User UUID of the memeber`,
						},
						"role": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The role of the user in regards of the managed oject (API, Application, etc.). Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"source": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Where the memeber was created (system, idp, etc.). Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"source_id": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Id of the user in the source. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
					},
				},
				Description: `Set of members associated with the plan`,
				Validators: []validator.List{
					listvalidator.UniqueValues(),
				},
			},
			"metadata": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"default_value": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The default value of the metadata if the value is not set.`,
						},
						"format": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The format of the metadata. Not Null; must be one of ["STRING", "NUMERIC", "BOOLEAN", "DATE", "MAIL", "URL"]`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.OneOf(
									"STRING",
									"NUMERIC",
									"BOOLEAN",
									"DATE",
									"MAIL",
									"URL",
								),
							},
						},
						"key": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The key of the metadata if different from sanitized name (lowercase + hyphens).`,
							Validators: []validator.String{
								stringvalidator.UTF8LengthAtLeast(1),
							},
						},
						"name": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The name of the metadata. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"value": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The value of the metadata.`,
							Validators: []validator.String{
								stringvalidator.UTF8LengthAtLeast(1),
							},
						},
					},
				},
				Description: `The list of API's metadata.`,
				Validators: []validator.List{
					listvalidator.UniqueValues(),
				},
			},
			"name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `API's name. Duplicate names can exists.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtLeast(1),
				},
			},
			"notify_members": schema.BoolAttribute{
				Computed: true,
				Optional: true,
				Default:  booldefault.StaticBool(true),
				MarkdownDescription: `If true, new members added to the API spec will` + "\n" +
					`be notified when the API is synced with APIM.` + "\n" +
					`Default: true`,
			},
			"organization_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Default:     stringdefault.StaticString(`DEFAULT`),
				Description: `organization ID. Default: "DEFAULT"`,
			},
			"pages": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"access_controls": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"reference_id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The id of the resource used to check the access control`,
									},
									"reference_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The type of the resource used to check the access control`,
									},
								},
							},
							Description: `List of access controls.`,
						},
						"attached_media": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"attached_at": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Media's attachment date.`,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"hash": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Media's hash.`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Media's name.`,
									},
								},
							},
							Description: `List of attached media.`,
						},
						"configuration": schema.MapAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Map{
								speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
							},
							ElementType: types.StringType,
							Description: `Page's configuration.`,
						},
						"content": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Page's content.`,
						},
						"content_revision": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `Id of the page used to fill the content attributes.`,
								},
								"revision": schema.Int64Attribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.Int64{
										speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
									},
									Description: `Revision number.`,
								},
							},
							Description: `Page revision`,
						},
						"content_type": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Page's content type.`,
						},
						"cross_id": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Page's cross uuid.`,
						},
						"excluded_access_controls": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `Flag to restrict access to user matching the restrictions.`,
						},
						"general_conditions": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `If page is used as General Conditions of an active plan.`,
						},
						"hidden": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `If folder is published but not shown in Portal.`,
						},
						"homepage": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `Page's homepage status.`,
						},
						"hrid": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `A unique human readable id identifying this resource. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`).String()),
							},
						},
						"last_contributor": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Page's last contributor. Id of a user.`,
						},
						"metadata": schema.MapAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Map{
								speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
							},
							ElementType: types.StringType,
							Description: `Page's metadata.`,
						},
						"name": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Page's name.`,
						},
						"order": schema.Int64Attribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
							},
							Description: `Page's order.`,
						},
						"parent_id": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Page's parent id.`,
						},
						"parent_path": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Page's parent path.`,
						},
						"published": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `Page's published status.`,
						},
						"source": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Attributes: map[string]schema.Attribute{
								"configuration": schema.StringAttribute{
									CustomType: jsontypes.NormalizedType{},
									Computed:   true,
									Optional:   true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `Page source's configuration. Parsed as JSON.`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `The type of the page source (=fetcher type).`,
								},
							},
							Description: `Page source`,
						},
						"translations": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"access_controls": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"reference_id": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The id of the resource used to check the access control`,
												},
												"reference_type": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The type of the resource used to check the access control`,
												},
											},
										},
										Description: `List of access controls.`,
									},
									"attached_media": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"attached_at": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Media's attachment date.`,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"hash": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Media's hash.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Media's name.`,
												},
											},
										},
										Description: `List of attached media.`,
									},
									"configuration": schema.MapAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Map{
											speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
										},
										ElementType: types.StringType,
										Description: `Page's configuration.`,
									},
									"content": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Page's content.`,
									},
									"content_revision": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Id of the page used to fill the content attributes.`,
											},
											"revision": schema.Int64Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int64{
													speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
												},
												Description: `Revision number.`,
											},
										},
										Description: `Page revision`,
									},
									"content_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Page's content type.`,
									},
									"cross_id": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Page's cross uuid.`,
									},
									"excluded_access_controls": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Flag to restrict access to user matching the restrictions.`,
									},
									"general_conditions": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `If page is used as General Conditions of an active plan.`,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `If folder is published but not shown in Portal.`,
									},
									"homepage": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Page's homepage status.`,
									},
									"hrid": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `A unique human readable id identifying this resource. Not Null`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
											stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`).String()),
										},
									},
									"last_contributor": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Page's last contributor. Id of a user.`,
									},
									"metadata": schema.MapAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Map{
											speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
										},
										ElementType: types.StringType,
										Description: `Page's metadata.`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Page's name.`,
									},
									"order": schema.Int64Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int64{
											speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
										},
										Description: `Page's order.`,
									},
									"parent_id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Page's parent id.`,
									},
									"parent_path": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Page's parent path.`,
									},
									"published": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Page's published status.`,
									},
									"source": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"configuration": schema.StringAttribute{
												CustomType: jsontypes.NormalizedType{},
												Computed:   true,
												Optional:   true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Page source's configuration. Parsed as JSON.`,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `The type of the page source (=fetcher type).`,
											},
										},
										Description: `Page source`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The type of the page. Not Null; must be one of ["ASCIIDOC", "ASYNCAPI", "MARKDOWN", "MARKDOWN_TEMPLATE", "SWAGGER", "FOLDER", "LINK", "ROOT", "SYSTEM_FOLDER", "TRANSLATION"]`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
											stringvalidator.OneOf(
												"ASCIIDOC",
												"ASYNCAPI",
												"MARKDOWN",
												"MARKDOWN_TEMPLATE",
												"SWAGGER",
												"FOLDER",
												"LINK",
												"ROOT",
												"SYSTEM_FOLDER",
												"TRANSLATION",
											),
										},
									},
									"updated_at": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Page's last update date.`,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"visibility": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Default:  stringdefault.StaticString(`PUBLIC`),
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The visibility of the resource regarding the portal. Default: "PUBLIC"; must be one of ["PUBLIC", "PRIVATE"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"PUBLIC",
												"PRIVATE",
											),
										},
									},
								},
							},
							Description: `List of page translations.`,
						},
						"type": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The type of the page. Not Null; must be one of ["ASCIIDOC", "ASYNCAPI", "MARKDOWN", "MARKDOWN_TEMPLATE", "SWAGGER", "FOLDER", "LINK", "ROOT", "SYSTEM_FOLDER", "TRANSLATION"]`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.OneOf(
									"ASCIIDOC",
									"ASYNCAPI",
									"MARKDOWN",
									"MARKDOWN_TEMPLATE",
									"SWAGGER",
									"FOLDER",
									"LINK",
									"ROOT",
									"SYSTEM_FOLDER",
									"TRANSLATION",
								),
							},
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Page's last update date.`,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"visibility": schema.StringAttribute{
							Computed: true,
							Optional: true,
							Default:  stringdefault.StaticString(`PUBLIC`),
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The visibility of the resource regarding the portal. Default: "PUBLIC"; must be one of ["PUBLIC", "PRIVATE"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"PUBLIC",
									"PRIVATE",
								),
							},
						},
					},
				},
				Description: `List of Pages for the API`,
			},
			"plans": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"characteristics": schema.ListAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							ElementType: types.StringType,
						},
						"description": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
						},
						"excluded_groups": schema.ListAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							ElementType: types.StringType,
						},
						"flows": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"connect": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The condition of the step`,
												},
												"configuration": schema.StringAttribute{
													CustomType: jsontypes.NormalizedType{},
													Computed:   true,
													Optional:   true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The configuration of the step. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The description of the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													Default:  booldefault.StaticBool(true),
													PlanModifiers: []planmodifier.Bool{
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Is the step enabled or not. Default: true`,
												},
												"message_condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The message condition of the step`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The policy of the step`,
												},
											},
										},
										Description: `Connect flow steps used for NATIVE APIs`,
									},
									"enabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										Default:  booldefault.StaticBool(true),
										PlanModifiers: []planmodifier.Bool{
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Is the flow enabled. Default: true`,
									},
									"id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Flow's uuid.`,
									},
									"interact": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The condition of the step`,
												},
												"configuration": schema.StringAttribute{
													CustomType: jsontypes.NormalizedType{},
													Computed:   true,
													Optional:   true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The configuration of the step. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The description of the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													Default:  booldefault.StaticBool(true),
													PlanModifiers: []planmodifier.Bool{
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Is the step enabled or not. Default: true`,
												},
												"message_condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The message condition of the step`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The policy of the step`,
												},
											},
										},
										Description: `Interact flow steps used for NATIVE APIs`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Flow's name.`,
									},
									"publish": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The condition of the step`,
												},
												"configuration": schema.StringAttribute{
													CustomType: jsontypes.NormalizedType{},
													Computed:   true,
													Optional:   true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The configuration of the step. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The description of the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													Default:  booldefault.StaticBool(true),
													PlanModifiers: []planmodifier.Bool{
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Is the step enabled or not. Default: true`,
												},
												"message_condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The message condition of the step`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The policy of the step`,
												},
											},
										},
										Description: `Publish flow steps used for MESSAGE and NATIVE APIs`,
									},
									"request": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The condition of the step`,
												},
												"configuration": schema.StringAttribute{
													CustomType: jsontypes.NormalizedType{},
													Computed:   true,
													Optional:   true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The configuration of the step. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The description of the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													Default:  booldefault.StaticBool(true),
													PlanModifiers: []planmodifier.Bool{
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Is the step enabled or not. Default: true`,
												},
												"message_condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The message condition of the step`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The policy of the step`,
												},
											},
										},
										Description: `Request flow steps used for PROXY and MESSAGE APIs`,
									},
									"response": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The condition of the step`,
												},
												"configuration": schema.StringAttribute{
													CustomType: jsontypes.NormalizedType{},
													Computed:   true,
													Optional:   true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The configuration of the step. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The description of the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													Default:  booldefault.StaticBool(true),
													PlanModifiers: []planmodifier.Bool{
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Is the step enabled or not. Default: true`,
												},
												"message_condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The message condition of the step`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The policy of the step`,
												},
											},
										},
										Description: `Response flow steps used for PROXY and MESSAGE APIs`,
									},
									"selectors": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"channel": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Object{
														speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
													},
													Attributes: map[string]schema.Attribute{
														"channel": schema.StringAttribute{
															Computed: true,
															Optional: true,
															Default:  stringdefault.StaticString(`/`),
															PlanModifiers: []planmodifier.String{
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Description: `The channel of the selector. Default: "/"`,
														},
														"channel_operator": schema.StringAttribute{
															Computed: true,
															Optional: true,
															Default:  stringdefault.StaticString(`STARTS_WITH`),
															PlanModifiers: []planmodifier.String{
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Description: `The path operator of the selector. Default: "STARTS_WITH"; must be one of ["EQUALS", "STARTS_WITH"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"EQUALS",
																	"STARTS_WITH",
																),
															},
														},
														"entrypoints": schema.ListAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.List{
																speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
															},
															ElementType: types.StringType,
															Validators: []validator.List{
																listvalidator.UniqueValues(),
															},
														},
														"operations": schema.ListAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.List{
																speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
															},
															ElementType: types.StringType,
															Description: `The list of operations associated with this channel selector.`,
															Validators: []validator.List{
																listvalidator.UniqueValues(),
															},
														},
														"type": schema.StringAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.String{
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Description: `Selector type. Not Null; must be one of ["HTTP", "CHANNEL", "CONDITION"]`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
																stringvalidator.OneOf(
																	"HTTP",
																	"CHANNEL",
																	"CONDITION",
																),
															},
														},
													},
													Description: `Channel selector`,
													Validators: []validator.Object{
														objectvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("condition"),
															path.MatchRelative().AtParent().AtName("http"),
														}...),
													},
												},
												"condition": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Object{
														speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
													},
													Attributes: map[string]schema.Attribute{
														"condition": schema.StringAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.String{
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Description: `The condition of the selector. Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"type": schema.StringAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.String{
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Description: `Selector type. Not Null; must be one of ["HTTP", "CHANNEL", "CONDITION"]`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
																stringvalidator.OneOf(
																	"HTTP",
																	"CHANNEL",
																	"CONDITION",
																),
															},
														},
													},
													Description: `Condition selector`,
													Validators: []validator.Object{
														objectvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("channel"),
															path.MatchRelative().AtParent().AtName("http"),
														}...),
													},
												},
												"http": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Object{
														speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
													},
													Attributes: map[string]schema.Attribute{
														"methods": schema.ListAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.List{
																speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
															},
															ElementType: types.StringType,
															Validators: []validator.List{
																listvalidator.UniqueValues(),
															},
														},
														"path": schema.StringAttribute{
															Computed: true,
															Optional: true,
															Default:  stringdefault.StaticString(`/`),
															PlanModifiers: []planmodifier.String{
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Description: `The path of the selector. Default: "/"`,
														},
														"path_operator": schema.StringAttribute{
															Computed: true,
															Optional: true,
															Default:  stringdefault.StaticString(`STARTS_WITH`),
															PlanModifiers: []planmodifier.String{
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Description: `The path operator of the selector. Default: "STARTS_WITH"; must be one of ["EQUALS", "STARTS_WITH"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"EQUALS",
																	"STARTS_WITH",
																),
															},
														},
														"type": schema.StringAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.String{
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Description: `Selector type. Not Null; must be one of ["HTTP", "CHANNEL", "CONDITION"]`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
																stringvalidator.OneOf(
																	"HTTP",
																	"CHANNEL",
																	"CONDITION",
																),
															},
														},
													},
													Description: `HTTP selector`,
													Validators: []validator.Object{
														objectvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("channel"),
															path.MatchRelative().AtParent().AtName("condition"),
														}...),
													},
												},
											},
										},
									},
									"subscribe": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The condition of the step`,
												},
												"configuration": schema.StringAttribute{
													CustomType: jsontypes.NormalizedType{},
													Computed:   true,
													Optional:   true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The configuration of the step. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The description of the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													Default:  booldefault.StaticBool(true),
													PlanModifiers: []planmodifier.Bool{
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Is the step enabled or not. Default: true`,
												},
												"message_condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The message condition of the step`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `The policy of the step`,
												},
											},
										},
										Description: `Subscribe flow steps used for MESSAGE and NATIVE APIs`,
									},
									"tags": schema.ListAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										ElementType: types.StringType,
										Description: `Flow's tags.`,
										Validators: []validator.List{
											listvalidator.UniqueValues(),
										},
									},
								},
							},
						},
						"general_conditions": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
						},
						"hrid": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `A unique human readable id identifying this resource. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`).String()),
							},
						},
						"mode": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The behavioural mode of the Plan (Standard for classical plan, Push for subscription plan). Not Null; must be one of ["STANDARD", "PUSH"]`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.OneOf(
									"STANDARD",
									"PUSH",
								),
							},
						},
						"name": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"security": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Attributes: map[string]schema.Attribute{
								"configuration": schema.StringAttribute{
									CustomType: jsontypes.NormalizedType{},
									Computed:   true,
									Optional:   true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `Parsed as JSON.`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `Plan security type. Not Null; must be one of ["KEY_LESS", "API_KEY", "OAUTH2", "JWT", "MTLS"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"KEY_LESS",
											"API_KEY",
											"OAUTH2",
											"JWT",
											"MTLS",
										),
									},
								},
							},
							Description: `API plan security. Not Null`,
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
						},
						"selection_rule": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
						},
						"status": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Plan status. Not Null; must be one of ["STAGING", "PUBLISHED", "DEPRECATED", "CLOSED"]`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.OneOf(
									"STAGING",
									"PUBLISHED",
									"DEPRECATED",
									"CLOSED",
								),
							},
						},
						"tags": schema.ListAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							ElementType: types.StringType,
						},
						"type": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Plan type. Not Null; must be one of ["API", "CATALOG"]`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.OneOf(
									"API",
									"CATALOG",
								),
							},
						},
						"validation": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Plan validation type. Not Null; must be one of ["AUTO", "MANUAL"]`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.OneOf(
									"AUTO",
									"MANUAL",
								),
							},
						},
					},
				},
				Description: `List of Plans for the API`,
			},
			"primary_owner": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"display_name": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Owner's name.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtLeast(1),
						},
					},
					"email": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Owner's email. Can be null if owner is a group.`,
					},
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Owner's uuid.`,
					},
					"type": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `The type of membership. must be one of ["USER", "GROUP"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"USER",
								"GROUP",
							),
						},
					},
				},
				Description: `Primary owner, the creator of the application. Can perform all possible API actions.`,
			},
			"properties": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"dynamic": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `is a dynamic property or not?`,
						},
						"encryptable": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `is property encryptable?`,
						},
						"encrypted": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `is property encrypted or not?`,
						},
						"key": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `property key. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"value": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `property value. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
					},
				},
			},
			"resources": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"configuration": schema.StringAttribute{
							CustomType: jsontypes.NormalizedType{},
							Computed:   true,
							Optional:   true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Resource configuration. Not Null; Parsed as JSON.`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"enabled": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `API resource is enabled or not?`,
						},
						"name": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Resource name. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"type": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Resource type. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
					},
				},
			},
			"response_templates": schema.MapAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Map{
					speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
				},
				ElementType: types.MapType{
					ElemType: types.ObjectType{
						AttrTypes: map[string]attr.Type{
							`body`: types.StringType,
							`headers`: types.MapType{
								ElemType: types.StringType,
							},
							`propagate_error_key_to_logs`: types.BoolType,
							`status`:                      types.Int64Type,
						},
					},
				},
				Description: `A list of Response Templates for the API (Not applicable for Native API)`,
			},
			"services": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"dynamic_property": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Attributes: map[string]schema.Attribute{
							"configuration": schema.StringAttribute{
								CustomType: jsontypes.NormalizedType{},
								Computed:   true,
								Optional:   true,
								PlanModifiers: []planmodifier.String{
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Description: `The configuration of the service. Parsed as JSON.`,
							},
							"enabled": schema.BoolAttribute{
								Computed: true,
								Optional: true,
								Default:  booldefault.StaticBool(true),
								PlanModifiers: []planmodifier.Bool{
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
								},
								Description: `Is the service enabled or not. Default: true`,
							},
							"override_configuration": schema.BoolAttribute{
								Computed: true,
								Optional: true,
								Default:  booldefault.StaticBool(false),
								PlanModifiers: []planmodifier.Bool{
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
								},
								Description: `Override the configuration of the service. Default: false`,
							},
							"type": schema.StringAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.String{
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
							},
						},
						Description: `Service`,
					},
				},
				Description: `Api services`,
			},
			"state": schema.StringAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `The state of the API regarding the gateway(s). must be one of ["CLOSED", "INITIALIZED", "STARTED", "STOPPED", "STOPPING"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"CLOSED",
						"INITIALIZED",
						"STARTED",
						"STOPPED",
						"STOPPING",
					),
				},
			},
			"tags": schema.ListAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				ElementType: types.StringType,
				Description: `The list of sharding tags associated with this API.`,
				Validators: []validator.List{
					listvalidator.UniqueValues(),
				},
			},
			"type": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `API's type. must be one of ["MESSAGE", "PROXY", "NATIVE"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"MESSAGE",
						"PROXY",
						"NATIVE",
					),
				},
			},
			"version": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `API's version. It's a simple string only used in the portal.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtLeast(1),
				},
			},
			"visibility": schema.StringAttribute{
				Computed: true,
				Optional: true,
				Default:  stringdefault.StaticString(`PUBLIC`),
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `The visibility of the resource regarding the portal. Default: "PUBLIC"; must be one of ["PUBLIC", "PRIVATE"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"PUBLIC",
						"PRIVATE",
					),
				},
			},
		},
	}
}

func (r *Apiv4Resource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(*ApimProviderConfigureData)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *ApimProviderConfigureData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.EnvironmentID = providerData.EnvironmentID
	r.OrganizationID = providerData.OrganizationID
	r.client = providerData.SDKClient
}

func (r *Apiv4Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *Apiv4ResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	if (data.EnvironmentID.IsNull() || data.EnvironmentID.IsUnknown()) && !r.EnvironmentID.IsUnknown() {
		data.EnvironmentID = r.EnvironmentID
	}

	if (data.OrganizationID.IsNull() || data.OrganizationID.IsUnknown()) && !r.OrganizationID.IsUnknown() {
		data.OrganizationID = r.OrganizationID
	}

	request, requestDiags := data.ToOperationsCreateOrUpdateApisRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Apis.CreateOrUpdate(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.APIV4State != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedApiv4State(ctx, res.APIV4State)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetAPIRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Apis.Get(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.APIV4State != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedApiv4State(ctx, res1.APIV4State)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *Apiv4Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *Apiv4ResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetAPIRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Apis.Get(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.APIV4State != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedApiv4State(ctx, res.APIV4State)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *Apiv4Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *Apiv4ResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	if (data.EnvironmentID.IsNull() || data.EnvironmentID.IsUnknown()) && !r.EnvironmentID.IsUnknown() {
		data.EnvironmentID = r.EnvironmentID
	}

	if (data.OrganizationID.IsNull() || data.OrganizationID.IsUnknown()) && !r.OrganizationID.IsUnknown() {
		data.OrganizationID = r.OrganizationID
	}

	request, requestDiags := data.ToOperationsCreateOrUpdateApisRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Apis.CreateOrUpdate(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.APIV4State != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedApiv4State(ctx, res.APIV4State)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetAPIRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Apis.Get(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.APIV4State != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedApiv4State(ctx, res1.APIV4State)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *Apiv4Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *Apiv4ResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	if (data.EnvironmentID.IsNull() || data.EnvironmentID.IsUnknown()) && !r.EnvironmentID.IsUnknown() {
		data.EnvironmentID = r.EnvironmentID
	}

	if (data.OrganizationID.IsNull() || data.OrganizationID.IsUnknown()) && !r.OrganizationID.IsUnknown() {
		data.OrganizationID = r.OrganizationID
	}

	request, requestDiags := data.ToOperationsDeleteAPIRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Apis.Delete(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *Apiv4Resource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		EnvironmentID  *string `json:"environment_id"`
		Hrid           string  `json:"hrid"`
		OrganizationID *string `json:"organization_id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"environment_id": "...", "hrid": "...", "organization_id": "..."}': `+err.Error())
		return
	}

	if data.EnvironmentID == nil {
		if !r.EnvironmentID.IsUnknown() {
			data.EnvironmentID = r.EnvironmentID.ValueStringPointer()
		}
		if data.EnvironmentID == nil {
			resp.Diagnostics.AddError("Missing required field", `The field environment_id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
			return
		}
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("environment_id"), data.EnvironmentID)...)
	if len(data.Hrid) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field hrid is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("hrid"), data.Hrid)...)
	if data.OrganizationID == nil {
		if !r.OrganizationID.IsUnknown() {
			data.OrganizationID = r.OrganizationID.ValueStringPointer()
		}
		if data.OrganizationID == nil {
			resp.Diagnostics.AddError("Missing required field", `The field organization_id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
			return
		}
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("organization_id"), data.OrganizationID)...)
}
