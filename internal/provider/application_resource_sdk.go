// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/gravitee-io/terraform-provider-apim/internal/provider/customtypes"
	tfTypes "github.com/gravitee-io/terraform-provider-apim/internal/provider/types"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/operations"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ApplicationResourceModel) RefreshFromSharedApplicationState(ctx context.Context, resp *shared.ApplicationState) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Background = types.StringPointerValue(resp.Background)
		r.Description = types.StringValue(resp.Description)
		r.Domain = types.StringPointerValue(resp.Domain)
		r.EnvironmentID = types.StringPointerValue(resp.EnvironmentID)
		r.Groups = make([]types.String, 0, len(resp.Groups))
		for _, v := range resp.Groups {
			r.Groups = append(r.Groups, types.StringValue(v))
		}
		r.Hrid = types.StringValue(resp.Hrid)
		r.ID = types.StringPointerValue(resp.ID)
		r.Members = []tfTypes.Member{}

		for _, membersItem := range resp.Members {
			var members tfTypes.Member

			members.Role = types.StringValue(membersItem.Role)
			members.Source = types.StringValue(membersItem.Source)
			members.SourceID = types.StringValue(membersItem.SourceID)

			r.Members = append(r.Members, members)
		}
		r.Metadata = []tfTypes.Metadata{}

		for _, metadataItem := range resp.Metadata {
			var metadata tfTypes.Metadata

			metadata.DefaultValue = types.StringPointerValue(metadataItem.DefaultValue)
			metadata.Format = types.StringValue(string(metadataItem.Format))
			metadata.Hidden = types.BoolPointerValue(metadataItem.Hidden)
			metadata.Key = types.StringPointerValue(metadataItem.Key)
			metadata.Name = types.StringValue(metadataItem.Name)
			metadata.Value = types.StringPointerValue(metadataItem.Value)

			r.Metadata = append(r.Metadata, metadata)
		}
		r.Name = types.StringValue(resp.Name)
		r.NotifyMembers = types.BoolPointerValue(resp.NotifyMembers)
		r.OrganizationID = types.StringPointerValue(resp.OrganizationID)
		r.PictureURL = types.StringPointerValue(resp.PictureURL)
		if resp.Settings == nil {
			r.Settings = nil
		} else {
			r.Settings = &tfTypes.ApplicationSettings{}
			if resp.Settings.App == nil {
				r.Settings.App = nil
			} else {
				r.Settings.App = &tfTypes.SimpleApplicationSettings{}
				r.Settings.App.ClientID = types.StringPointerValue(resp.Settings.App.ClientID)
				r.Settings.App.Type = types.StringPointerValue(resp.Settings.App.Type)
			}
			if resp.Settings.Oauth == nil {
				r.Settings.Oauth = nil
			} else {
				r.Settings.Oauth = &tfTypes.ApplicationOAuthClientSettings{}
				if len(resp.Settings.Oauth.AdditionalClientMetadata) > 0 {
					r.Settings.Oauth.AdditionalClientMetadata = make(map[string]types.String, len(resp.Settings.Oauth.AdditionalClientMetadata))
					for key, value := range resp.Settings.Oauth.AdditionalClientMetadata {
						r.Settings.Oauth.AdditionalClientMetadata[key] = types.StringValue(value)
					}
				}
				r.Settings.Oauth.ApplicationType = types.StringValue(string(resp.Settings.Oauth.ApplicationType))
				r.Settings.Oauth.GrantTypes = make([]types.String, 0, len(resp.Settings.Oauth.GrantTypes))
				for _, v := range resp.Settings.Oauth.GrantTypes {
					r.Settings.Oauth.GrantTypes = append(r.Settings.Oauth.GrantTypes, types.StringValue(string(v)))
				}
				r.Settings.Oauth.RedirectUris = make([]types.String, 0, len(resp.Settings.Oauth.RedirectUris))
				for _, v := range resp.Settings.Oauth.RedirectUris {
					r.Settings.Oauth.RedirectUris = append(r.Settings.Oauth.RedirectUris, types.StringValue(v))
				}
			}
			if resp.Settings.TLS == nil {
				r.Settings.TLS = nil
			} else {
				r.Settings.TLS = &tfTypes.ApplicationTLSSettings{}
				clientCertificateValuable, clientCertificateDiags := customtypes.TrimmedStringType{}.ValueFromString(ctx, types.StringValue(resp.Settings.TLS.ClientCertificate))
				diags.Append(clientCertificateDiags...)
				r.Settings.TLS.ClientCertificate = clientCertificateValuable.(customtypes.TrimmedString)
			}
		}
		if resp.Status != nil {
			r.Status = types.StringValue(string(*resp.Status))
		} else {
			r.Status = types.StringNull()
		}
	}

	return diags
}

func (r *ApplicationResourceModel) ToOperationsCreateOrUpdateApplicationsRequest(ctx context.Context) (*operations.CreateOrUpdateApplicationsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	applicationSpec, applicationSpecDiags := r.ToSharedApplicationSpec(ctx)
	diags.Append(applicationSpecDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateOrUpdateApplicationsRequest{
		OrganizationID:  organizationID,
		EnvironmentID:   environmentID,
		ApplicationSpec: *applicationSpec,
	}

	return &out, diags
}

func (r *ApplicationResourceModel) ToOperationsDeleteApplicationRequest(ctx context.Context) (*operations.DeleteApplicationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	var hrid string
	hrid = r.Hrid.ValueString()

	out := operations.DeleteApplicationRequest{
		OrganizationID: organizationID,
		EnvironmentID:  environmentID,
		Hrid:           hrid,
	}

	return &out, diags
}

func (r *ApplicationResourceModel) ToOperationsGetApplicationRequest(ctx context.Context) (*operations.GetApplicationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	var hrid string
	hrid = r.Hrid.ValueString()

	out := operations.GetApplicationRequest{
		OrganizationID: organizationID,
		EnvironmentID:  environmentID,
		Hrid:           hrid,
	}

	return &out, diags
}

func (r *ApplicationResourceModel) ToSharedApplicationSpec(ctx context.Context) (*shared.ApplicationSpec, diag.Diagnostics) {
	var diags diag.Diagnostics

	var hrid string
	hrid = r.Hrid.ValueString()

	var name string
	name = r.Name.ValueString()

	var description string
	description = r.Description.ValueString()

	domain := new(string)
	if !r.Domain.IsUnknown() && !r.Domain.IsNull() {
		*domain = r.Domain.ValueString()
	} else {
		domain = nil
	}
	groups := make([]string, 0, len(r.Groups))
	for _, groupsItem := range r.Groups {
		groups = append(groups, groupsItem.ValueString())
	}
	pictureURL := new(string)
	if !r.PictureURL.IsUnknown() && !r.PictureURL.IsNull() {
		*pictureURL = r.PictureURL.ValueString()
	} else {
		pictureURL = nil
	}
	notifyMembers := new(bool)
	if !r.NotifyMembers.IsUnknown() && !r.NotifyMembers.IsNull() {
		*notifyMembers = r.NotifyMembers.ValueBool()
	} else {
		notifyMembers = nil
	}
	background := new(string)
	if !r.Background.IsUnknown() && !r.Background.IsNull() {
		*background = r.Background.ValueString()
	} else {
		background = nil
	}
	var settings *shared.ApplicationSettings
	if r.Settings != nil {
		var app *shared.SimpleApplicationSettings
		if r.Settings.App != nil {
			typeVar := new(string)
			if !r.Settings.App.Type.IsUnknown() && !r.Settings.App.Type.IsNull() {
				*typeVar = r.Settings.App.Type.ValueString()
			} else {
				typeVar = nil
			}
			clientID := new(string)
			if !r.Settings.App.ClientID.IsUnknown() && !r.Settings.App.ClientID.IsNull() {
				*clientID = r.Settings.App.ClientID.ValueString()
			} else {
				clientID = nil
			}
			app = &shared.SimpleApplicationSettings{
				Type:     typeVar,
				ClientID: clientID,
			}
		}
		var oauth *shared.ApplicationOAuthClientSettings
		if r.Settings.Oauth != nil {
			applicationType := shared.ApplicationType(r.Settings.Oauth.ApplicationType.ValueString())
			grantTypes := make([]shared.GrantType, 0, len(r.Settings.Oauth.GrantTypes))
			for _, grantTypesItem := range r.Settings.Oauth.GrantTypes {
				grantTypes = append(grantTypes, shared.GrantType(grantTypesItem.ValueString()))
			}
			redirectUris := make([]string, 0, len(r.Settings.Oauth.RedirectUris))
			for _, redirectUrisItem := range r.Settings.Oauth.RedirectUris {
				redirectUris = append(redirectUris, redirectUrisItem.ValueString())
			}
			additionalClientMetadata := make(map[string]string)
			for additionalClientMetadataKey, additionalClientMetadataValue := range r.Settings.Oauth.AdditionalClientMetadata {
				var additionalClientMetadataInst string
				additionalClientMetadataInst = additionalClientMetadataValue.ValueString()

				additionalClientMetadata[additionalClientMetadataKey] = additionalClientMetadataInst
			}
			oauth = &shared.ApplicationOAuthClientSettings{
				ApplicationType:          applicationType,
				GrantTypes:               grantTypes,
				RedirectUris:             redirectUris,
				AdditionalClientMetadata: additionalClientMetadata,
			}
		}
		var tls *shared.ApplicationTLSSettings
		if r.Settings.TLS != nil {
			var clientCertificate string
			clientCertificate = r.Settings.TLS.ClientCertificate.ValueString()

			tls = &shared.ApplicationTLSSettings{
				ClientCertificate: clientCertificate,
			}
		}
		settings = &shared.ApplicationSettings{
			App:   app,
			Oauth: oauth,
			TLS:   tls,
		}
	}
	metadata := make([]shared.Metadata, 0, len(r.Metadata))
	for _, metadataItem := range r.Metadata {
		key := new(string)
		if !metadataItem.Key.IsUnknown() && !metadataItem.Key.IsNull() {
			*key = metadataItem.Key.ValueString()
		} else {
			key = nil
		}
		var name1 string
		name1 = metadataItem.Name.ValueString()

		format := shared.MetadataFormat(metadataItem.Format.ValueString())
		value := new(string)
		if !metadataItem.Value.IsUnknown() && !metadataItem.Value.IsNull() {
			*value = metadataItem.Value.ValueString()
		} else {
			value = nil
		}
		defaultValue := new(string)
		if !metadataItem.DefaultValue.IsUnknown() && !metadataItem.DefaultValue.IsNull() {
			*defaultValue = metadataItem.DefaultValue.ValueString()
		} else {
			defaultValue = nil
		}
		hidden := new(bool)
		if !metadataItem.Hidden.IsUnknown() && !metadataItem.Hidden.IsNull() {
			*hidden = metadataItem.Hidden.ValueBool()
		} else {
			hidden = nil
		}
		metadata = append(metadata, shared.Metadata{
			Key:          key,
			Name:         name1,
			Format:       format,
			Value:        value,
			DefaultValue: defaultValue,
			Hidden:       hidden,
		})
	}
	members := make([]shared.Member, 0, len(r.Members))
	for _, membersItem := range r.Members {
		var source string
		source = membersItem.Source.ValueString()

		var sourceID string
		sourceID = membersItem.SourceID.ValueString()

		var role string
		role = membersItem.Role.ValueString()

		members = append(members, shared.Member{
			Source:   source,
			SourceID: sourceID,
			Role:     role,
		})
	}
	status := new(shared.ApplicationSpecStatus)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = shared.ApplicationSpecStatus(r.Status.ValueString())
	} else {
		status = nil
	}
	out := shared.ApplicationSpec{
		Hrid:          hrid,
		Name:          name,
		Description:   description,
		Domain:        domain,
		Groups:        groups,
		PictureURL:    pictureURL,
		NotifyMembers: notifyMembers,
		Background:    background,
		Settings:      settings,
		Metadata:      metadata,
		Members:       members,
		Status:        status,
	}

	return &out, diags
}
