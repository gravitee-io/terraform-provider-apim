// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/gravitee-io/terraform-provider-apim/internal/provider/types"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SharedPolicyGroupDataSource{}
var _ datasource.DataSourceWithConfigure = &SharedPolicyGroupDataSource{}

func NewSharedPolicyGroupDataSource() datasource.DataSource {
	return &SharedPolicyGroupDataSource{}
}

// SharedPolicyGroupDataSource is the data source implementation.
type SharedPolicyGroupDataSource struct {
	// Provider configured SDK client.
	client *sdk.GraviteeApim

	// environment ID
	EnvironmentID types.String `tfsdk:"environment_id"`

	// organization ID
	OrganizationID types.String `tfsdk:"organization_id"`
}

// SharedPolicyGroupDataSourceModel describes the data model.
type SharedPolicyGroupDataSourceModel struct {
	APIType             types.String       `tfsdk:"api_type"`
	CrossID             types.String       `tfsdk:"cross_id"`
	Description         types.String       `tfsdk:"description"`
	EnvironmentID       types.String       `tfsdk:"environment_id"`
	Hrid                types.String       `tfsdk:"hrid"`
	ID                  types.String       `tfsdk:"id"`
	Name                types.String       `tfsdk:"name"`
	OrganizationID      types.String       `tfsdk:"organization_id"`
	Phase               types.String       `tfsdk:"phase"`
	PrerequisiteMessage types.String       `tfsdk:"prerequisite_message"`
	Steps               []tfTypes.FlowStep `tfsdk:"steps"`
}

// Metadata returns the data source type name.
func (r *SharedPolicyGroupDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_shared_policy_group"
}

// Schema defines the schema for the data source.
func (r *SharedPolicyGroupDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SharedPolicyGroup DataSource",

		Attributes: map[string]schema.Attribute{
			"api_type": schema.StringAttribute{
				Computed:    true,
				Description: `API's type.`,
			},
			"cross_id": schema.StringAttribute{
				Computed:    true,
				Description: `The Cross ID is used to identify a shared policy group that has been promoted from one environment to another.`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `The description of the shared policy group`,
			},
			"environment_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `environment ID`,
			},
			"hrid": schema.StringAttribute{
				Required:    true,
				Description: `Human-readable ID of a spec`,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`).String()),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The id of the shared policy group.`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the shared policy group`,
			},
			"organization_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `organization ID`,
			},
			"phase": schema.StringAttribute{
				Computed:    true,
				Description: `The execution phase of a policy.`,
			},
			"prerequisite_message": schema.StringAttribute{
				Computed:    true,
				Description: `The prerequisite message of the shared policy group. This message is displayed to the user to help understand the prerequisite to use the shared policy group.`,
			},
			"steps": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"condition": schema.StringAttribute{
							Computed:    true,
							Description: `FlowStep condition`,
						},
						"configuration": schema.StringAttribute{
							Computed:    true,
							Description: `FlowStep configuration is a map of arbitrary key-values`,
						},
						"description": schema.StringAttribute{
							Computed:    true,
							Description: `FlowStep description`,
						},
						"enabled": schema.BoolAttribute{
							Computed:    true,
							Description: `Indicate if this FlowStep is enabled or not`,
						},
						"message_condition": schema.StringAttribute{
							Computed:    true,
							Description: `The message condition (supports EL expressions)`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `FlowStep name`,
						},
						"policy": schema.StringAttribute{
							Computed:    true,
							Description: `FlowStep policy`,
						},
					},
				},
				Description: `SharedPolicyGroup Steps`,
			},
		},
	}
}

func (r *SharedPolicyGroupDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(*ApimProviderConfigureData)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *ApimProviderConfigureData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.EnvironmentID = providerData.EnvironmentID
	r.OrganizationID = providerData.OrganizationID
	r.client = providerData.SDKClient
}

func (r *SharedPolicyGroupDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SharedPolicyGroupDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.EnvironmentID.IsNull() {
		data.EnvironmentID = r.EnvironmentID
	}

	if data.OrganizationID.IsNull() {
		data.OrganizationID = r.OrganizationID
	}

	request, requestDiags := data.ToOperationsGetPolicyGroupRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.SharedPolicyGroups.Get(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SharedPolicyGroupState != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSharedPolicyGroupState(ctx, res.SharedPolicyGroupState)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
