// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/gravitee-io/terraform-provider-apim/internal/provider/typeconvert"
	tfTypes "github.com/gravitee-io/terraform-provider-apim/internal/provider/types"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/operations"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *Apiv4DataSourceModel) RefreshFromSharedApiv4State(ctx context.Context, resp *shared.APIV4State) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Analytics == nil {
			r.Analytics = nil
		} else {
			r.Analytics = &tfTypes.Analytics{}
			r.Analytics.Enabled = types.BoolPointerValue(resp.Analytics.Enabled)
			if resp.Analytics.Logging == nil {
				r.Analytics.Logging = nil
			} else {
				r.Analytics.Logging = &tfTypes.LoggingV4{}
				r.Analytics.Logging.Condition = types.StringPointerValue(resp.Analytics.Logging.Condition)
				if resp.Analytics.Logging.Content == nil {
					r.Analytics.Logging.Content = nil
				} else {
					r.Analytics.Logging.Content = &tfTypes.LoggingContentV4{}
					r.Analytics.Logging.Content.Headers = types.BoolPointerValue(resp.Analytics.Logging.Content.Headers)
					r.Analytics.Logging.Content.MessageHeaders = types.BoolPointerValue(resp.Analytics.Logging.Content.MessageHeaders)
					r.Analytics.Logging.Content.MessageMetadata = types.BoolPointerValue(resp.Analytics.Logging.Content.MessageMetadata)
					r.Analytics.Logging.Content.MessagePayload = types.BoolPointerValue(resp.Analytics.Logging.Content.MessagePayload)
					r.Analytics.Logging.Content.Payload = types.BoolPointerValue(resp.Analytics.Logging.Content.Payload)
				}
				r.Analytics.Logging.MessageCondition = types.StringPointerValue(resp.Analytics.Logging.MessageCondition)
				if resp.Analytics.Logging.Mode == nil {
					r.Analytics.Logging.Mode = nil
				} else {
					r.Analytics.Logging.Mode = &tfTypes.LoggingModeV4{}
					r.Analytics.Logging.Mode.Endpoint = types.BoolPointerValue(resp.Analytics.Logging.Mode.Endpoint)
					r.Analytics.Logging.Mode.Entrypoint = types.BoolPointerValue(resp.Analytics.Logging.Mode.Entrypoint)
				}
				if resp.Analytics.Logging.Phase == nil {
					r.Analytics.Logging.Phase = nil
				} else {
					r.Analytics.Logging.Phase = &tfTypes.LoggingPhase{}
					r.Analytics.Logging.Phase.Request = types.BoolPointerValue(resp.Analytics.Logging.Phase.Request)
					r.Analytics.Logging.Phase.Response = types.BoolPointerValue(resp.Analytics.Logging.Phase.Response)
				}
			}
			if resp.Analytics.Sampling == nil {
				r.Analytics.Sampling = nil
			} else {
				r.Analytics.Sampling = &tfTypes.Sampling{}
				r.Analytics.Sampling.Type = types.StringValue(string(resp.Analytics.Sampling.Type))
				r.Analytics.Sampling.Value = types.StringPointerValue(resp.Analytics.Sampling.Value)
			}
			if resp.Analytics.Tracing == nil {
				r.Analytics.Tracing = nil
			} else {
				r.Analytics.Tracing = &tfTypes.TracingV4{}
				r.Analytics.Tracing.Enabled = types.BoolPointerValue(resp.Analytics.Tracing.Enabled)
				r.Analytics.Tracing.Verbose = types.BoolPointerValue(resp.Analytics.Tracing.Verbose)
			}
		}
		r.Categories = make([]types.String, 0, len(resp.Categories))
		for _, v := range resp.Categories {
			r.Categories = append(r.Categories, types.StringValue(v))
		}
		r.CrossID = types.StringPointerValue(resp.CrossID)
		r.Description = types.StringPointerValue(resp.Description)
		r.EndpointGroups = []tfTypes.EndpointGroupV4{}
		if len(r.EndpointGroups) > len(resp.EndpointGroups) {
			r.EndpointGroups = r.EndpointGroups[:len(resp.EndpointGroups)]
		}
		for endpointGroupsCount, endpointGroupsItem := range resp.EndpointGroups {
			var endpointGroups tfTypes.EndpointGroupV4
			endpointGroups.Endpoints = []tfTypes.EndpointV4{}
			for endpointsCount, endpointsItem := range endpointGroupsItem.Endpoints {
				var endpoints tfTypes.EndpointV4
				if endpointsItem.Configuration == nil {
					endpoints.Configuration = types.StringNull()
				} else {
					configurationResult, _ := json.Marshal(endpointsItem.Configuration)
					endpoints.Configuration = types.StringValue(string(configurationResult))
				}
				endpoints.InheritConfiguration = types.BoolPointerValue(endpointsItem.InheritConfiguration)
				endpoints.Name = types.StringPointerValue(endpointsItem.Name)
				endpoints.Secondary = types.BoolPointerValue(endpointsItem.Secondary)
				if endpointsItem.Services == nil {
					endpoints.Services = nil
				} else {
					endpoints.Services = &tfTypes.EndpointServices{}
					if endpointsItem.Services.HealthCheck == nil {
						endpoints.Services.HealthCheck = nil
					} else {
						endpoints.Services.HealthCheck = &tfTypes.ServiceV4{}
						if endpointsItem.Services.HealthCheck.Configuration == nil {
							endpoints.Services.HealthCheck.Configuration = types.StringNull()
						} else {
							configurationResult1, _ := json.Marshal(endpointsItem.Services.HealthCheck.Configuration)
							endpoints.Services.HealthCheck.Configuration = types.StringValue(string(configurationResult1))
						}
						endpoints.Services.HealthCheck.Enabled = types.BoolPointerValue(endpointsItem.Services.HealthCheck.Enabled)
						endpoints.Services.HealthCheck.OverrideConfiguration = types.BoolPointerValue(endpointsItem.Services.HealthCheck.OverrideConfiguration)
						endpoints.Services.HealthCheck.Type = types.StringPointerValue(endpointsItem.Services.HealthCheck.Type)
					}
				}
				if endpointsItem.SharedConfigurationOverride == nil {
					endpoints.SharedConfigurationOverride = types.StringNull()
				} else {
					sharedConfigurationOverrideResult, _ := json.Marshal(endpointsItem.SharedConfigurationOverride)
					endpoints.SharedConfigurationOverride = types.StringValue(string(sharedConfigurationOverrideResult))
				}
				endpoints.Tenants = make([]types.String, 0, len(endpointsItem.Tenants))
				for _, v := range endpointsItem.Tenants {
					endpoints.Tenants = append(endpoints.Tenants, types.StringValue(v))
				}
				endpoints.Type = types.StringValue(endpointsItem.Type)
				endpoints.Weight = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(endpointsItem.Weight))
				if endpointsCount+1 > len(endpointGroups.Endpoints) {
					endpointGroups.Endpoints = append(endpointGroups.Endpoints, endpoints)
				} else {
					endpointGroups.Endpoints[endpointsCount].Configuration = endpoints.Configuration
					endpointGroups.Endpoints[endpointsCount].InheritConfiguration = endpoints.InheritConfiguration
					endpointGroups.Endpoints[endpointsCount].Name = endpoints.Name
					endpointGroups.Endpoints[endpointsCount].Secondary = endpoints.Secondary
					endpointGroups.Endpoints[endpointsCount].Services = endpoints.Services
					endpointGroups.Endpoints[endpointsCount].SharedConfigurationOverride = endpoints.SharedConfigurationOverride
					endpointGroups.Endpoints[endpointsCount].Tenants = endpoints.Tenants
					endpointGroups.Endpoints[endpointsCount].Type = endpoints.Type
					endpointGroups.Endpoints[endpointsCount].Weight = endpoints.Weight
				}
			}
			if endpointGroupsItem.LoadBalancer == nil {
				endpointGroups.LoadBalancer = nil
			} else {
				endpointGroups.LoadBalancer = &tfTypes.LoadBalancer{}
				if endpointGroupsItem.LoadBalancer.Type != nil {
					endpointGroups.LoadBalancer.Type = types.StringValue(string(*endpointGroupsItem.LoadBalancer.Type))
				} else {
					endpointGroups.LoadBalancer.Type = types.StringNull()
				}
			}
			endpointGroups.Name = types.StringPointerValue(endpointGroupsItem.Name)
			if endpointGroupsItem.Services == nil {
				endpointGroups.Services = nil
			} else {
				endpointGroups.Services = &tfTypes.EndpointGroupServices{}
				if endpointGroupsItem.Services.Discovery == nil {
					endpointGroups.Services.Discovery = nil
				} else {
					endpointGroups.Services.Discovery = &tfTypes.ServiceV4{}
					if endpointGroupsItem.Services.Discovery.Configuration == nil {
						endpointGroups.Services.Discovery.Configuration = types.StringNull()
					} else {
						configurationResult2, _ := json.Marshal(endpointGroupsItem.Services.Discovery.Configuration)
						endpointGroups.Services.Discovery.Configuration = types.StringValue(string(configurationResult2))
					}
					endpointGroups.Services.Discovery.Enabled = types.BoolPointerValue(endpointGroupsItem.Services.Discovery.Enabled)
					endpointGroups.Services.Discovery.OverrideConfiguration = types.BoolPointerValue(endpointGroupsItem.Services.Discovery.OverrideConfiguration)
					endpointGroups.Services.Discovery.Type = types.StringPointerValue(endpointGroupsItem.Services.Discovery.Type)
				}
				if endpointGroupsItem.Services.HealthCheck == nil {
					endpointGroups.Services.HealthCheck = nil
				} else {
					endpointGroups.Services.HealthCheck = &tfTypes.ServiceV4{}
					if endpointGroupsItem.Services.HealthCheck.Configuration == nil {
						endpointGroups.Services.HealthCheck.Configuration = types.StringNull()
					} else {
						configurationResult3, _ := json.Marshal(endpointGroupsItem.Services.HealthCheck.Configuration)
						endpointGroups.Services.HealthCheck.Configuration = types.StringValue(string(configurationResult3))
					}
					endpointGroups.Services.HealthCheck.Enabled = types.BoolPointerValue(endpointGroupsItem.Services.HealthCheck.Enabled)
					endpointGroups.Services.HealthCheck.OverrideConfiguration = types.BoolPointerValue(endpointGroupsItem.Services.HealthCheck.OverrideConfiguration)
					endpointGroups.Services.HealthCheck.Type = types.StringPointerValue(endpointGroupsItem.Services.HealthCheck.Type)
				}
			}
			if endpointGroupsItem.SharedConfiguration == nil {
				endpointGroups.SharedConfiguration = types.StringNull()
			} else {
				sharedConfigurationResult, _ := json.Marshal(endpointGroupsItem.SharedConfiguration)
				endpointGroups.SharedConfiguration = types.StringValue(string(sharedConfigurationResult))
			}
			endpointGroups.Type = types.StringValue(endpointGroupsItem.Type)
			if endpointGroupsCount+1 > len(r.EndpointGroups) {
				r.EndpointGroups = append(r.EndpointGroups, endpointGroups)
			} else {
				r.EndpointGroups[endpointGroupsCount].Endpoints = endpointGroups.Endpoints
				r.EndpointGroups[endpointGroupsCount].LoadBalancer = endpointGroups.LoadBalancer
				r.EndpointGroups[endpointGroupsCount].Name = endpointGroups.Name
				r.EndpointGroups[endpointGroupsCount].Services = endpointGroups.Services
				r.EndpointGroups[endpointGroupsCount].SharedConfiguration = endpointGroups.SharedConfiguration
				r.EndpointGroups[endpointGroupsCount].Type = endpointGroups.Type
			}
		}
		if resp.Failover == nil {
			r.Failover = nil
		} else {
			r.Failover = &tfTypes.FailoverV4{}
			r.Failover.Enabled = types.BoolPointerValue(resp.Failover.Enabled)
			r.Failover.MaxFailures = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Failover.MaxFailures))
			r.Failover.MaxRetries = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Failover.MaxRetries))
			r.Failover.OpenStateDuration = types.Int64PointerValue(resp.Failover.OpenStateDuration)
			r.Failover.PerSubscription = types.BoolPointerValue(resp.Failover.PerSubscription)
			r.Failover.SlowCallDuration = types.Int64PointerValue(resp.Failover.SlowCallDuration)
		}
		if resp.FlowExecution == nil {
			r.FlowExecution = nil
		} else {
			r.FlowExecution = &tfTypes.FlowExecution{}
			r.FlowExecution.MatchRequired = types.BoolPointerValue(resp.FlowExecution.MatchRequired)
			if resp.FlowExecution.Mode != nil {
				r.FlowExecution.Mode = types.StringValue(string(*resp.FlowExecution.Mode))
			} else {
				r.FlowExecution.Mode = types.StringNull()
			}
		}
		r.Flows = []tfTypes.FlowV4{}
		if len(r.Flows) > len(resp.Flows) {
			r.Flows = r.Flows[:len(resp.Flows)]
		}
		for flowsCount, flowsItem := range resp.Flows {
			var flows tfTypes.FlowV4
			flows.Connect = []tfTypes.StepV4{}
			for connectCount, connectItem := range flowsItem.Connect {
				var connect tfTypes.StepV4
				connect.Condition = types.StringPointerValue(connectItem.Condition)
				if connectItem.Configuration == nil {
					connect.Configuration = types.StringNull()
				} else {
					configurationResult4, _ := json.Marshal(connectItem.Configuration)
					connect.Configuration = types.StringValue(string(configurationResult4))
				}
				connect.Description = types.StringPointerValue(connectItem.Description)
				connect.Enabled = types.BoolPointerValue(connectItem.Enabled)
				connect.MessageCondition = types.StringPointerValue(connectItem.MessageCondition)
				connect.Name = types.StringPointerValue(connectItem.Name)
				connect.Policy = types.StringPointerValue(connectItem.Policy)
				if connectCount+1 > len(flows.Connect) {
					flows.Connect = append(flows.Connect, connect)
				} else {
					flows.Connect[connectCount].Condition = connect.Condition
					flows.Connect[connectCount].Configuration = connect.Configuration
					flows.Connect[connectCount].Description = connect.Description
					flows.Connect[connectCount].Enabled = connect.Enabled
					flows.Connect[connectCount].MessageCondition = connect.MessageCondition
					flows.Connect[connectCount].Name = connect.Name
					flows.Connect[connectCount].Policy = connect.Policy
				}
			}
			flows.Enabled = types.BoolPointerValue(flowsItem.Enabled)
			flows.ID = types.StringPointerValue(flowsItem.ID)
			flows.Interact = []tfTypes.StepV4{}
			for interactCount, interactItem := range flowsItem.Interact {
				var interact tfTypes.StepV4
				interact.Condition = types.StringPointerValue(interactItem.Condition)
				if interactItem.Configuration == nil {
					interact.Configuration = types.StringNull()
				} else {
					configurationResult5, _ := json.Marshal(interactItem.Configuration)
					interact.Configuration = types.StringValue(string(configurationResult5))
				}
				interact.Description = types.StringPointerValue(interactItem.Description)
				interact.Enabled = types.BoolPointerValue(interactItem.Enabled)
				interact.MessageCondition = types.StringPointerValue(interactItem.MessageCondition)
				interact.Name = types.StringPointerValue(interactItem.Name)
				interact.Policy = types.StringPointerValue(interactItem.Policy)
				if interactCount+1 > len(flows.Interact) {
					flows.Interact = append(flows.Interact, interact)
				} else {
					flows.Interact[interactCount].Condition = interact.Condition
					flows.Interact[interactCount].Configuration = interact.Configuration
					flows.Interact[interactCount].Description = interact.Description
					flows.Interact[interactCount].Enabled = interact.Enabled
					flows.Interact[interactCount].MessageCondition = interact.MessageCondition
					flows.Interact[interactCount].Name = interact.Name
					flows.Interact[interactCount].Policy = interact.Policy
				}
			}
			flows.Name = types.StringPointerValue(flowsItem.Name)
			flows.Publish = []tfTypes.StepV4{}
			for publishCount, publishItem := range flowsItem.Publish {
				var publish tfTypes.StepV4
				publish.Condition = types.StringPointerValue(publishItem.Condition)
				if publishItem.Configuration == nil {
					publish.Configuration = types.StringNull()
				} else {
					configurationResult6, _ := json.Marshal(publishItem.Configuration)
					publish.Configuration = types.StringValue(string(configurationResult6))
				}
				publish.Description = types.StringPointerValue(publishItem.Description)
				publish.Enabled = types.BoolPointerValue(publishItem.Enabled)
				publish.MessageCondition = types.StringPointerValue(publishItem.MessageCondition)
				publish.Name = types.StringPointerValue(publishItem.Name)
				publish.Policy = types.StringPointerValue(publishItem.Policy)
				if publishCount+1 > len(flows.Publish) {
					flows.Publish = append(flows.Publish, publish)
				} else {
					flows.Publish[publishCount].Condition = publish.Condition
					flows.Publish[publishCount].Configuration = publish.Configuration
					flows.Publish[publishCount].Description = publish.Description
					flows.Publish[publishCount].Enabled = publish.Enabled
					flows.Publish[publishCount].MessageCondition = publish.MessageCondition
					flows.Publish[publishCount].Name = publish.Name
					flows.Publish[publishCount].Policy = publish.Policy
				}
			}
			flows.Request = []tfTypes.StepV4{}
			for requestCount, requestItem := range flowsItem.Request {
				var request tfTypes.StepV4
				request.Condition = types.StringPointerValue(requestItem.Condition)
				if requestItem.Configuration == nil {
					request.Configuration = types.StringNull()
				} else {
					configurationResult7, _ := json.Marshal(requestItem.Configuration)
					request.Configuration = types.StringValue(string(configurationResult7))
				}
				request.Description = types.StringPointerValue(requestItem.Description)
				request.Enabled = types.BoolPointerValue(requestItem.Enabled)
				request.MessageCondition = types.StringPointerValue(requestItem.MessageCondition)
				request.Name = types.StringPointerValue(requestItem.Name)
				request.Policy = types.StringPointerValue(requestItem.Policy)
				if requestCount+1 > len(flows.Request) {
					flows.Request = append(flows.Request, request)
				} else {
					flows.Request[requestCount].Condition = request.Condition
					flows.Request[requestCount].Configuration = request.Configuration
					flows.Request[requestCount].Description = request.Description
					flows.Request[requestCount].Enabled = request.Enabled
					flows.Request[requestCount].MessageCondition = request.MessageCondition
					flows.Request[requestCount].Name = request.Name
					flows.Request[requestCount].Policy = request.Policy
				}
			}
			flows.Response = []tfTypes.StepV4{}
			for responseCount, responseItem := range flowsItem.Response {
				var response tfTypes.StepV4
				response.Condition = types.StringPointerValue(responseItem.Condition)
				if responseItem.Configuration == nil {
					response.Configuration = types.StringNull()
				} else {
					configurationResult8, _ := json.Marshal(responseItem.Configuration)
					response.Configuration = types.StringValue(string(configurationResult8))
				}
				response.Description = types.StringPointerValue(responseItem.Description)
				response.Enabled = types.BoolPointerValue(responseItem.Enabled)
				response.MessageCondition = types.StringPointerValue(responseItem.MessageCondition)
				response.Name = types.StringPointerValue(responseItem.Name)
				response.Policy = types.StringPointerValue(responseItem.Policy)
				if responseCount+1 > len(flows.Response) {
					flows.Response = append(flows.Response, response)
				} else {
					flows.Response[responseCount].Condition = response.Condition
					flows.Response[responseCount].Configuration = response.Configuration
					flows.Response[responseCount].Description = response.Description
					flows.Response[responseCount].Enabled = response.Enabled
					flows.Response[responseCount].MessageCondition = response.MessageCondition
					flows.Response[responseCount].Name = response.Name
					flows.Response[responseCount].Policy = response.Policy
				}
			}
			flows.Selectors = []tfTypes.Selector{}
			for selectorsCount, selectorsItem := range flowsItem.Selectors {
				var selectors tfTypes.Selector
				if selectorsItem.ChannelSelector != nil {
					selectors.Channel = &tfTypes.ChannelSelector{}
					selectors.Channel.Channel = types.StringPointerValue(selectorsItem.ChannelSelector.Channel)
					if selectorsItem.ChannelSelector.ChannelOperator != nil {
						selectors.Channel.ChannelOperator = types.StringValue(string(*selectorsItem.ChannelSelector.ChannelOperator))
					} else {
						selectors.Channel.ChannelOperator = types.StringNull()
					}
					selectors.Channel.Entrypoints = make([]types.String, 0, len(selectorsItem.ChannelSelector.Entrypoints))
					for _, v := range selectorsItem.ChannelSelector.Entrypoints {
						selectors.Channel.Entrypoints = append(selectors.Channel.Entrypoints, types.StringValue(v))
					}
					selectors.Channel.Operations = make([]types.String, 0, len(selectorsItem.ChannelSelector.Operations))
					for _, v := range selectorsItem.ChannelSelector.Operations {
						selectors.Channel.Operations = append(selectors.Channel.Operations, types.StringValue(string(v)))
					}
					selectors.Channel.Type = types.StringValue(string(selectorsItem.ChannelSelector.Type))
				}
				if selectorsItem.ConditionSelector != nil {
					selectors.Condition = &tfTypes.ConditionSelector{}
					selectors.Condition.Condition = types.StringValue(selectorsItem.ConditionSelector.Condition)
					selectors.Condition.Type = types.StringValue(string(selectorsItem.ConditionSelector.Type))
				}
				if selectorsItem.HTTPSelector != nil {
					selectors.HTTP = &tfTypes.HTTPSelector{}
					selectors.HTTP.Methods = make([]types.String, 0, len(selectorsItem.HTTPSelector.Methods))
					for _, v := range selectorsItem.HTTPSelector.Methods {
						selectors.HTTP.Methods = append(selectors.HTTP.Methods, types.StringValue(string(v)))
					}
					selectors.HTTP.Path = types.StringPointerValue(selectorsItem.HTTPSelector.Path)
					if selectorsItem.HTTPSelector.PathOperator != nil {
						selectors.HTTP.PathOperator = types.StringValue(string(*selectorsItem.HTTPSelector.PathOperator))
					} else {
						selectors.HTTP.PathOperator = types.StringNull()
					}
					selectors.HTTP.Type = types.StringValue(string(selectorsItem.HTTPSelector.Type))
				}
				if selectorsCount+1 > len(flows.Selectors) {
					flows.Selectors = append(flows.Selectors, selectors)
				} else {
					flows.Selectors[selectorsCount].Channel = selectors.Channel
					flows.Selectors[selectorsCount].Condition = selectors.Condition
					flows.Selectors[selectorsCount].HTTP = selectors.HTTP
				}
			}
			flows.Subscribe = []tfTypes.StepV4{}
			for subscribeCount, subscribeItem := range flowsItem.Subscribe {
				var subscribe tfTypes.StepV4
				subscribe.Condition = types.StringPointerValue(subscribeItem.Condition)
				if subscribeItem.Configuration == nil {
					subscribe.Configuration = types.StringNull()
				} else {
					configurationResult9, _ := json.Marshal(subscribeItem.Configuration)
					subscribe.Configuration = types.StringValue(string(configurationResult9))
				}
				subscribe.Description = types.StringPointerValue(subscribeItem.Description)
				subscribe.Enabled = types.BoolPointerValue(subscribeItem.Enabled)
				subscribe.MessageCondition = types.StringPointerValue(subscribeItem.MessageCondition)
				subscribe.Name = types.StringPointerValue(subscribeItem.Name)
				subscribe.Policy = types.StringPointerValue(subscribeItem.Policy)
				if subscribeCount+1 > len(flows.Subscribe) {
					flows.Subscribe = append(flows.Subscribe, subscribe)
				} else {
					flows.Subscribe[subscribeCount].Condition = subscribe.Condition
					flows.Subscribe[subscribeCount].Configuration = subscribe.Configuration
					flows.Subscribe[subscribeCount].Description = subscribe.Description
					flows.Subscribe[subscribeCount].Enabled = subscribe.Enabled
					flows.Subscribe[subscribeCount].MessageCondition = subscribe.MessageCondition
					flows.Subscribe[subscribeCount].Name = subscribe.Name
					flows.Subscribe[subscribeCount].Policy = subscribe.Policy
				}
			}
			flows.Tags = make([]types.String, 0, len(flowsItem.Tags))
			for _, v := range flowsItem.Tags {
				flows.Tags = append(flows.Tags, types.StringValue(v))
			}
			if flowsCount+1 > len(r.Flows) {
				r.Flows = append(r.Flows, flows)
			} else {
				r.Flows[flowsCount].Connect = flows.Connect
				r.Flows[flowsCount].Enabled = flows.Enabled
				r.Flows[flowsCount].ID = flows.ID
				r.Flows[flowsCount].Interact = flows.Interact
				r.Flows[flowsCount].Name = flows.Name
				r.Flows[flowsCount].Publish = flows.Publish
				r.Flows[flowsCount].Request = flows.Request
				r.Flows[flowsCount].Response = flows.Response
				r.Flows[flowsCount].Selectors = flows.Selectors
				r.Flows[flowsCount].Subscribe = flows.Subscribe
				r.Flows[flowsCount].Tags = flows.Tags
			}
		}
		r.Groups = make([]types.String, 0, len(resp.Groups))
		for _, v := range resp.Groups {
			r.Groups = append(r.Groups, types.StringValue(v))
		}
		r.Hrid = types.StringValue(resp.Hrid)
		r.ID = types.StringPointerValue(resp.ID)
		r.Labels = make([]types.String, 0, len(resp.Labels))
		for _, v := range resp.Labels {
			r.Labels = append(r.Labels, types.StringValue(v))
		}
		r.LifecycleState = types.StringValue(string(resp.LifecycleState))
		r.Listeners = []tfTypes.Listener{}
		if len(r.Listeners) > len(resp.Listeners) {
			r.Listeners = r.Listeners[:len(resp.Listeners)]
		}
		for listenersCount, listenersItem := range resp.Listeners {
			var listeners tfTypes.Listener
			if listenersItem.HTTPListener != nil {
				listeners.HTTP = &tfTypes.HTTPListener{}
				if listenersItem.HTTPListener.Cors == nil {
					listeners.HTTP.Cors = nil
				} else {
					listeners.HTTP.Cors = &tfTypes.Cors{}
					listeners.HTTP.Cors.AllowCredentials = types.BoolPointerValue(listenersItem.HTTPListener.Cors.AllowCredentials)
					listeners.HTTP.Cors.AllowHeaders = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.AllowHeaders))
					for _, v := range listenersItem.HTTPListener.Cors.AllowHeaders {
						listeners.HTTP.Cors.AllowHeaders = append(listeners.HTTP.Cors.AllowHeaders, types.StringValue(v))
					}
					listeners.HTTP.Cors.AllowMethods = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.AllowMethods))
					for _, v := range listenersItem.HTTPListener.Cors.AllowMethods {
						listeners.HTTP.Cors.AllowMethods = append(listeners.HTTP.Cors.AllowMethods, types.StringValue(v))
					}
					listeners.HTTP.Cors.AllowOrigin = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.AllowOrigin))
					for _, v := range listenersItem.HTTPListener.Cors.AllowOrigin {
						listeners.HTTP.Cors.AllowOrigin = append(listeners.HTTP.Cors.AllowOrigin, types.StringValue(v))
					}
					listeners.HTTP.Cors.Enabled = types.BoolPointerValue(listenersItem.HTTPListener.Cors.Enabled)
					listeners.HTTP.Cors.ExposeHeaders = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.ExposeHeaders))
					for _, v := range listenersItem.HTTPListener.Cors.ExposeHeaders {
						listeners.HTTP.Cors.ExposeHeaders = append(listeners.HTTP.Cors.ExposeHeaders, types.StringValue(v))
					}
					listeners.HTTP.Cors.MaxAge = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(listenersItem.HTTPListener.Cors.MaxAge))
					listeners.HTTP.Cors.RunPolicies = types.BoolPointerValue(listenersItem.HTTPListener.Cors.RunPolicies)
				}
				listeners.HTTP.Entrypoints = []tfTypes.Entrypoint{}
				for entrypointsCount, entrypointsItem := range listenersItem.HTTPListener.Entrypoints {
					var entrypoints tfTypes.Entrypoint
					if entrypointsItem.Configuration == nil {
						entrypoints.Configuration = types.StringNull()
					} else {
						configurationResult10, _ := json.Marshal(entrypointsItem.Configuration)
						entrypoints.Configuration = types.StringValue(string(configurationResult10))
					}
					if entrypointsItem.Dlq == nil {
						entrypoints.Dlq = nil
					} else {
						entrypoints.Dlq = &tfTypes.Dlq{}
						entrypoints.Dlq.Endpoint = types.StringPointerValue(entrypointsItem.Dlq.Endpoint)
					}
					if entrypointsItem.Qos != nil {
						entrypoints.Qos = types.StringValue(string(*entrypointsItem.Qos))
					} else {
						entrypoints.Qos = types.StringNull()
					}
					entrypoints.Type = types.StringValue(entrypointsItem.Type)
					if entrypointsCount+1 > len(listeners.HTTP.Entrypoints) {
						listeners.HTTP.Entrypoints = append(listeners.HTTP.Entrypoints, entrypoints)
					} else {
						listeners.HTTP.Entrypoints[entrypointsCount].Configuration = entrypoints.Configuration
						listeners.HTTP.Entrypoints[entrypointsCount].Dlq = entrypoints.Dlq
						listeners.HTTP.Entrypoints[entrypointsCount].Qos = entrypoints.Qos
						listeners.HTTP.Entrypoints[entrypointsCount].Type = entrypoints.Type
					}
				}
				listeners.HTTP.PathMappings = make([]types.String, 0, len(listenersItem.HTTPListener.PathMappings))
				for _, v := range listenersItem.HTTPListener.PathMappings {
					listeners.HTTP.PathMappings = append(listeners.HTTP.PathMappings, types.StringValue(v))
				}
				listeners.HTTP.Paths = []tfTypes.PathV4{}
				for pathsCount, pathsItem := range listenersItem.HTTPListener.Paths {
					var paths tfTypes.PathV4
					paths.Host = types.StringPointerValue(pathsItem.Host)
					paths.OverrideAccess = types.BoolPointerValue(pathsItem.OverrideAccess)
					paths.Path = types.StringPointerValue(pathsItem.Path)
					if pathsCount+1 > len(listeners.HTTP.Paths) {
						listeners.HTTP.Paths = append(listeners.HTTP.Paths, paths)
					} else {
						listeners.HTTP.Paths[pathsCount].Host = paths.Host
						listeners.HTTP.Paths[pathsCount].OverrideAccess = paths.OverrideAccess
						listeners.HTTP.Paths[pathsCount].Path = paths.Path
					}
				}
				listeners.HTTP.Servers = make([]types.String, 0, len(listenersItem.HTTPListener.Servers))
				for _, v := range listenersItem.HTTPListener.Servers {
					listeners.HTTP.Servers = append(listeners.HTTP.Servers, types.StringValue(v))
				}
				listeners.HTTP.Type = types.StringValue(string(listenersItem.HTTPListener.Type))
			}
			if listenersItem.KafkaListener != nil {
				listeners.Kafka = &tfTypes.KafkaListener{}
				listeners.Kafka.Entrypoints = []tfTypes.Entrypoint{}
				for entrypointsCount1, entrypointsItem1 := range listenersItem.KafkaListener.Entrypoints {
					var entrypoints1 tfTypes.Entrypoint
					if entrypointsItem1.Configuration == nil {
						entrypoints1.Configuration = types.StringNull()
					} else {
						configurationResult11, _ := json.Marshal(entrypointsItem1.Configuration)
						entrypoints1.Configuration = types.StringValue(string(configurationResult11))
					}
					if entrypointsItem1.Dlq == nil {
						entrypoints1.Dlq = nil
					} else {
						entrypoints1.Dlq = &tfTypes.Dlq{}
						entrypoints1.Dlq.Endpoint = types.StringPointerValue(entrypointsItem1.Dlq.Endpoint)
					}
					if entrypointsItem1.Qos != nil {
						entrypoints1.Qos = types.StringValue(string(*entrypointsItem1.Qos))
					} else {
						entrypoints1.Qos = types.StringNull()
					}
					entrypoints1.Type = types.StringValue(entrypointsItem1.Type)
					if entrypointsCount1+1 > len(listeners.Kafka.Entrypoints) {
						listeners.Kafka.Entrypoints = append(listeners.Kafka.Entrypoints, entrypoints1)
					} else {
						listeners.Kafka.Entrypoints[entrypointsCount1].Configuration = entrypoints1.Configuration
						listeners.Kafka.Entrypoints[entrypointsCount1].Dlq = entrypoints1.Dlq
						listeners.Kafka.Entrypoints[entrypointsCount1].Qos = entrypoints1.Qos
						listeners.Kafka.Entrypoints[entrypointsCount1].Type = entrypoints1.Type
					}
				}
				listeners.Kafka.Host = types.StringValue(listenersItem.KafkaListener.Host)
				listeners.Kafka.Port = types.Int64PointerValue(listenersItem.KafkaListener.Port)
				listeners.Kafka.Servers = make([]types.String, 0, len(listenersItem.KafkaListener.Servers))
				for _, v := range listenersItem.KafkaListener.Servers {
					listeners.Kafka.Servers = append(listeners.Kafka.Servers, types.StringValue(v))
				}
				listeners.Kafka.Type = types.StringValue(string(listenersItem.KafkaListener.Type))
			}
			if listenersItem.SubscriptionListener != nil {
				listeners.Subscription = &tfTypes.SubscriptionListener{}
				listeners.Subscription.Entrypoints = []tfTypes.Entrypoint{}
				for entrypointsCount2, entrypointsItem2 := range listenersItem.SubscriptionListener.Entrypoints {
					var entrypoints2 tfTypes.Entrypoint
					if entrypointsItem2.Configuration == nil {
						entrypoints2.Configuration = types.StringNull()
					} else {
						configurationResult12, _ := json.Marshal(entrypointsItem2.Configuration)
						entrypoints2.Configuration = types.StringValue(string(configurationResult12))
					}
					if entrypointsItem2.Dlq == nil {
						entrypoints2.Dlq = nil
					} else {
						entrypoints2.Dlq = &tfTypes.Dlq{}
						entrypoints2.Dlq.Endpoint = types.StringPointerValue(entrypointsItem2.Dlq.Endpoint)
					}
					if entrypointsItem2.Qos != nil {
						entrypoints2.Qos = types.StringValue(string(*entrypointsItem2.Qos))
					} else {
						entrypoints2.Qos = types.StringNull()
					}
					entrypoints2.Type = types.StringValue(entrypointsItem2.Type)
					if entrypointsCount2+1 > len(listeners.Subscription.Entrypoints) {
						listeners.Subscription.Entrypoints = append(listeners.Subscription.Entrypoints, entrypoints2)
					} else {
						listeners.Subscription.Entrypoints[entrypointsCount2].Configuration = entrypoints2.Configuration
						listeners.Subscription.Entrypoints[entrypointsCount2].Dlq = entrypoints2.Dlq
						listeners.Subscription.Entrypoints[entrypointsCount2].Qos = entrypoints2.Qos
						listeners.Subscription.Entrypoints[entrypointsCount2].Type = entrypoints2.Type
					}
				}
				listeners.Subscription.Servers = make([]types.String, 0, len(listenersItem.SubscriptionListener.Servers))
				for _, v := range listenersItem.SubscriptionListener.Servers {
					listeners.Subscription.Servers = append(listeners.Subscription.Servers, types.StringValue(v))
				}
				listeners.Subscription.Type = types.StringValue(string(listenersItem.SubscriptionListener.Type))
			}
			if listenersItem.TCPListener != nil {
				listeners.TCP = &tfTypes.TCPListener{}
				listeners.TCP.Entrypoints = []tfTypes.Entrypoint{}
				for entrypointsCount3, entrypointsItem3 := range listenersItem.TCPListener.Entrypoints {
					var entrypoints3 tfTypes.Entrypoint
					if entrypointsItem3.Configuration == nil {
						entrypoints3.Configuration = types.StringNull()
					} else {
						configurationResult13, _ := json.Marshal(entrypointsItem3.Configuration)
						entrypoints3.Configuration = types.StringValue(string(configurationResult13))
					}
					if entrypointsItem3.Dlq == nil {
						entrypoints3.Dlq = nil
					} else {
						entrypoints3.Dlq = &tfTypes.Dlq{}
						entrypoints3.Dlq.Endpoint = types.StringPointerValue(entrypointsItem3.Dlq.Endpoint)
					}
					if entrypointsItem3.Qos != nil {
						entrypoints3.Qos = types.StringValue(string(*entrypointsItem3.Qos))
					} else {
						entrypoints3.Qos = types.StringNull()
					}
					entrypoints3.Type = types.StringValue(entrypointsItem3.Type)
					if entrypointsCount3+1 > len(listeners.TCP.Entrypoints) {
						listeners.TCP.Entrypoints = append(listeners.TCP.Entrypoints, entrypoints3)
					} else {
						listeners.TCP.Entrypoints[entrypointsCount3].Configuration = entrypoints3.Configuration
						listeners.TCP.Entrypoints[entrypointsCount3].Dlq = entrypoints3.Dlq
						listeners.TCP.Entrypoints[entrypointsCount3].Qos = entrypoints3.Qos
						listeners.TCP.Entrypoints[entrypointsCount3].Type = entrypoints3.Type
					}
				}
				listeners.TCP.Hosts = make([]types.String, 0, len(listenersItem.TCPListener.Hosts))
				for _, v := range listenersItem.TCPListener.Hosts {
					listeners.TCP.Hosts = append(listeners.TCP.Hosts, types.StringValue(v))
				}
				listeners.TCP.Servers = make([]types.String, 0, len(listenersItem.TCPListener.Servers))
				for _, v := range listenersItem.TCPListener.Servers {
					listeners.TCP.Servers = append(listeners.TCP.Servers, types.StringValue(v))
				}
				listeners.TCP.Type = types.StringValue(string(listenersItem.TCPListener.Type))
			}
			if listenersCount+1 > len(r.Listeners) {
				r.Listeners = append(r.Listeners, listeners)
			} else {
				r.Listeners[listenersCount].HTTP = listeners.HTTP
				r.Listeners[listenersCount].Kafka = listeners.Kafka
				r.Listeners[listenersCount].Subscription = listeners.Subscription
				r.Listeners[listenersCount].TCP = listeners.TCP
			}
		}
		r.Members = []tfTypes.Member{}
		if len(r.Members) > len(resp.Members) {
			r.Members = r.Members[:len(resp.Members)]
		}
		for membersCount, membersItem := range resp.Members {
			var members tfTypes.Member
			members.ID = types.StringPointerValue(membersItem.ID)
			members.Role = types.StringPointerValue(membersItem.Role)
			members.Source = types.StringPointerValue(membersItem.Source)
			members.SourceID = types.StringPointerValue(membersItem.SourceID)
			if membersCount+1 > len(r.Members) {
				r.Members = append(r.Members, members)
			} else {
				r.Members[membersCount].ID = members.ID
				r.Members[membersCount].Role = members.Role
				r.Members[membersCount].Source = members.Source
				r.Members[membersCount].SourceID = members.SourceID
			}
		}
		r.Metadata = []tfTypes.Metadata{}
		if len(r.Metadata) > len(resp.Metadata) {
			r.Metadata = r.Metadata[:len(resp.Metadata)]
		}
		for metadataCount, metadataItem := range resp.Metadata {
			var metadata tfTypes.Metadata
			metadata.DefaultValue = types.StringPointerValue(metadataItem.DefaultValue)
			if metadataItem.Format != nil {
				metadata.Format = types.StringValue(string(*metadataItem.Format))
			} else {
				metadata.Format = types.StringNull()
			}
			metadata.Key = types.StringPointerValue(metadataItem.Key)
			metadata.Name = types.StringPointerValue(metadataItem.Name)
			metadata.Value = types.StringPointerValue(metadataItem.Value)
			if metadataCount+1 > len(r.Metadata) {
				r.Metadata = append(r.Metadata, metadata)
			} else {
				r.Metadata[metadataCount].DefaultValue = metadata.DefaultValue
				r.Metadata[metadataCount].Format = metadata.Format
				r.Metadata[metadataCount].Key = metadata.Key
				r.Metadata[metadataCount].Name = metadata.Name
				r.Metadata[metadataCount].Value = metadata.Value
			}
		}
		r.Name = types.StringValue(resp.Name)
		if len(resp.Plans) > 0 {
			r.Plans = make(map[string]tfTypes.Plan, len(resp.Plans))
			for planKey, planValue := range resp.Plans {
				var planResult tfTypes.Plan
				planResult.Characteristics = make([]types.String, 0, len(planValue.Characteristics))
				for _, v := range planValue.Characteristics {
					planResult.Characteristics = append(planResult.Characteristics, types.StringValue(v))
				}
				planResult.CrossID = types.StringPointerValue(planValue.CrossID)
				planResult.Description = types.StringPointerValue(planValue.Description)
				planResult.ExcludedGroups = make([]types.String, 0, len(planValue.ExcludedGroups))
				for _, v := range planValue.ExcludedGroups {
					planResult.ExcludedGroups = append(planResult.ExcludedGroups, types.StringValue(v))
				}
				planResult.Flows = []tfTypes.FlowV4{}
				for flowsCount1, flowsItem1 := range planValue.Flows {
					var flows1 tfTypes.FlowV4
					flows1.Connect = []tfTypes.StepV4{}
					for connectCount1, connectItem1 := range flowsItem1.Connect {
						var connect1 tfTypes.StepV4
						connect1.Condition = types.StringPointerValue(connectItem1.Condition)
						if connectItem1.Configuration == nil {
							connect1.Configuration = types.StringNull()
						} else {
							configurationResult14, _ := json.Marshal(connectItem1.Configuration)
							connect1.Configuration = types.StringValue(string(configurationResult14))
						}
						connect1.Description = types.StringPointerValue(connectItem1.Description)
						connect1.Enabled = types.BoolPointerValue(connectItem1.Enabled)
						connect1.MessageCondition = types.StringPointerValue(connectItem1.MessageCondition)
						connect1.Name = types.StringPointerValue(connectItem1.Name)
						connect1.Policy = types.StringPointerValue(connectItem1.Policy)
						if connectCount1+1 > len(flows1.Connect) {
							flows1.Connect = append(flows1.Connect, connect1)
						} else {
							flows1.Connect[connectCount1].Condition = connect1.Condition
							flows1.Connect[connectCount1].Configuration = connect1.Configuration
							flows1.Connect[connectCount1].Description = connect1.Description
							flows1.Connect[connectCount1].Enabled = connect1.Enabled
							flows1.Connect[connectCount1].MessageCondition = connect1.MessageCondition
							flows1.Connect[connectCount1].Name = connect1.Name
							flows1.Connect[connectCount1].Policy = connect1.Policy
						}
					}
					flows1.Enabled = types.BoolPointerValue(flowsItem1.Enabled)
					flows1.ID = types.StringPointerValue(flowsItem1.ID)
					flows1.Interact = []tfTypes.StepV4{}
					for interactCount1, interactItem1 := range flowsItem1.Interact {
						var interact1 tfTypes.StepV4
						interact1.Condition = types.StringPointerValue(interactItem1.Condition)
						if interactItem1.Configuration == nil {
							interact1.Configuration = types.StringNull()
						} else {
							configurationResult15, _ := json.Marshal(interactItem1.Configuration)
							interact1.Configuration = types.StringValue(string(configurationResult15))
						}
						interact1.Description = types.StringPointerValue(interactItem1.Description)
						interact1.Enabled = types.BoolPointerValue(interactItem1.Enabled)
						interact1.MessageCondition = types.StringPointerValue(interactItem1.MessageCondition)
						interact1.Name = types.StringPointerValue(interactItem1.Name)
						interact1.Policy = types.StringPointerValue(interactItem1.Policy)
						if interactCount1+1 > len(flows1.Interact) {
							flows1.Interact = append(flows1.Interact, interact1)
						} else {
							flows1.Interact[interactCount1].Condition = interact1.Condition
							flows1.Interact[interactCount1].Configuration = interact1.Configuration
							flows1.Interact[interactCount1].Description = interact1.Description
							flows1.Interact[interactCount1].Enabled = interact1.Enabled
							flows1.Interact[interactCount1].MessageCondition = interact1.MessageCondition
							flows1.Interact[interactCount1].Name = interact1.Name
							flows1.Interact[interactCount1].Policy = interact1.Policy
						}
					}
					flows1.Name = types.StringPointerValue(flowsItem1.Name)
					flows1.Publish = []tfTypes.StepV4{}
					for publishCount1, publishItem1 := range flowsItem1.Publish {
						var publish1 tfTypes.StepV4
						publish1.Condition = types.StringPointerValue(publishItem1.Condition)
						if publishItem1.Configuration == nil {
							publish1.Configuration = types.StringNull()
						} else {
							configurationResult16, _ := json.Marshal(publishItem1.Configuration)
							publish1.Configuration = types.StringValue(string(configurationResult16))
						}
						publish1.Description = types.StringPointerValue(publishItem1.Description)
						publish1.Enabled = types.BoolPointerValue(publishItem1.Enabled)
						publish1.MessageCondition = types.StringPointerValue(publishItem1.MessageCondition)
						publish1.Name = types.StringPointerValue(publishItem1.Name)
						publish1.Policy = types.StringPointerValue(publishItem1.Policy)
						if publishCount1+1 > len(flows1.Publish) {
							flows1.Publish = append(flows1.Publish, publish1)
						} else {
							flows1.Publish[publishCount1].Condition = publish1.Condition
							flows1.Publish[publishCount1].Configuration = publish1.Configuration
							flows1.Publish[publishCount1].Description = publish1.Description
							flows1.Publish[publishCount1].Enabled = publish1.Enabled
							flows1.Publish[publishCount1].MessageCondition = publish1.MessageCondition
							flows1.Publish[publishCount1].Name = publish1.Name
							flows1.Publish[publishCount1].Policy = publish1.Policy
						}
					}
					flows1.Request = []tfTypes.StepV4{}
					for requestCount1, requestItem1 := range flowsItem1.Request {
						var request1 tfTypes.StepV4
						request1.Condition = types.StringPointerValue(requestItem1.Condition)
						if requestItem1.Configuration == nil {
							request1.Configuration = types.StringNull()
						} else {
							configurationResult17, _ := json.Marshal(requestItem1.Configuration)
							request1.Configuration = types.StringValue(string(configurationResult17))
						}
						request1.Description = types.StringPointerValue(requestItem1.Description)
						request1.Enabled = types.BoolPointerValue(requestItem1.Enabled)
						request1.MessageCondition = types.StringPointerValue(requestItem1.MessageCondition)
						request1.Name = types.StringPointerValue(requestItem1.Name)
						request1.Policy = types.StringPointerValue(requestItem1.Policy)
						if requestCount1+1 > len(flows1.Request) {
							flows1.Request = append(flows1.Request, request1)
						} else {
							flows1.Request[requestCount1].Condition = request1.Condition
							flows1.Request[requestCount1].Configuration = request1.Configuration
							flows1.Request[requestCount1].Description = request1.Description
							flows1.Request[requestCount1].Enabled = request1.Enabled
							flows1.Request[requestCount1].MessageCondition = request1.MessageCondition
							flows1.Request[requestCount1].Name = request1.Name
							flows1.Request[requestCount1].Policy = request1.Policy
						}
					}
					flows1.Response = []tfTypes.StepV4{}
					for responseCount1, responseItem1 := range flowsItem1.Response {
						var response1 tfTypes.StepV4
						response1.Condition = types.StringPointerValue(responseItem1.Condition)
						if responseItem1.Configuration == nil {
							response1.Configuration = types.StringNull()
						} else {
							configurationResult18, _ := json.Marshal(responseItem1.Configuration)
							response1.Configuration = types.StringValue(string(configurationResult18))
						}
						response1.Description = types.StringPointerValue(responseItem1.Description)
						response1.Enabled = types.BoolPointerValue(responseItem1.Enabled)
						response1.MessageCondition = types.StringPointerValue(responseItem1.MessageCondition)
						response1.Name = types.StringPointerValue(responseItem1.Name)
						response1.Policy = types.StringPointerValue(responseItem1.Policy)
						if responseCount1+1 > len(flows1.Response) {
							flows1.Response = append(flows1.Response, response1)
						} else {
							flows1.Response[responseCount1].Condition = response1.Condition
							flows1.Response[responseCount1].Configuration = response1.Configuration
							flows1.Response[responseCount1].Description = response1.Description
							flows1.Response[responseCount1].Enabled = response1.Enabled
							flows1.Response[responseCount1].MessageCondition = response1.MessageCondition
							flows1.Response[responseCount1].Name = response1.Name
							flows1.Response[responseCount1].Policy = response1.Policy
						}
					}
					flows1.Selectors = []tfTypes.Selector{}
					for selectorsCount1, selectorsItem1 := range flowsItem1.Selectors {
						var selectors1 tfTypes.Selector
						if selectorsItem1.ChannelSelector != nil {
							selectors1.Channel = &tfTypes.ChannelSelector{}
							selectors1.Channel.Channel = types.StringPointerValue(selectorsItem1.ChannelSelector.Channel)
							if selectorsItem1.ChannelSelector.ChannelOperator != nil {
								selectors1.Channel.ChannelOperator = types.StringValue(string(*selectorsItem1.ChannelSelector.ChannelOperator))
							} else {
								selectors1.Channel.ChannelOperator = types.StringNull()
							}
							selectors1.Channel.Entrypoints = make([]types.String, 0, len(selectorsItem1.ChannelSelector.Entrypoints))
							for _, v := range selectorsItem1.ChannelSelector.Entrypoints {
								selectors1.Channel.Entrypoints = append(selectors1.Channel.Entrypoints, types.StringValue(v))
							}
							selectors1.Channel.Operations = make([]types.String, 0, len(selectorsItem1.ChannelSelector.Operations))
							for _, v := range selectorsItem1.ChannelSelector.Operations {
								selectors1.Channel.Operations = append(selectors1.Channel.Operations, types.StringValue(string(v)))
							}
							selectors1.Channel.Type = types.StringValue(string(selectorsItem1.ChannelSelector.Type))
						}
						if selectorsItem1.ConditionSelector != nil {
							selectors1.Condition = &tfTypes.ConditionSelector{}
							selectors1.Condition.Condition = types.StringValue(selectorsItem1.ConditionSelector.Condition)
							selectors1.Condition.Type = types.StringValue(string(selectorsItem1.ConditionSelector.Type))
						}
						if selectorsItem1.HTTPSelector != nil {
							selectors1.HTTP = &tfTypes.HTTPSelector{}
							selectors1.HTTP.Methods = make([]types.String, 0, len(selectorsItem1.HTTPSelector.Methods))
							for _, v := range selectorsItem1.HTTPSelector.Methods {
								selectors1.HTTP.Methods = append(selectors1.HTTP.Methods, types.StringValue(string(v)))
							}
							selectors1.HTTP.Path = types.StringPointerValue(selectorsItem1.HTTPSelector.Path)
							if selectorsItem1.HTTPSelector.PathOperator != nil {
								selectors1.HTTP.PathOperator = types.StringValue(string(*selectorsItem1.HTTPSelector.PathOperator))
							} else {
								selectors1.HTTP.PathOperator = types.StringNull()
							}
							selectors1.HTTP.Type = types.StringValue(string(selectorsItem1.HTTPSelector.Type))
						}
						if selectorsCount1+1 > len(flows1.Selectors) {
							flows1.Selectors = append(flows1.Selectors, selectors1)
						} else {
							flows1.Selectors[selectorsCount1].Channel = selectors1.Channel
							flows1.Selectors[selectorsCount1].Condition = selectors1.Condition
							flows1.Selectors[selectorsCount1].HTTP = selectors1.HTTP
						}
					}
					flows1.Subscribe = []tfTypes.StepV4{}
					for subscribeCount1, subscribeItem1 := range flowsItem1.Subscribe {
						var subscribe1 tfTypes.StepV4
						subscribe1.Condition = types.StringPointerValue(subscribeItem1.Condition)
						if subscribeItem1.Configuration == nil {
							subscribe1.Configuration = types.StringNull()
						} else {
							configurationResult19, _ := json.Marshal(subscribeItem1.Configuration)
							subscribe1.Configuration = types.StringValue(string(configurationResult19))
						}
						subscribe1.Description = types.StringPointerValue(subscribeItem1.Description)
						subscribe1.Enabled = types.BoolPointerValue(subscribeItem1.Enabled)
						subscribe1.MessageCondition = types.StringPointerValue(subscribeItem1.MessageCondition)
						subscribe1.Name = types.StringPointerValue(subscribeItem1.Name)
						subscribe1.Policy = types.StringPointerValue(subscribeItem1.Policy)
						if subscribeCount1+1 > len(flows1.Subscribe) {
							flows1.Subscribe = append(flows1.Subscribe, subscribe1)
						} else {
							flows1.Subscribe[subscribeCount1].Condition = subscribe1.Condition
							flows1.Subscribe[subscribeCount1].Configuration = subscribe1.Configuration
							flows1.Subscribe[subscribeCount1].Description = subscribe1.Description
							flows1.Subscribe[subscribeCount1].Enabled = subscribe1.Enabled
							flows1.Subscribe[subscribeCount1].MessageCondition = subscribe1.MessageCondition
							flows1.Subscribe[subscribeCount1].Name = subscribe1.Name
							flows1.Subscribe[subscribeCount1].Policy = subscribe1.Policy
						}
					}
					flows1.Tags = make([]types.String, 0, len(flowsItem1.Tags))
					for _, v := range flowsItem1.Tags {
						flows1.Tags = append(flows1.Tags, types.StringValue(v))
					}
					if flowsCount1+1 > len(planResult.Flows) {
						planResult.Flows = append(planResult.Flows, flows1)
					} else {
						planResult.Flows[flowsCount1].Connect = flows1.Connect
						planResult.Flows[flowsCount1].Enabled = flows1.Enabled
						planResult.Flows[flowsCount1].ID = flows1.ID
						planResult.Flows[flowsCount1].Interact = flows1.Interact
						planResult.Flows[flowsCount1].Name = flows1.Name
						planResult.Flows[flowsCount1].Publish = flows1.Publish
						planResult.Flows[flowsCount1].Request = flows1.Request
						planResult.Flows[flowsCount1].Response = flows1.Response
						planResult.Flows[flowsCount1].Selectors = flows1.Selectors
						planResult.Flows[flowsCount1].Subscribe = flows1.Subscribe
						planResult.Flows[flowsCount1].Tags = flows1.Tags
					}
				}
				planResult.GeneralConditions = types.StringPointerValue(planValue.GeneralConditions)
				planResult.ID = types.StringPointerValue(planValue.ID)
				planResult.Mode = types.StringValue(string(planValue.Mode))
				planResult.Name = types.StringPointerValue(planValue.Name)
				if planValue.Security == nil {
					planResult.Security = nil
				} else {
					planResult.Security = &tfTypes.PlanSecurity{}
					if planValue.Security.Configuration == nil {
						planResult.Security.Configuration = types.StringNull()
					} else {
						configurationResult20, _ := json.Marshal(planValue.Security.Configuration)
						planResult.Security.Configuration = types.StringValue(string(configurationResult20))
					}
					planResult.Security.Type = types.StringValue(string(planValue.Security.Type))
				}
				planResult.SelectionRule = types.StringPointerValue(planValue.SelectionRule)
				planResult.Status = types.StringValue(string(planValue.Status))
				planResult.Tags = make([]types.String, 0, len(planValue.Tags))
				for _, v := range planValue.Tags {
					planResult.Tags = append(planResult.Tags, types.StringValue(v))
				}
				planResult.Type = types.StringValue(string(planValue.Type))
				if planValue.Validation != nil {
					planResult.Validation = types.StringValue(string(*planValue.Validation))
				} else {
					planResult.Validation = types.StringNull()
				}

				r.Plans[planKey] = planResult
			}
		}
		if resp.PrimaryOwner == nil {
			r.PrimaryOwner = nil
		} else {
			r.PrimaryOwner = &tfTypes.PrimaryOwner{}
			r.PrimaryOwner.DisplayName = types.StringPointerValue(resp.PrimaryOwner.DisplayName)
			r.PrimaryOwner.Email = types.StringPointerValue(resp.PrimaryOwner.Email)
			r.PrimaryOwner.ID = types.StringPointerValue(resp.PrimaryOwner.ID)
			if resp.PrimaryOwner.Type != nil {
				r.PrimaryOwner.Type = types.StringValue(string(*resp.PrimaryOwner.Type))
			} else {
				r.PrimaryOwner.Type = types.StringNull()
			}
		}
		r.Properties = []tfTypes.Property1{}
		if len(r.Properties) > len(resp.Properties) {
			r.Properties = r.Properties[:len(resp.Properties)]
		}
		for propertiesCount, propertiesItem := range resp.Properties {
			var properties tfTypes.Property1
			properties.Dynamic = types.BoolPointerValue(propertiesItem.Dynamic)
			properties.Encrypted = types.BoolPointerValue(propertiesItem.Encrypted)
			properties.Key = types.StringValue(propertiesItem.Key)
			properties.Value = types.StringValue(propertiesItem.Value)
			if propertiesCount+1 > len(r.Properties) {
				r.Properties = append(r.Properties, properties)
			} else {
				r.Properties[propertiesCount].Dynamic = properties.Dynamic
				r.Properties[propertiesCount].Encrypted = properties.Encrypted
				r.Properties[propertiesCount].Key = properties.Key
				r.Properties[propertiesCount].Value = properties.Value
			}
		}
		r.Resources = []tfTypes.Resource{}
		if len(r.Resources) > len(resp.Resources) {
			r.Resources = r.Resources[:len(resp.Resources)]
		}
		for resourcesCount, resourcesItem := range resp.Resources {
			var resources tfTypes.Resource
			configurationResult21, _ := json.Marshal(resourcesItem.Configuration)
			resources.Configuration = types.StringValue(string(configurationResult21))
			resources.Enabled = types.BoolPointerValue(resourcesItem.Enabled)
			resources.Name = types.StringValue(resourcesItem.Name)
			resources.Type = types.StringValue(resourcesItem.Type)
			if resourcesCount+1 > len(r.Resources) {
				r.Resources = append(r.Resources, resources)
			} else {
				r.Resources[resourcesCount].Configuration = resources.Configuration
				r.Resources[resourcesCount].Enabled = resources.Enabled
				r.Resources[resourcesCount].Name = resources.Name
				r.Resources[resourcesCount].Type = resources.Type
			}
		}
		if len(resp.ResponseTemplates) > 0 {
			r.ResponseTemplates = make(map[string]map[string]tfTypes.ResponseTemplate, len(resp.ResponseTemplates))
			for responseTemplatesKey, responseTemplatesValue := range resp.ResponseTemplates {
				var responseTemplatesResult map[string]tfTypes.ResponseTemplate
				if len(responseTemplatesValue) > 0 {
					responseTemplatesResult = make(map[string]tfTypes.ResponseTemplate, len(responseTemplatesValue))
					for responseTemplateKey, responseTemplateValue := range responseTemplatesValue {
						var responseTemplateResult tfTypes.ResponseTemplate
						responseTemplateResult.Body = types.StringPointerValue(responseTemplateValue.Body)
						if len(responseTemplateValue.Headers) > 0 {
							responseTemplateResult.Headers = make(map[string]types.String, len(responseTemplateValue.Headers))
							for key, value := range responseTemplateValue.Headers {
								responseTemplateResult.Headers[key] = types.StringValue(value)
							}
						}
						responseTemplateResult.PropagateErrorKeyToLogs = types.BoolPointerValue(responseTemplateValue.PropagateErrorKeyToLogs)
						responseTemplateResult.Status = types.Int64PointerValue(responseTemplateValue.Status)

						responseTemplatesResult[responseTemplateKey] = responseTemplateResult
					}
				}

				r.ResponseTemplates[responseTemplatesKey] = responseTemplatesResult
			}
		}
		if resp.Services == nil {
			r.Services = nil
		} else {
			r.Services = &tfTypes.APIServices{}
			if resp.Services.DynamicProperty == nil {
				r.Services.DynamicProperty = nil
			} else {
				r.Services.DynamicProperty = &tfTypes.ServiceV4{}
				if resp.Services.DynamicProperty.Configuration == nil {
					r.Services.DynamicProperty.Configuration = types.StringNull()
				} else {
					configurationResult22, _ := json.Marshal(resp.Services.DynamicProperty.Configuration)
					r.Services.DynamicProperty.Configuration = types.StringValue(string(configurationResult22))
				}
				r.Services.DynamicProperty.Enabled = types.BoolPointerValue(resp.Services.DynamicProperty.Enabled)
				r.Services.DynamicProperty.OverrideConfiguration = types.BoolPointerValue(resp.Services.DynamicProperty.OverrideConfiguration)
				r.Services.DynamicProperty.Type = types.StringPointerValue(resp.Services.DynamicProperty.Type)
			}
		}
		if resp.State != nil {
			r.State = types.StringValue(string(*resp.State))
		} else {
			r.State = types.StringNull()
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.Type = types.StringValue(string(resp.Type))
		r.Version = types.StringValue(resp.Version)
		if resp.Visibility != nil {
			r.Visibility = types.StringValue(string(*resp.Visibility))
		} else {
			r.Visibility = types.StringNull()
		}
	}

	return diags
}

func (r *Apiv4DataSourceModel) ToOperationsGetAPIRequest(ctx context.Context) (*operations.GetAPIRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	var hrid string
	hrid = r.Hrid.ValueString()

	out := operations.GetAPIRequest{
		OrganizationID: organizationID,
		EnvironmentID:  environmentID,
		Hrid:           hrid,
	}

	return &out, diags
}
