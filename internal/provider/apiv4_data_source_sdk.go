// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/gravitee-io/terraform-provider-apim/internal/provider/typeconvert"
	tfTypes "github.com/gravitee-io/terraform-provider-apim/internal/provider/types"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/operations"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *Apiv4DataSourceModel) RefreshFromSharedApiv4State(ctx context.Context, resp *shared.APIV4State) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Analytics == nil {
			r.Analytics = nil
		} else {
			r.Analytics = &tfTypes.Analytics{}
			r.Analytics.Enabled = types.BoolPointerValue(resp.Analytics.Enabled)
			if resp.Analytics.Logging == nil {
				r.Analytics.Logging = nil
			} else {
				r.Analytics.Logging = &tfTypes.LoggingV4{}
				r.Analytics.Logging.Condition = types.StringPointerValue(resp.Analytics.Logging.Condition)
				if resp.Analytics.Logging.Content == nil {
					r.Analytics.Logging.Content = nil
				} else {
					r.Analytics.Logging.Content = &tfTypes.LoggingContentV4{}
					r.Analytics.Logging.Content.Headers = types.BoolPointerValue(resp.Analytics.Logging.Content.Headers)
					r.Analytics.Logging.Content.MessageHeaders = types.BoolPointerValue(resp.Analytics.Logging.Content.MessageHeaders)
					r.Analytics.Logging.Content.MessageMetadata = types.BoolPointerValue(resp.Analytics.Logging.Content.MessageMetadata)
					r.Analytics.Logging.Content.MessagePayload = types.BoolPointerValue(resp.Analytics.Logging.Content.MessagePayload)
					r.Analytics.Logging.Content.Payload = types.BoolPointerValue(resp.Analytics.Logging.Content.Payload)
				}
				r.Analytics.Logging.MessageCondition = types.StringPointerValue(resp.Analytics.Logging.MessageCondition)
				if resp.Analytics.Logging.Mode == nil {
					r.Analytics.Logging.Mode = nil
				} else {
					r.Analytics.Logging.Mode = &tfTypes.LoggingModeV4{}
					r.Analytics.Logging.Mode.Endpoint = types.BoolPointerValue(resp.Analytics.Logging.Mode.Endpoint)
					r.Analytics.Logging.Mode.Entrypoint = types.BoolPointerValue(resp.Analytics.Logging.Mode.Entrypoint)
				}
				if resp.Analytics.Logging.Phase == nil {
					r.Analytics.Logging.Phase = nil
				} else {
					r.Analytics.Logging.Phase = &tfTypes.LoggingPhase{}
					r.Analytics.Logging.Phase.Request = types.BoolPointerValue(resp.Analytics.Logging.Phase.Request)
					r.Analytics.Logging.Phase.Response = types.BoolPointerValue(resp.Analytics.Logging.Phase.Response)
				}
			}
			if resp.Analytics.Sampling == nil {
				r.Analytics.Sampling = nil
			} else {
				r.Analytics.Sampling = &tfTypes.Sampling{}
				r.Analytics.Sampling.Type = types.StringValue(string(resp.Analytics.Sampling.Type))
				r.Analytics.Sampling.Value = types.StringPointerValue(resp.Analytics.Sampling.Value)
			}
			if resp.Analytics.Tracing == nil {
				r.Analytics.Tracing = nil
			} else {
				r.Analytics.Tracing = &tfTypes.TracingV4{}
				r.Analytics.Tracing.Enabled = types.BoolPointerValue(resp.Analytics.Tracing.Enabled)
				r.Analytics.Tracing.Verbose = types.BoolPointerValue(resp.Analytics.Tracing.Verbose)
			}
		}
		r.Categories = make([]types.String, 0, len(resp.Categories))
		for _, v := range resp.Categories {
			r.Categories = append(r.Categories, types.StringValue(v))
		}
		r.CrossID = types.StringPointerValue(resp.CrossID)
		r.Description = types.StringPointerValue(resp.Description)
		r.EndpointGroups = []tfTypes.EndpointGroupV4{}

		for _, endpointGroupsItem := range resp.EndpointGroups {
			var endpointGroups tfTypes.EndpointGroupV4

			endpointGroups.Endpoints = []tfTypes.EndpointV4{}

			for _, endpointsItem := range endpointGroupsItem.Endpoints {
				var endpoints tfTypes.EndpointV4

				if endpointsItem.Configuration == nil {
					endpoints.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult, _ := json.Marshal(endpointsItem.Configuration)
					endpoints.Configuration = jsontypes.NewNormalizedValue(string(configurationResult))
				}
				endpoints.InheritConfiguration = types.BoolPointerValue(endpointsItem.InheritConfiguration)
				endpoints.Name = types.StringPointerValue(endpointsItem.Name)
				endpoints.Secondary = types.BoolPointerValue(endpointsItem.Secondary)
				if endpointsItem.Services == nil {
					endpoints.Services = nil
				} else {
					endpoints.Services = &tfTypes.EndpointServices{}
					if endpointsItem.Services.HealthCheck == nil {
						endpoints.Services.HealthCheck = nil
					} else {
						endpoints.Services.HealthCheck = &tfTypes.ServiceV4{}
						configurationResult1, _ := json.Marshal(endpointsItem.Services.HealthCheck.Configuration)
						endpoints.Services.HealthCheck.Configuration = jsontypes.NewNormalizedValue(string(configurationResult1))
						endpoints.Services.HealthCheck.Enabled = types.BoolPointerValue(endpointsItem.Services.HealthCheck.Enabled)
						endpoints.Services.HealthCheck.OverrideConfiguration = types.BoolPointerValue(endpointsItem.Services.HealthCheck.OverrideConfiguration)
						endpoints.Services.HealthCheck.Type = types.StringValue(endpointsItem.Services.HealthCheck.Type)
					}
				}
				if endpointsItem.SharedConfigurationOverride == nil {
					endpoints.SharedConfigurationOverride = jsontypes.NewNormalizedNull()
				} else {
					sharedConfigurationOverrideResult, _ := json.Marshal(endpointsItem.SharedConfigurationOverride)
					endpoints.SharedConfigurationOverride = jsontypes.NewNormalizedValue(string(sharedConfigurationOverrideResult))
				}
				endpoints.Tenants = make([]types.String, 0, len(endpointsItem.Tenants))
				for _, v := range endpointsItem.Tenants {
					endpoints.Tenants = append(endpoints.Tenants, types.StringValue(v))
				}
				endpoints.Type = types.StringValue(endpointsItem.Type)
				endpoints.Weight = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(endpointsItem.Weight))

				endpointGroups.Endpoints = append(endpointGroups.Endpoints, endpoints)
			}
			if endpointGroupsItem.LoadBalancer == nil {
				endpointGroups.LoadBalancer = nil
			} else {
				endpointGroups.LoadBalancer = &tfTypes.LoadBalancer{}
				if endpointGroupsItem.LoadBalancer.Type != nil {
					endpointGroups.LoadBalancer.Type = types.StringValue(string(*endpointGroupsItem.LoadBalancer.Type))
				} else {
					endpointGroups.LoadBalancer.Type = types.StringNull()
				}
			}
			endpointGroups.Name = types.StringPointerValue(endpointGroupsItem.Name)
			if endpointGroupsItem.Services == nil {
				endpointGroups.Services = nil
			} else {
				endpointGroups.Services = &tfTypes.EndpointGroupServices{}
				if endpointGroupsItem.Services.Discovery == nil {
					endpointGroups.Services.Discovery = nil
				} else {
					endpointGroups.Services.Discovery = &tfTypes.ServiceV4{}
					configurationResult2, _ := json.Marshal(endpointGroupsItem.Services.Discovery.Configuration)
					endpointGroups.Services.Discovery.Configuration = jsontypes.NewNormalizedValue(string(configurationResult2))
					endpointGroups.Services.Discovery.Enabled = types.BoolPointerValue(endpointGroupsItem.Services.Discovery.Enabled)
					endpointGroups.Services.Discovery.OverrideConfiguration = types.BoolPointerValue(endpointGroupsItem.Services.Discovery.OverrideConfiguration)
					endpointGroups.Services.Discovery.Type = types.StringValue(endpointGroupsItem.Services.Discovery.Type)
				}
				if endpointGroupsItem.Services.HealthCheck == nil {
					endpointGroups.Services.HealthCheck = nil
				} else {
					endpointGroups.Services.HealthCheck = &tfTypes.ServiceV4{}
					configurationResult3, _ := json.Marshal(endpointGroupsItem.Services.HealthCheck.Configuration)
					endpointGroups.Services.HealthCheck.Configuration = jsontypes.NewNormalizedValue(string(configurationResult3))
					endpointGroups.Services.HealthCheck.Enabled = types.BoolPointerValue(endpointGroupsItem.Services.HealthCheck.Enabled)
					endpointGroups.Services.HealthCheck.OverrideConfiguration = types.BoolPointerValue(endpointGroupsItem.Services.HealthCheck.OverrideConfiguration)
					endpointGroups.Services.HealthCheck.Type = types.StringValue(endpointGroupsItem.Services.HealthCheck.Type)
				}
			}
			if endpointGroupsItem.SharedConfiguration == nil {
				endpointGroups.SharedConfiguration = jsontypes.NewNormalizedNull()
			} else {
				sharedConfigurationResult, _ := json.Marshal(endpointGroupsItem.SharedConfiguration)
				endpointGroups.SharedConfiguration = jsontypes.NewNormalizedValue(string(sharedConfigurationResult))
			}
			endpointGroups.Type = types.StringValue(endpointGroupsItem.Type)

			r.EndpointGroups = append(r.EndpointGroups, endpointGroups)
		}
		if resp.Failover == nil {
			r.Failover = nil
		} else {
			r.Failover = &tfTypes.FailoverV4{}
			r.Failover.Enabled = types.BoolPointerValue(resp.Failover.Enabled)
			r.Failover.MaxFailures = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Failover.MaxFailures))
			r.Failover.MaxRetries = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Failover.MaxRetries))
			r.Failover.OpenStateDuration = types.Int64PointerValue(resp.Failover.OpenStateDuration)
			r.Failover.PerSubscription = types.BoolPointerValue(resp.Failover.PerSubscription)
			r.Failover.SlowCallDuration = types.Int64PointerValue(resp.Failover.SlowCallDuration)
		}
		if resp.FlowExecution == nil {
			r.FlowExecution = nil
		} else {
			r.FlowExecution = &tfTypes.FlowExecution{}
			r.FlowExecution.MatchRequired = types.BoolPointerValue(resp.FlowExecution.MatchRequired)
			if resp.FlowExecution.Mode != nil {
				r.FlowExecution.Mode = types.StringValue(string(*resp.FlowExecution.Mode))
			} else {
				r.FlowExecution.Mode = types.StringNull()
			}
		}
		r.Flows = []tfTypes.FlowV4{}

		for _, flowsItem := range resp.Flows {
			var flows tfTypes.FlowV4

			flows.Connect = []tfTypes.StepV4{}

			for _, connectItem := range flowsItem.Connect {
				var connect tfTypes.StepV4

				connect.Condition = types.StringPointerValue(connectItem.Condition)
				if connectItem.Configuration == nil {
					connect.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult4, _ := json.Marshal(connectItem.Configuration)
					connect.Configuration = jsontypes.NewNormalizedValue(string(configurationResult4))
				}
				connect.Description = types.StringPointerValue(connectItem.Description)
				connect.Enabled = types.BoolPointerValue(connectItem.Enabled)
				connect.MessageCondition = types.StringPointerValue(connectItem.MessageCondition)
				connect.Name = types.StringPointerValue(connectItem.Name)
				connect.Policy = types.StringValue(connectItem.Policy)

				flows.Connect = append(flows.Connect, connect)
			}
			flows.Enabled = types.BoolPointerValue(flowsItem.Enabled)
			flows.Interact = []tfTypes.StepV4{}

			for _, interactItem := range flowsItem.Interact {
				var interact tfTypes.StepV4

				interact.Condition = types.StringPointerValue(interactItem.Condition)
				if interactItem.Configuration == nil {
					interact.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult5, _ := json.Marshal(interactItem.Configuration)
					interact.Configuration = jsontypes.NewNormalizedValue(string(configurationResult5))
				}
				interact.Description = types.StringPointerValue(interactItem.Description)
				interact.Enabled = types.BoolPointerValue(interactItem.Enabled)
				interact.MessageCondition = types.StringPointerValue(interactItem.MessageCondition)
				interact.Name = types.StringPointerValue(interactItem.Name)
				interact.Policy = types.StringValue(interactItem.Policy)

				flows.Interact = append(flows.Interact, interact)
			}
			flows.Name = types.StringPointerValue(flowsItem.Name)
			flows.Publish = []tfTypes.StepV4{}

			for _, publishItem := range flowsItem.Publish {
				var publish tfTypes.StepV4

				publish.Condition = types.StringPointerValue(publishItem.Condition)
				if publishItem.Configuration == nil {
					publish.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult6, _ := json.Marshal(publishItem.Configuration)
					publish.Configuration = jsontypes.NewNormalizedValue(string(configurationResult6))
				}
				publish.Description = types.StringPointerValue(publishItem.Description)
				publish.Enabled = types.BoolPointerValue(publishItem.Enabled)
				publish.MessageCondition = types.StringPointerValue(publishItem.MessageCondition)
				publish.Name = types.StringPointerValue(publishItem.Name)
				publish.Policy = types.StringValue(publishItem.Policy)

				flows.Publish = append(flows.Publish, publish)
			}
			flows.Request = []tfTypes.StepV4{}

			for _, requestItem := range flowsItem.Request {
				var request tfTypes.StepV4

				request.Condition = types.StringPointerValue(requestItem.Condition)
				if requestItem.Configuration == nil {
					request.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult7, _ := json.Marshal(requestItem.Configuration)
					request.Configuration = jsontypes.NewNormalizedValue(string(configurationResult7))
				}
				request.Description = types.StringPointerValue(requestItem.Description)
				request.Enabled = types.BoolPointerValue(requestItem.Enabled)
				request.MessageCondition = types.StringPointerValue(requestItem.MessageCondition)
				request.Name = types.StringPointerValue(requestItem.Name)
				request.Policy = types.StringValue(requestItem.Policy)

				flows.Request = append(flows.Request, request)
			}
			flows.Response = []tfTypes.StepV4{}

			for _, responseItem := range flowsItem.Response {
				var response tfTypes.StepV4

				response.Condition = types.StringPointerValue(responseItem.Condition)
				if responseItem.Configuration == nil {
					response.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult8, _ := json.Marshal(responseItem.Configuration)
					response.Configuration = jsontypes.NewNormalizedValue(string(configurationResult8))
				}
				response.Description = types.StringPointerValue(responseItem.Description)
				response.Enabled = types.BoolPointerValue(responseItem.Enabled)
				response.MessageCondition = types.StringPointerValue(responseItem.MessageCondition)
				response.Name = types.StringPointerValue(responseItem.Name)
				response.Policy = types.StringValue(responseItem.Policy)

				flows.Response = append(flows.Response, response)
			}
			flows.Selectors = []tfTypes.Selector{}

			for _, selectorsItem := range flowsItem.Selectors {
				var selectors tfTypes.Selector

				if selectorsItem.ChannelSelector != nil {
					selectors.Channel = &tfTypes.ChannelSelector{}
					selectors.Channel.Channel = types.StringPointerValue(selectorsItem.ChannelSelector.Channel)
					if selectorsItem.ChannelSelector.ChannelOperator != nil {
						selectors.Channel.ChannelOperator = types.StringValue(string(*selectorsItem.ChannelSelector.ChannelOperator))
					} else {
						selectors.Channel.ChannelOperator = types.StringNull()
					}
					selectors.Channel.Entrypoints = make([]types.String, 0, len(selectorsItem.ChannelSelector.Entrypoints))
					for _, v := range selectorsItem.ChannelSelector.Entrypoints {
						selectors.Channel.Entrypoints = append(selectors.Channel.Entrypoints, types.StringValue(v))
					}
					selectors.Channel.Operations = make([]types.String, 0, len(selectorsItem.ChannelSelector.Operations))
					for _, v := range selectorsItem.ChannelSelector.Operations {
						selectors.Channel.Operations = append(selectors.Channel.Operations, types.StringValue(string(v)))
					}
					selectors.Channel.Type = types.StringValue(string(selectorsItem.ChannelSelector.Type))
				}
				if selectorsItem.ConditionSelector != nil {
					selectors.Condition = &tfTypes.ConditionSelector{}
					selectors.Condition.Condition = types.StringValue(selectorsItem.ConditionSelector.Condition)
					selectors.Condition.Type = types.StringValue(string(selectorsItem.ConditionSelector.Type))
				}
				if selectorsItem.HTTPSelector != nil {
					selectors.HTTP = &tfTypes.HTTPSelector{}
					selectors.HTTP.Methods = make([]types.String, 0, len(selectorsItem.HTTPSelector.Methods))
					for _, v := range selectorsItem.HTTPSelector.Methods {
						selectors.HTTP.Methods = append(selectors.HTTP.Methods, types.StringValue(string(v)))
					}
					selectors.HTTP.Path = types.StringPointerValue(selectorsItem.HTTPSelector.Path)
					if selectorsItem.HTTPSelector.PathOperator != nil {
						selectors.HTTP.PathOperator = types.StringValue(string(*selectorsItem.HTTPSelector.PathOperator))
					} else {
						selectors.HTTP.PathOperator = types.StringNull()
					}
					selectors.HTTP.Type = types.StringValue(string(selectorsItem.HTTPSelector.Type))
				}

				flows.Selectors = append(flows.Selectors, selectors)
			}
			flows.Subscribe = []tfTypes.StepV4{}

			for _, subscribeItem := range flowsItem.Subscribe {
				var subscribe tfTypes.StepV4

				subscribe.Condition = types.StringPointerValue(subscribeItem.Condition)
				if subscribeItem.Configuration == nil {
					subscribe.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult9, _ := json.Marshal(subscribeItem.Configuration)
					subscribe.Configuration = jsontypes.NewNormalizedValue(string(configurationResult9))
				}
				subscribe.Description = types.StringPointerValue(subscribeItem.Description)
				subscribe.Enabled = types.BoolPointerValue(subscribeItem.Enabled)
				subscribe.MessageCondition = types.StringPointerValue(subscribeItem.MessageCondition)
				subscribe.Name = types.StringPointerValue(subscribeItem.Name)
				subscribe.Policy = types.StringValue(subscribeItem.Policy)

				flows.Subscribe = append(flows.Subscribe, subscribe)
			}
			flows.Tags = make([]types.String, 0, len(flowsItem.Tags))
			for _, v := range flowsItem.Tags {
				flows.Tags = append(flows.Tags, types.StringValue(v))
			}

			r.Flows = append(r.Flows, flows)
		}
		r.Groups = make([]types.String, 0, len(resp.Groups))
		for _, v := range resp.Groups {
			r.Groups = append(r.Groups, types.StringValue(v))
		}
		r.Hrid = types.StringValue(resp.Hrid)
		r.ID = types.StringPointerValue(resp.ID)
		r.Labels = make([]types.String, 0, len(resp.Labels))
		for _, v := range resp.Labels {
			r.Labels = append(r.Labels, types.StringValue(v))
		}
		r.LifecycleState = types.StringValue(string(resp.LifecycleState))
		r.Listeners = []tfTypes.Listener{}

		for _, listenersItem := range resp.Listeners {
			var listeners tfTypes.Listener

			if listenersItem.HTTPListener != nil {
				listeners.HTTP = &tfTypes.HTTPListener{}
				if listenersItem.HTTPListener.Cors == nil {
					listeners.HTTP.Cors = nil
				} else {
					listeners.HTTP.Cors = &tfTypes.Cors{}
					listeners.HTTP.Cors.AllowCredentials = types.BoolPointerValue(listenersItem.HTTPListener.Cors.AllowCredentials)
					listeners.HTTP.Cors.AllowHeaders = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.AllowHeaders))
					for _, v := range listenersItem.HTTPListener.Cors.AllowHeaders {
						listeners.HTTP.Cors.AllowHeaders = append(listeners.HTTP.Cors.AllowHeaders, types.StringValue(v))
					}
					listeners.HTTP.Cors.AllowMethods = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.AllowMethods))
					for _, v := range listenersItem.HTTPListener.Cors.AllowMethods {
						listeners.HTTP.Cors.AllowMethods = append(listeners.HTTP.Cors.AllowMethods, types.StringValue(string(v)))
					}
					listeners.HTTP.Cors.AllowOrigin = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.AllowOrigin))
					for _, v := range listenersItem.HTTPListener.Cors.AllowOrigin {
						listeners.HTTP.Cors.AllowOrigin = append(listeners.HTTP.Cors.AllowOrigin, types.StringValue(v))
					}
					listeners.HTTP.Cors.Enabled = types.BoolPointerValue(listenersItem.HTTPListener.Cors.Enabled)
					listeners.HTTP.Cors.ExposeHeaders = make([]types.String, 0, len(listenersItem.HTTPListener.Cors.ExposeHeaders))
					for _, v := range listenersItem.HTTPListener.Cors.ExposeHeaders {
						listeners.HTTP.Cors.ExposeHeaders = append(listeners.HTTP.Cors.ExposeHeaders, types.StringValue(v))
					}
					listeners.HTTP.Cors.MaxAge = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(listenersItem.HTTPListener.Cors.MaxAge))
					listeners.HTTP.Cors.RunPolicies = types.BoolPointerValue(listenersItem.HTTPListener.Cors.RunPolicies)
				}
				listeners.HTTP.Entrypoints = []tfTypes.Entrypoint{}

				for _, entrypointsItem := range listenersItem.HTTPListener.Entrypoints {
					var entrypoints tfTypes.Entrypoint

					if entrypointsItem.Configuration == nil {
						entrypoints.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult10, _ := json.Marshal(entrypointsItem.Configuration)
						entrypoints.Configuration = jsontypes.NewNormalizedValue(string(configurationResult10))
					}
					if entrypointsItem.Dlq == nil {
						entrypoints.Dlq = nil
					} else {
						entrypoints.Dlq = &tfTypes.Dlq{}
						entrypoints.Dlq.Endpoint = types.StringPointerValue(entrypointsItem.Dlq.Endpoint)
					}
					if entrypointsItem.Qos != nil {
						entrypoints.Qos = types.StringValue(string(*entrypointsItem.Qos))
					} else {
						entrypoints.Qos = types.StringNull()
					}
					entrypoints.Type = types.StringValue(entrypointsItem.Type)

					listeners.HTTP.Entrypoints = append(listeners.HTTP.Entrypoints, entrypoints)
				}
				listeners.HTTP.Paths = []tfTypes.PathV4{}

				for _, pathsItem := range listenersItem.HTTPListener.Paths {
					var paths tfTypes.PathV4

					paths.Host = types.StringPointerValue(pathsItem.Host)
					paths.OverrideAccess = types.BoolPointerValue(pathsItem.OverrideAccess)
					paths.Path = types.StringPointerValue(pathsItem.Path)

					listeners.HTTP.Paths = append(listeners.HTTP.Paths, paths)
				}
				listeners.HTTP.Servers = make([]types.String, 0, len(listenersItem.HTTPListener.Servers))
				for _, v := range listenersItem.HTTPListener.Servers {
					listeners.HTTP.Servers = append(listeners.HTTP.Servers, types.StringValue(v))
				}
				listeners.HTTP.Type = types.StringValue(string(listenersItem.HTTPListener.Type))
			}
			if listenersItem.KafkaListener != nil {
				listeners.Kafka = &tfTypes.KafkaListener{}
				listeners.Kafka.Entrypoints = []tfTypes.Entrypoint{}

				for _, entrypointsItem1 := range listenersItem.KafkaListener.Entrypoints {
					var entrypoints1 tfTypes.Entrypoint

					if entrypointsItem1.Configuration == nil {
						entrypoints1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult11, _ := json.Marshal(entrypointsItem1.Configuration)
						entrypoints1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult11))
					}
					if entrypointsItem1.Dlq == nil {
						entrypoints1.Dlq = nil
					} else {
						entrypoints1.Dlq = &tfTypes.Dlq{}
						entrypoints1.Dlq.Endpoint = types.StringPointerValue(entrypointsItem1.Dlq.Endpoint)
					}
					if entrypointsItem1.Qos != nil {
						entrypoints1.Qos = types.StringValue(string(*entrypointsItem1.Qos))
					} else {
						entrypoints1.Qos = types.StringNull()
					}
					entrypoints1.Type = types.StringValue(entrypointsItem1.Type)

					listeners.Kafka.Entrypoints = append(listeners.Kafka.Entrypoints, entrypoints1)
				}
				listeners.Kafka.Host = types.StringValue(listenersItem.KafkaListener.Host)
				listeners.Kafka.Servers = make([]types.String, 0, len(listenersItem.KafkaListener.Servers))
				for _, v := range listenersItem.KafkaListener.Servers {
					listeners.Kafka.Servers = append(listeners.Kafka.Servers, types.StringValue(v))
				}
				listeners.Kafka.Type = types.StringValue(string(listenersItem.KafkaListener.Type))
			}
			if listenersItem.SubscriptionListener != nil {
				listeners.Subscription = &tfTypes.SubscriptionListener{}
				listeners.Subscription.Entrypoints = []tfTypes.Entrypoint{}

				for _, entrypointsItem2 := range listenersItem.SubscriptionListener.Entrypoints {
					var entrypoints2 tfTypes.Entrypoint

					if entrypointsItem2.Configuration == nil {
						entrypoints2.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult12, _ := json.Marshal(entrypointsItem2.Configuration)
						entrypoints2.Configuration = jsontypes.NewNormalizedValue(string(configurationResult12))
					}
					if entrypointsItem2.Dlq == nil {
						entrypoints2.Dlq = nil
					} else {
						entrypoints2.Dlq = &tfTypes.Dlq{}
						entrypoints2.Dlq.Endpoint = types.StringPointerValue(entrypointsItem2.Dlq.Endpoint)
					}
					if entrypointsItem2.Qos != nil {
						entrypoints2.Qos = types.StringValue(string(*entrypointsItem2.Qos))
					} else {
						entrypoints2.Qos = types.StringNull()
					}
					entrypoints2.Type = types.StringValue(entrypointsItem2.Type)

					listeners.Subscription.Entrypoints = append(listeners.Subscription.Entrypoints, entrypoints2)
				}
				listeners.Subscription.Servers = make([]types.String, 0, len(listenersItem.SubscriptionListener.Servers))
				for _, v := range listenersItem.SubscriptionListener.Servers {
					listeners.Subscription.Servers = append(listeners.Subscription.Servers, types.StringValue(v))
				}
				listeners.Subscription.Type = types.StringValue(string(listenersItem.SubscriptionListener.Type))
			}
			if listenersItem.TCPListener != nil {
				listeners.TCP = &tfTypes.TCPListener{}
				listeners.TCP.Entrypoints = []tfTypes.Entrypoint{}

				for _, entrypointsItem3 := range listenersItem.TCPListener.Entrypoints {
					var entrypoints3 tfTypes.Entrypoint

					if entrypointsItem3.Configuration == nil {
						entrypoints3.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult13, _ := json.Marshal(entrypointsItem3.Configuration)
						entrypoints3.Configuration = jsontypes.NewNormalizedValue(string(configurationResult13))
					}
					if entrypointsItem3.Dlq == nil {
						entrypoints3.Dlq = nil
					} else {
						entrypoints3.Dlq = &tfTypes.Dlq{}
						entrypoints3.Dlq.Endpoint = types.StringPointerValue(entrypointsItem3.Dlq.Endpoint)
					}
					if entrypointsItem3.Qos != nil {
						entrypoints3.Qos = types.StringValue(string(*entrypointsItem3.Qos))
					} else {
						entrypoints3.Qos = types.StringNull()
					}
					entrypoints3.Type = types.StringValue(entrypointsItem3.Type)

					listeners.TCP.Entrypoints = append(listeners.TCP.Entrypoints, entrypoints3)
				}
				listeners.TCP.Hosts = make([]types.String, 0, len(listenersItem.TCPListener.Hosts))
				for _, v := range listenersItem.TCPListener.Hosts {
					listeners.TCP.Hosts = append(listeners.TCP.Hosts, types.StringValue(v))
				}
				listeners.TCP.Servers = make([]types.String, 0, len(listenersItem.TCPListener.Servers))
				for _, v := range listenersItem.TCPListener.Servers {
					listeners.TCP.Servers = append(listeners.TCP.Servers, types.StringValue(v))
				}
				listeners.TCP.Type = types.StringValue(string(listenersItem.TCPListener.Type))
			}

			r.Listeners = append(r.Listeners, listeners)
		}
		r.Members = []tfTypes.Member{}

		for _, membersItem := range resp.Members {
			var members tfTypes.Member

			members.Role = types.StringValue(membersItem.Role)
			members.Source = types.StringValue(membersItem.Source)
			members.SourceID = types.StringValue(membersItem.SourceID)

			r.Members = append(r.Members, members)
		}
		r.Metadata = []tfTypes.Metadata{}

		for _, metadataItem := range resp.Metadata {
			var metadata tfTypes.Metadata

			metadata.DefaultValue = types.StringPointerValue(metadataItem.DefaultValue)
			metadata.Format = types.StringValue(string(metadataItem.Format))
			metadata.Hidden = types.BoolPointerValue(metadataItem.Hidden)
			metadata.Key = types.StringPointerValue(metadataItem.Key)
			metadata.Name = types.StringValue(metadataItem.Name)
			metadata.Value = types.StringPointerValue(metadataItem.Value)

			r.Metadata = append(r.Metadata, metadata)
		}
		r.Name = types.StringValue(resp.Name)
		r.Pages = []tfTypes.PageV4{}

		for _, pagesItem := range resp.Pages {
			var pages tfTypes.PageV4

			if len(pagesItem.Configuration) > 0 {
				pages.Configuration = make(map[string]types.String, len(pagesItem.Configuration))
				for key, value := range pagesItem.Configuration {
					pages.Configuration[key] = types.StringValue(value)
				}
			}
			pages.Content = types.StringPointerValue(pagesItem.Content)
			pages.CrossID = types.StringPointerValue(pagesItem.CrossID)
			pages.Homepage = types.BoolPointerValue(pagesItem.Homepage)
			pages.Hrid = types.StringValue(pagesItem.Hrid)
			pages.Name = types.StringValue(pagesItem.Name)
			pages.ParentHrid = types.StringPointerValue(pagesItem.ParentHrid)
			pages.Published = types.BoolPointerValue(pagesItem.Published)
			if pagesItem.Source == nil {
				pages.Source = nil
			} else {
				pages.Source = &tfTypes.PageSource{}
				if pagesItem.Source.Configuration == nil {
					pages.Source.Configuration = jsontypes.NewNormalizedNull()
				} else {
					configurationResult14, _ := json.Marshal(pagesItem.Source.Configuration)
					pages.Source.Configuration = jsontypes.NewNormalizedValue(string(configurationResult14))
				}
				pages.Source.Type = types.StringPointerValue(pagesItem.Source.Type)
			}
			pages.Type = types.StringValue(string(pagesItem.Type))
			if pagesItem.Visibility != nil {
				pages.Visibility = types.StringValue(string(*pagesItem.Visibility))
			} else {
				pages.Visibility = types.StringNull()
			}

			r.Pages = append(r.Pages, pages)
		}
		r.Plans = []tfTypes.PlanV4{}

		for _, plansItem := range resp.Plans {
			var plans tfTypes.PlanV4

			plans.Characteristics = make([]types.String, 0, len(plansItem.Characteristics))
			for _, v := range plansItem.Characteristics {
				plans.Characteristics = append(plans.Characteristics, types.StringValue(v))
			}
			plans.Description = types.StringPointerValue(plansItem.Description)
			plans.ExcludedGroups = make([]types.String, 0, len(plansItem.ExcludedGroups))
			for _, v := range plansItem.ExcludedGroups {
				plans.ExcludedGroups = append(plans.ExcludedGroups, types.StringValue(v))
			}
			plans.Flows = []tfTypes.FlowV4{}

			for _, flowsItem1 := range plansItem.Flows {
				var flows1 tfTypes.FlowV4

				flows1.Connect = []tfTypes.StepV4{}

				for _, connectItem1 := range flowsItem1.Connect {
					var connect1 tfTypes.StepV4

					connect1.Condition = types.StringPointerValue(connectItem1.Condition)
					if connectItem1.Configuration == nil {
						connect1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult15, _ := json.Marshal(connectItem1.Configuration)
						connect1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult15))
					}
					connect1.Description = types.StringPointerValue(connectItem1.Description)
					connect1.Enabled = types.BoolPointerValue(connectItem1.Enabled)
					connect1.MessageCondition = types.StringPointerValue(connectItem1.MessageCondition)
					connect1.Name = types.StringPointerValue(connectItem1.Name)
					connect1.Policy = types.StringValue(connectItem1.Policy)

					flows1.Connect = append(flows1.Connect, connect1)
				}
				flows1.Enabled = types.BoolPointerValue(flowsItem1.Enabled)
				flows1.Interact = []tfTypes.StepV4{}

				for _, interactItem1 := range flowsItem1.Interact {
					var interact1 tfTypes.StepV4

					interact1.Condition = types.StringPointerValue(interactItem1.Condition)
					if interactItem1.Configuration == nil {
						interact1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult16, _ := json.Marshal(interactItem1.Configuration)
						interact1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult16))
					}
					interact1.Description = types.StringPointerValue(interactItem1.Description)
					interact1.Enabled = types.BoolPointerValue(interactItem1.Enabled)
					interact1.MessageCondition = types.StringPointerValue(interactItem1.MessageCondition)
					interact1.Name = types.StringPointerValue(interactItem1.Name)
					interact1.Policy = types.StringValue(interactItem1.Policy)

					flows1.Interact = append(flows1.Interact, interact1)
				}
				flows1.Name = types.StringPointerValue(flowsItem1.Name)
				flows1.Publish = []tfTypes.StepV4{}

				for _, publishItem1 := range flowsItem1.Publish {
					var publish1 tfTypes.StepV4

					publish1.Condition = types.StringPointerValue(publishItem1.Condition)
					if publishItem1.Configuration == nil {
						publish1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult17, _ := json.Marshal(publishItem1.Configuration)
						publish1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult17))
					}
					publish1.Description = types.StringPointerValue(publishItem1.Description)
					publish1.Enabled = types.BoolPointerValue(publishItem1.Enabled)
					publish1.MessageCondition = types.StringPointerValue(publishItem1.MessageCondition)
					publish1.Name = types.StringPointerValue(publishItem1.Name)
					publish1.Policy = types.StringValue(publishItem1.Policy)

					flows1.Publish = append(flows1.Publish, publish1)
				}
				flows1.Request = []tfTypes.StepV4{}

				for _, requestItem1 := range flowsItem1.Request {
					var request1 tfTypes.StepV4

					request1.Condition = types.StringPointerValue(requestItem1.Condition)
					if requestItem1.Configuration == nil {
						request1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult18, _ := json.Marshal(requestItem1.Configuration)
						request1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult18))
					}
					request1.Description = types.StringPointerValue(requestItem1.Description)
					request1.Enabled = types.BoolPointerValue(requestItem1.Enabled)
					request1.MessageCondition = types.StringPointerValue(requestItem1.MessageCondition)
					request1.Name = types.StringPointerValue(requestItem1.Name)
					request1.Policy = types.StringValue(requestItem1.Policy)

					flows1.Request = append(flows1.Request, request1)
				}
				flows1.Response = []tfTypes.StepV4{}

				for _, responseItem1 := range flowsItem1.Response {
					var response1 tfTypes.StepV4

					response1.Condition = types.StringPointerValue(responseItem1.Condition)
					if responseItem1.Configuration == nil {
						response1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult19, _ := json.Marshal(responseItem1.Configuration)
						response1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult19))
					}
					response1.Description = types.StringPointerValue(responseItem1.Description)
					response1.Enabled = types.BoolPointerValue(responseItem1.Enabled)
					response1.MessageCondition = types.StringPointerValue(responseItem1.MessageCondition)
					response1.Name = types.StringPointerValue(responseItem1.Name)
					response1.Policy = types.StringValue(responseItem1.Policy)

					flows1.Response = append(flows1.Response, response1)
				}
				flows1.Selectors = []tfTypes.Selector{}

				for _, selectorsItem1 := range flowsItem1.Selectors {
					var selectors1 tfTypes.Selector

					if selectorsItem1.ChannelSelector != nil {
						selectors1.Channel = &tfTypes.ChannelSelector{}
						selectors1.Channel.Channel = types.StringPointerValue(selectorsItem1.ChannelSelector.Channel)
						if selectorsItem1.ChannelSelector.ChannelOperator != nil {
							selectors1.Channel.ChannelOperator = types.StringValue(string(*selectorsItem1.ChannelSelector.ChannelOperator))
						} else {
							selectors1.Channel.ChannelOperator = types.StringNull()
						}
						selectors1.Channel.Entrypoints = make([]types.String, 0, len(selectorsItem1.ChannelSelector.Entrypoints))
						for _, v := range selectorsItem1.ChannelSelector.Entrypoints {
							selectors1.Channel.Entrypoints = append(selectors1.Channel.Entrypoints, types.StringValue(v))
						}
						selectors1.Channel.Operations = make([]types.String, 0, len(selectorsItem1.ChannelSelector.Operations))
						for _, v := range selectorsItem1.ChannelSelector.Operations {
							selectors1.Channel.Operations = append(selectors1.Channel.Operations, types.StringValue(string(v)))
						}
						selectors1.Channel.Type = types.StringValue(string(selectorsItem1.ChannelSelector.Type))
					}
					if selectorsItem1.ConditionSelector != nil {
						selectors1.Condition = &tfTypes.ConditionSelector{}
						selectors1.Condition.Condition = types.StringValue(selectorsItem1.ConditionSelector.Condition)
						selectors1.Condition.Type = types.StringValue(string(selectorsItem1.ConditionSelector.Type))
					}
					if selectorsItem1.HTTPSelector != nil {
						selectors1.HTTP = &tfTypes.HTTPSelector{}
						selectors1.HTTP.Methods = make([]types.String, 0, len(selectorsItem1.HTTPSelector.Methods))
						for _, v := range selectorsItem1.HTTPSelector.Methods {
							selectors1.HTTP.Methods = append(selectors1.HTTP.Methods, types.StringValue(string(v)))
						}
						selectors1.HTTP.Path = types.StringPointerValue(selectorsItem1.HTTPSelector.Path)
						if selectorsItem1.HTTPSelector.PathOperator != nil {
							selectors1.HTTP.PathOperator = types.StringValue(string(*selectorsItem1.HTTPSelector.PathOperator))
						} else {
							selectors1.HTTP.PathOperator = types.StringNull()
						}
						selectors1.HTTP.Type = types.StringValue(string(selectorsItem1.HTTPSelector.Type))
					}

					flows1.Selectors = append(flows1.Selectors, selectors1)
				}
				flows1.Subscribe = []tfTypes.StepV4{}

				for _, subscribeItem1 := range flowsItem1.Subscribe {
					var subscribe1 tfTypes.StepV4

					subscribe1.Condition = types.StringPointerValue(subscribeItem1.Condition)
					if subscribeItem1.Configuration == nil {
						subscribe1.Configuration = jsontypes.NewNormalizedNull()
					} else {
						configurationResult20, _ := json.Marshal(subscribeItem1.Configuration)
						subscribe1.Configuration = jsontypes.NewNormalizedValue(string(configurationResult20))
					}
					subscribe1.Description = types.StringPointerValue(subscribeItem1.Description)
					subscribe1.Enabled = types.BoolPointerValue(subscribeItem1.Enabled)
					subscribe1.MessageCondition = types.StringPointerValue(subscribeItem1.MessageCondition)
					subscribe1.Name = types.StringPointerValue(subscribeItem1.Name)
					subscribe1.Policy = types.StringValue(subscribeItem1.Policy)

					flows1.Subscribe = append(flows1.Subscribe, subscribe1)
				}
				flows1.Tags = make([]types.String, 0, len(flowsItem1.Tags))
				for _, v := range flowsItem1.Tags {
					flows1.Tags = append(flows1.Tags, types.StringValue(v))
				}

				plans.Flows = append(plans.Flows, flows1)
			}
			plans.GeneralConditionsHrid = types.StringPointerValue(plansItem.GeneralConditionsHrid)
			plans.Hrid = types.StringValue(plansItem.Hrid)
			plans.Mode = types.StringValue(string(plansItem.Mode))
			plans.Name = types.StringValue(plansItem.Name)
			if plansItem.Security.Configuration == nil {
				plans.Security.Configuration = jsontypes.NewNormalizedNull()
			} else {
				configurationResult21, _ := json.Marshal(plansItem.Security.Configuration)
				plans.Security.Configuration = jsontypes.NewNormalizedValue(string(configurationResult21))
			}
			plans.Security.Type = types.StringValue(string(plansItem.Security.Type))
			plans.SelectionRule = types.StringPointerValue(plansItem.SelectionRule)
			plans.Status = types.StringValue(string(plansItem.Status))
			plans.Tags = make([]types.String, 0, len(plansItem.Tags))
			for _, v := range plansItem.Tags {
				plans.Tags = append(plans.Tags, types.StringValue(v))
			}
			if plansItem.Type != nil {
				plans.Type = types.StringValue(string(*plansItem.Type))
			} else {
				plans.Type = types.StringNull()
			}
			if plansItem.Validation != nil {
				plans.Validation = types.StringValue(string(*plansItem.Validation))
			} else {
				plans.Validation = types.StringNull()
			}

			r.Plans = append(r.Plans, plans)
		}
		if resp.PrimaryOwner == nil {
			r.PrimaryOwner = nil
		} else {
			r.PrimaryOwner = &tfTypes.PrimaryOwner{}
			r.PrimaryOwner.DisplayName = types.StringPointerValue(resp.PrimaryOwner.DisplayName)
			r.PrimaryOwner.Email = types.StringPointerValue(resp.PrimaryOwner.Email)
			r.PrimaryOwner.ID = types.StringPointerValue(resp.PrimaryOwner.ID)
			if resp.PrimaryOwner.Type != nil {
				r.PrimaryOwner.Type = types.StringValue(string(*resp.PrimaryOwner.Type))
			} else {
				r.PrimaryOwner.Type = types.StringNull()
			}
		}
		r.Properties = []tfTypes.Property1{}

		for _, propertiesItem := range resp.Properties {
			var properties tfTypes.Property1

			properties.Dynamic = types.BoolPointerValue(propertiesItem.Dynamic)
			properties.Encrypted = types.BoolPointerValue(propertiesItem.Encrypted)
			properties.Key = types.StringValue(propertiesItem.Key)
			properties.Value = types.StringValue(propertiesItem.Value)

			r.Properties = append(r.Properties, properties)
		}
		r.Resources = []tfTypes.APIResource{}

		for _, resourcesItem := range resp.Resources {
			var resources tfTypes.APIResource

			configurationResult22, _ := json.Marshal(resourcesItem.Configuration)
			resources.Configuration = jsontypes.NewNormalizedValue(string(configurationResult22))
			resources.Enabled = types.BoolPointerValue(resourcesItem.Enabled)
			resources.Name = types.StringValue(resourcesItem.Name)
			resources.Type = types.StringValue(resourcesItem.Type)

			r.Resources = append(r.Resources, resources)
		}
		if len(resp.ResponseTemplates) > 0 {
			r.ResponseTemplates = make(map[string]map[string]tfTypes.ResponseTemplate, len(resp.ResponseTemplates))
			for responseTemplatesKey, responseTemplatesValue := range resp.ResponseTemplates {
				var responseTemplatesResult map[string]tfTypes.ResponseTemplate
				if len(responseTemplatesValue) > 0 {
					responseTemplatesResult = make(map[string]tfTypes.ResponseTemplate, len(responseTemplatesValue))
					for responseTemplateKey, responseTemplateValue := range responseTemplatesValue {
						var responseTemplateResult tfTypes.ResponseTemplate
						responseTemplateResult.Body = types.StringPointerValue(responseTemplateValue.Body)
						if len(responseTemplateValue.Headers) > 0 {
							responseTemplateResult.Headers = make(map[string]types.String, len(responseTemplateValue.Headers))
							for key1, value1 := range responseTemplateValue.Headers {
								responseTemplateResult.Headers[key1] = types.StringValue(value1)
							}
						}
						responseTemplateResult.PropagateErrorKeyToLogs = types.BoolPointerValue(responseTemplateValue.PropagateErrorKeyToLogs)
						responseTemplateResult.Status = types.Int64Value(responseTemplateValue.Status)

						responseTemplatesResult[responseTemplateKey] = responseTemplateResult
					}
				}

				r.ResponseTemplates[responseTemplatesKey] = responseTemplatesResult
			}
		}
		if resp.Services == nil {
			r.Services = nil
		} else {
			r.Services = &tfTypes.APIServices{}
			if resp.Services.DynamicProperty == nil {
				r.Services.DynamicProperty = nil
			} else {
				r.Services.DynamicProperty = &tfTypes.ServiceV4{}
				configurationResult23, _ := json.Marshal(resp.Services.DynamicProperty.Configuration)
				r.Services.DynamicProperty.Configuration = jsontypes.NewNormalizedValue(string(configurationResult23))
				r.Services.DynamicProperty.Enabled = types.BoolPointerValue(resp.Services.DynamicProperty.Enabled)
				r.Services.DynamicProperty.OverrideConfiguration = types.BoolPointerValue(resp.Services.DynamicProperty.OverrideConfiguration)
				r.Services.DynamicProperty.Type = types.StringValue(resp.Services.DynamicProperty.Type)
			}
		}
		if resp.State != nil {
			r.State = types.StringValue(string(*resp.State))
		} else {
			r.State = types.StringNull()
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.Type = types.StringValue(string(resp.Type))
		r.Version = types.StringValue(resp.Version)
		if resp.Visibility != nil {
			r.Visibility = types.StringValue(string(*resp.Visibility))
		} else {
			r.Visibility = types.StringNull()
		}
	}

	return diags
}

func (r *Apiv4DataSourceModel) ToOperationsGetAPIRequest(ctx context.Context) (*operations.GetAPIRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	var hrid string
	hrid = r.Hrid.ValueString()

	out := operations.GetAPIRequest{
		OrganizationID: organizationID,
		EnvironmentID:  environmentID,
		Hrid:           hrid,
	}

	return &out, diags
}
