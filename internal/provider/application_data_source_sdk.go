// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/gravitee-io/terraform-provider-apim/internal/provider/customtypes"
	tfTypes "github.com/gravitee-io/terraform-provider-apim/internal/provider/types"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/operations"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ApplicationDataSourceModel) RefreshFromSharedApplicationState(ctx context.Context, resp *shared.ApplicationState) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Background = types.StringPointerValue(resp.Background)
		r.Description = types.StringValue(resp.Description)
		r.Domain = types.StringPointerValue(resp.Domain)
		r.EnvironmentID = types.StringPointerValue(resp.EnvironmentID)
		r.Groups = make([]types.String, 0, len(resp.Groups))
		for _, v := range resp.Groups {
			r.Groups = append(r.Groups, types.StringValue(v))
		}
		r.Hrid = types.StringValue(resp.Hrid)
		r.ID = types.StringPointerValue(resp.ID)
		r.Members = []tfTypes.Member{}

		for _, membersItem := range resp.Members {
			var members tfTypes.Member

			members.Role = types.StringValue(membersItem.Role)
			members.Source = types.StringValue(membersItem.Source)
			members.SourceID = types.StringValue(membersItem.SourceID)

			r.Members = append(r.Members, members)
		}
		r.Metadata = []tfTypes.Metadata{}

		for _, metadataItem := range resp.Metadata {
			var metadata tfTypes.Metadata

			metadata.DefaultValue = types.StringPointerValue(metadataItem.DefaultValue)
			metadata.Format = types.StringValue(string(metadataItem.Format))
			metadata.Hidden = types.BoolPointerValue(metadataItem.Hidden)
			metadata.Key = types.StringPointerValue(metadataItem.Key)
			metadata.Name = types.StringValue(metadataItem.Name)
			metadata.Value = types.StringPointerValue(metadataItem.Value)

			r.Metadata = append(r.Metadata, metadata)
		}
		r.Name = types.StringValue(resp.Name)
		r.NotifyMembers = types.BoolPointerValue(resp.NotifyMembers)
		r.OrganizationID = types.StringPointerValue(resp.OrganizationID)
		r.PictureURL = types.StringPointerValue(resp.PictureURL)
		if resp.Settings == nil {
			r.Settings = nil
		} else {
			r.Settings = &tfTypes.ApplicationSettings{}
			if resp.Settings.App == nil {
				r.Settings.App = nil
			} else {
				r.Settings.App = &tfTypes.SimpleApplicationSettings{}
				r.Settings.App.ClientID = types.StringPointerValue(resp.Settings.App.ClientID)
				r.Settings.App.Type = types.StringPointerValue(resp.Settings.App.Type)
			}
			if resp.Settings.Oauth == nil {
				r.Settings.Oauth = nil
			} else {
				r.Settings.Oauth = &tfTypes.ApplicationOAuthClientSettings{}
				if len(resp.Settings.Oauth.AdditionalClientMetadata) > 0 {
					r.Settings.Oauth.AdditionalClientMetadata = make(map[string]types.String, len(resp.Settings.Oauth.AdditionalClientMetadata))
					for key, value := range resp.Settings.Oauth.AdditionalClientMetadata {
						r.Settings.Oauth.AdditionalClientMetadata[key] = types.StringValue(value)
					}
				}
				r.Settings.Oauth.ApplicationType = types.StringValue(string(resp.Settings.Oauth.ApplicationType))
				r.Settings.Oauth.GrantTypes = make([]types.String, 0, len(resp.Settings.Oauth.GrantTypes))
				for _, v := range resp.Settings.Oauth.GrantTypes {
					r.Settings.Oauth.GrantTypes = append(r.Settings.Oauth.GrantTypes, types.StringValue(string(v)))
				}
				r.Settings.Oauth.RedirectUris = make([]types.String, 0, len(resp.Settings.Oauth.RedirectUris))
				for _, v := range resp.Settings.Oauth.RedirectUris {
					r.Settings.Oauth.RedirectUris = append(r.Settings.Oauth.RedirectUris, types.StringValue(v))
				}
			}
			if resp.Settings.TLS == nil {
				r.Settings.TLS = nil
			} else {
				r.Settings.TLS = &tfTypes.ApplicationTLSSettings{}
				clientCertificateValuable, clientCertificateDiags := customtypes.TrimmedStringType{}.ValueFromString(ctx, types.StringValue(resp.Settings.TLS.ClientCertificate))
				diags.Append(clientCertificateDiags...)
				r.Settings.TLS.ClientCertificate = clientCertificateValuable.(customtypes.TrimmedString)
			}
		}
		if resp.Status != nil {
			r.Status = types.StringValue(string(*resp.Status))
		} else {
			r.Status = types.StringNull()
		}
	}

	return diags
}

func (r *ApplicationDataSourceModel) ToOperationsGetApplicationRequest(ctx context.Context) (*operations.GetApplicationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	var hrid string
	hrid = r.Hrid.ValueString()

	out := operations.GetApplicationRequest{
		OrganizationID: organizationID,
		EnvironmentID:  environmentID,
		Hrid:           hrid,
	}

	return &out, diags
}
