// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/gravitee-io/terraform-provider-apim/internal/provider/types"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/operations"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SharedPolicyGroupResourceModel) RefreshFromSharedSharedPolicyGroupState(ctx context.Context, resp *shared.SharedPolicyGroupState) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.APIType = types.StringValue(string(resp.APIType))
		r.CrossID = types.StringPointerValue(resp.CrossID)
		r.Description = types.StringPointerValue(resp.Description)
		r.EnvironmentID = types.StringPointerValue(resp.EnvironmentID)
		r.Hrid = types.StringValue(resp.Hrid)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		r.OrganizationID = types.StringPointerValue(resp.OrganizationID)
		r.Phase = types.StringValue(string(resp.Phase))
		r.PrerequisiteMessage = types.StringPointerValue(resp.PrerequisiteMessage)
		r.Steps = []tfTypes.StepV4{}

		for _, stepsItem := range resp.Steps {
			var steps tfTypes.StepV4

			steps.Condition = types.StringPointerValue(stepsItem.Condition)
			if stepsItem.Configuration == nil {
				steps.Configuration = jsontypes.NewNormalizedNull()
			} else {
				configurationResult, _ := json.Marshal(stepsItem.Configuration)
				steps.Configuration = jsontypes.NewNormalizedValue(string(configurationResult))
			}
			steps.Description = types.StringPointerValue(stepsItem.Description)
			steps.Enabled = types.BoolPointerValue(stepsItem.Enabled)
			steps.MessageCondition = types.StringPointerValue(stepsItem.MessageCondition)
			steps.Name = types.StringPointerValue(stepsItem.Name)
			steps.Policy = types.StringPointerValue(stepsItem.Policy)

			r.Steps = append(r.Steps, steps)
		}
	}

	return diags
}

func (r *SharedPolicyGroupResourceModel) ToOperationsCreateOrUpdatePolicyGroupRequest(ctx context.Context) (*operations.CreateOrUpdatePolicyGroupRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	sharedPolicyGroupSpec, sharedPolicyGroupSpecDiags := r.ToSharedSharedPolicyGroupSpec(ctx)
	diags.Append(sharedPolicyGroupSpecDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateOrUpdatePolicyGroupRequest{
		OrganizationID:        organizationID,
		EnvironmentID:         environmentID,
		SharedPolicyGroupSpec: *sharedPolicyGroupSpec,
	}

	return &out, diags
}

func (r *SharedPolicyGroupResourceModel) ToOperationsDeletePolicyGroupRequest(ctx context.Context) (*operations.DeletePolicyGroupRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	var hrid string
	hrid = r.Hrid.ValueString()

	out := operations.DeletePolicyGroupRequest{
		OrganizationID: organizationID,
		EnvironmentID:  environmentID,
		Hrid:           hrid,
	}

	return &out, diags
}

func (r *SharedPolicyGroupResourceModel) ToOperationsGetPolicyGroupRequest(ctx context.Context) (*operations.GetPolicyGroupRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	var hrid string
	hrid = r.Hrid.ValueString()

	out := operations.GetPolicyGroupRequest{
		OrganizationID: organizationID,
		EnvironmentID:  environmentID,
		Hrid:           hrid,
	}

	return &out, diags
}

func (r *SharedPolicyGroupResourceModel) ToSharedSharedPolicyGroupSpec(ctx context.Context) (*shared.SharedPolicyGroupSpec, diag.Diagnostics) {
	var diags diag.Diagnostics

	var hrid string
	hrid = r.Hrid.ValueString()

	apiType := shared.APIType(r.APIType.ValueString())
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	prerequisiteMessage := new(string)
	if !r.PrerequisiteMessage.IsUnknown() && !r.PrerequisiteMessage.IsNull() {
		*prerequisiteMessage = r.PrerequisiteMessage.ValueString()
	} else {
		prerequisiteMessage = nil
	}
	var name string
	name = r.Name.ValueString()

	phase := shared.FlowPhase(r.Phase.ValueString())
	steps := make([]shared.StepV4, 0, len(r.Steps))
	for _, stepsItem := range r.Steps {
		name1 := new(string)
		if !stepsItem.Name.IsUnknown() && !stepsItem.Name.IsNull() {
			*name1 = stepsItem.Name.ValueString()
		} else {
			name1 = nil
		}
		description1 := new(string)
		if !stepsItem.Description.IsUnknown() && !stepsItem.Description.IsNull() {
			*description1 = stepsItem.Description.ValueString()
		} else {
			description1 = nil
		}
		enabled := new(bool)
		if !stepsItem.Enabled.IsUnknown() && !stepsItem.Enabled.IsNull() {
			*enabled = stepsItem.Enabled.ValueBool()
		} else {
			enabled = nil
		}
		policy := new(string)
		if !stepsItem.Policy.IsUnknown() && !stepsItem.Policy.IsNull() {
			*policy = stepsItem.Policy.ValueString()
		} else {
			policy = nil
		}
		var configuration interface{}
		if !stepsItem.Configuration.IsUnknown() && !stepsItem.Configuration.IsNull() {
			_ = json.Unmarshal([]byte(stepsItem.Configuration.ValueString()), &configuration)
		}
		condition := new(string)
		if !stepsItem.Condition.IsUnknown() && !stepsItem.Condition.IsNull() {
			*condition = stepsItem.Condition.ValueString()
		} else {
			condition = nil
		}
		messageCondition := new(string)
		if !stepsItem.MessageCondition.IsUnknown() && !stepsItem.MessageCondition.IsNull() {
			*messageCondition = stepsItem.MessageCondition.ValueString()
		} else {
			messageCondition = nil
		}
		steps = append(steps, shared.StepV4{
			Name:             name1,
			Description:      description1,
			Enabled:          enabled,
			Policy:           policy,
			Configuration:    configuration,
			Condition:        condition,
			MessageCondition: messageCondition,
		})
	}
	out := shared.SharedPolicyGroupSpec{
		Hrid:                hrid,
		APIType:             apiType,
		Description:         description,
		PrerequisiteMessage: prerequisiteMessage,
		Name:                name,
		Phase:               phase,
		Steps:               steps,
	}

	return &out, diags
}
