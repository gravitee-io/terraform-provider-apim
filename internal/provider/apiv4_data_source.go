// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/gravitee-io/terraform-provider-apim/internal/provider/types"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &Apiv4DataSource{}
var _ datasource.DataSourceWithConfigure = &Apiv4DataSource{}

func NewApiv4DataSource() datasource.DataSource {
	return &Apiv4DataSource{}
}

// Apiv4DataSource is the data source implementation.
type Apiv4DataSource struct {
	// Provider configured SDK client.
	client *sdk.GraviteeApim

	// environment ID
	EnvironmentID types.String `tfsdk:"environment_id"`

	// organization ID
	OrganizationID types.String `tfsdk:"organization_id"`
}

// Apiv4DataSourceModel describes the data model.
type Apiv4DataSourceModel struct {
	Analytics         *tfTypes.Analytics                             `tfsdk:"analytics"`
	Categories        []types.String                                 `tfsdk:"categories"`
	CrossID           types.String                                   `tfsdk:"cross_id"`
	Description       types.String                                   `tfsdk:"description"`
	EndpointGroups    []tfTypes.EndpointGroupV4                      `tfsdk:"endpoint_groups"`
	EnvironmentID     types.String                                   `tfsdk:"environment_id"`
	Failover          *tfTypes.FailoverV4                            `tfsdk:"failover"`
	FlowExecution     *tfTypes.FlowExecution                         `tfsdk:"flow_execution"`
	Flows             []tfTypes.FlowV4                               `tfsdk:"flows"`
	Groups            []types.String                                 `tfsdk:"groups"`
	Hrid              types.String                                   `tfsdk:"hrid"`
	ID                types.String                                   `tfsdk:"id"`
	Labels            []types.String                                 `tfsdk:"labels"`
	LifecycleState    types.String                                   `tfsdk:"lifecycle_state"`
	Listeners         []tfTypes.Listener                             `tfsdk:"listeners"`
	Members           []tfTypes.Member                               `tfsdk:"members"`
	Metadata          []tfTypes.Metadata                             `tfsdk:"metadata"`
	Name              types.String                                   `tfsdk:"name"`
	OrganizationID    types.String                                   `tfsdk:"organization_id"`
	Pages             []tfTypes.PageV4                               `tfsdk:"pages"`
	Plans             []tfTypes.PlanV4                               `tfsdk:"plans"`
	PrimaryOwner      *tfTypes.PrimaryOwner                          `tfsdk:"primary_owner"`
	Properties        []tfTypes.Property1                            `tfsdk:"properties"`
	Resources         []tfTypes.APIResource                          `tfsdk:"resources"`
	ResponseTemplates map[string]map[string]tfTypes.ResponseTemplate `tfsdk:"response_templates"`
	Services          *tfTypes.APIServices                           `tfsdk:"services"`
	State             types.String                                   `tfsdk:"state"`
	Tags              []types.String                                 `tfsdk:"tags"`
	Type              types.String                                   `tfsdk:"type"`
	Version           types.String                                   `tfsdk:"version"`
	Visibility        types.String                                   `tfsdk:"visibility"`
}

// Metadata returns the data source type name.
func (r *Apiv4DataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_apiv4"
}

// Schema defines the schema for the data source.
func (r *Apiv4DataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Apiv4 DataSource",

		Attributes: map[string]schema.Attribute{
			"analytics": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed:    true,
						Description: `Whether or not analytics are enabled.`,
					},
					"logging": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"condition": schema.StringAttribute{
								Computed:    true,
								Description: `Filter using EL what request should be logged`,
							},
							"content": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"headers": schema.BoolAttribute{
										Computed:    true,
										Description: `Enable to log request headers`,
									},
									"message_headers": schema.BoolAttribute{
										Computed:    true,
										Description: `Enable to log message headers (Message APIs only)`,
									},
									"message_metadata": schema.BoolAttribute{
										Computed:    true,
										Description: `Enable to log message metadata (Message APIs only)`,
									},
									"message_payload": schema.BoolAttribute{
										Computed:    true,
										Description: `Enable to log message headers (Message APIs only)`,
									},
									"payload": schema.BoolAttribute{
										Computed:    true,
										Description: `Enable to log request headers (Proxy APIs only)`,
									},
								},
								Description: `API logging content when one of logging mode is enabled (Not for native APIs)`,
							},
							"message_condition": schema.StringAttribute{
								Computed:    true,
								Description: `Filter using EL what message should be logged`,
							},
							"mode": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"endpoint": schema.BoolAttribute{
										Computed:    true,
										Description: `Enables endpoint logging`,
									},
									"entrypoint": schema.BoolAttribute{
										Computed:    true,
										Description: `Enables entrypoint logging`,
									},
								},
								Description: `API logging mode (Not for native APIs)`,
							},
							"phase": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"request": schema.BoolAttribute{
										Computed:    true,
										Description: `Enables logging durring request phase`,
									},
									"response": schema.BoolAttribute{
										Computed:    true,
										Description: `Enables logging durring response phase`,
									},
								},
								Description: `Logging phase when one of logging mode is enabled (Not for native APIs)`,
							},
						},
						Description: `API logging configuration (Not for native APIs)`,
					},
					"sampling": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"type": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `The type of the sampling:` + "\n" +
									`` + "\n" +
									`` + "`" + `PROBABILITY` + "`" + `: based on a specified probability,` + "\n" +
									`` + "`" + `TEMPORAL` + "`" + `: all messages for on time duration,` + "\n" +
									`` + "`" + `COUNT` + "`" + `: for every number of specified messages`,
							},
							"value": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `The value of the sampling:` + "\n" +
									`` + "\n" +
									`` + "`" + `PROBABILITY` + "`" + `: between ` + "`" + `0.01` + "`" + ` and ` + "`" + `0.5` + "`" + `,` + "\n" +
									`` + "`" + `TEMPORAL` + "`" + `: ISO-8601 duration format, 1 second minimum (PT1S)` + "\n" +
									`` + "`" + `COUNT` + "`" + `: greater than ` + "`" + `1` + "`" + `,`,
							},
						},
						Description: `API analytics sampling (message API only). This is meant to log only a portion to avoid overflowing the log sink.`,
					},
					"tracing": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed:    true,
								Description: `Enable OpenTelemetry tracing`,
							},
							"verbose": schema.BoolAttribute{
								Computed:    true,
								Description: `Enable technical tracing to get more details on request execution. Be careful this settings can generate more noise and can impact performance.`,
							},
						},
						Description: `OpenTelemetry tracing (Not for native APIs)`,
					},
				},
				Description: `API analytics configuration to enable/disable what can be observed.`,
			},
			"categories": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The list of category names (or UUID) associated with this API.`,
			},
			"cross_id": schema.StringAttribute{
				Computed:    true,
				Description: `When promoting an API from one environment to the other, this ID identifies the API across those different environments.`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `Basic API documentation to describe what this API does.`,
			},
			"endpoint_groups": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"endpoints": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"configuration": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `JSON Configuration specific to this endpoint that cannot be define at the group level. Parsed as JSON.`,
									},
									"inherit_configuration": schema.BoolAttribute{
										Computed:    true,
										Description: `Enables shared configuration inheritance.`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `The name of the endpoint`,
									},
									"secondary": schema.BoolAttribute{
										Computed:    true,
										Description: `Define this endpoint as fallback endpoint in case other endpoints are no longer responding.`,
									},
									"services": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"health_check": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"configuration": schema.StringAttribute{
														CustomType:  jsontypes.NormalizedType{},
														Computed:    true,
														Description: `JSON configuration of the service. Parsed as JSON.`,
													},
													"enabled": schema.BoolAttribute{
														Computed:    true,
														Description: `Is the service enabled or not.`,
													},
													"override_configuration": schema.BoolAttribute{
														Computed:    true,
														Description: `When the configuration overrides an inherited configuration.`,
													},
													"type": schema.StringAttribute{
														Computed:    true,
														Description: `The service plugin ID used.`,
													},
												},
												Description: `Specifies an API property fetch using an external source.`,
											},
										},
										Description: `API Endpoint Services`,
									},
									"shared_configuration_override": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `JSON Configuration that replaces the shared configuration defined at the group level. Parsed as JSON.`,
									},
									"tenants": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `The list of Getaway's tenants on which the endpoint can be used.`,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `The type of endpoint`,
									},
									"weight": schema.Int32Attribute{
										Computed:    true,
										Description: `The weight of the endpoint for the load balancer algorythm.`,
									},
								},
							},
							Description: `All endpoints of this API.`,
						},
						"load_balancer": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `Load balancer type.`,
								},
							},
							Description: `Load Balancer to distribute traffic between endpoints.`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `The name of the endpoint group`,
						},
						"services": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"discovery": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"configuration": schema.StringAttribute{
											CustomType:  jsontypes.NormalizedType{},
											Computed:    true,
											Description: `JSON configuration of the service. Parsed as JSON.`,
										},
										"enabled": schema.BoolAttribute{
											Computed:    true,
											Description: `Is the service enabled or not.`,
										},
										"override_configuration": schema.BoolAttribute{
											Computed:    true,
											Description: `When the configuration overrides an inherited configuration.`,
										},
										"type": schema.StringAttribute{
											Computed:    true,
											Description: `The service plugin ID used.`,
										},
									},
									Description: `Specifies an API property fetch using an external source.`,
								},
								"health_check": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"configuration": schema.StringAttribute{
											CustomType:  jsontypes.NormalizedType{},
											Computed:    true,
											Description: `JSON configuration of the service. Parsed as JSON.`,
										},
										"enabled": schema.BoolAttribute{
											Computed:    true,
											Description: `Is the service enabled or not.`,
										},
										"override_configuration": schema.BoolAttribute{
											Computed:    true,
											Description: `When the configuration overrides an inherited configuration.`,
										},
										"type": schema.StringAttribute{
											Computed:    true,
											Description: `The service plugin ID used.`,
										},
									},
									Description: `Specifies an API property fetch using an external source.`,
								},
							},
							Description: `API Endpoint Group Services`,
						},
						"shared_configuration": schema.StringAttribute{
							CustomType:  jsontypes.NormalizedType{},
							Computed:    true,
							Description: `JSON configuration for the ` + "`" + `type` + "`" + ` of ` + "`" + `endpoints` + "`" + ` that will be shared across all endpoints. Parsed as JSON.`,
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Description: `The type of the endpoint group`,
						},
					},
				},
				Description: `Common endpoints properties and container of endpoints specifying backends this API can call.`,
			},
			"environment_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `environment ID`,
			},
			"failover": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed:    true,
						Description: `Automatically redirects request to the next endpoint if the response is too slow.`,
					},
					"max_failures": schema.Int32Attribute{
						Computed:    true,
						Description: `The maximum number of failures allowed before the circuit breaker can calculate the error rate.`,
					},
					"max_retries": schema.Int32Attribute{
						Computed:    true,
						Description: `Limit the number of retry attempts before recording an error. Each attempt dynamically selects an endpoint based on the load balancing algorithm.`,
					},
					"open_state_duration": schema.Int64Attribute{
						Computed:    true,
						Description: `The duration in milliseconds to indicate how long the circuit breaker should stay open, before it switches to half open.`,
					},
					"per_subscription": schema.BoolAttribute{
						Computed:    true,
						Description: `If true, a circuit breaker breaker will be dedicated for each subscriber, else, one and only circuit breaker will be used for the API.`,
					},
					"slow_call_duration": schema.Int64Attribute{
						Computed:    true,
						Description: `Define a threshold for slow responses. Requests exceeding this duration are recorded as slow.`,
					},
				},
				Description: `Defines the failover behavior to bypass endpoints when some are slow.`,
			},
			"flow_execution": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"match_required": schema.BoolAttribute{
						Computed:    true,
						Description: `To indicate failure if no flow matches the request.`,
					},
					"mode": schema.StringAttribute{
						Computed:    true,
						Description: `DEFAULT : all flows that match the conditions are executed in the order they are defined BEST_MATCH: only the best matching flow will be executed`,
					},
				},
				Description: `Flow execution enablement (Not applicable for Native API)`,
			},
			"flows": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"connect": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed:    true,
										Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
									},
									"configuration": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed:    true,
										Description: `A description for the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed:    true,
										Description: `To enable the step globally.`,
									},
									"message_condition": schema.StringAttribute{
										Computed:    true,
										Description: `The message condition of the step (for message API)`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed:    true,
										Description: `The policy of the step (plugin ID)`,
									},
								},
							},
							Description: `Connect flow steps used for NATIVE APIs`,
						},
						"enabled": schema.BoolAttribute{
							Computed:    true,
							Description: `Is the flow enabled.`,
						},
						"interact": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed:    true,
										Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
									},
									"configuration": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed:    true,
										Description: `A description for the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed:    true,
										Description: `To enable the step globally.`,
									},
									"message_condition": schema.StringAttribute{
										Computed:    true,
										Description: `The message condition of the step (for message API)`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed:    true,
										Description: `The policy of the step (plugin ID)`,
									},
								},
							},
							Description: `Interact flow steps used for NATIVE APIs`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Flow's name.`,
						},
						"publish": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed:    true,
										Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
									},
									"configuration": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed:    true,
										Description: `A description for the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed:    true,
										Description: `To enable the step globally.`,
									},
									"message_condition": schema.StringAttribute{
										Computed:    true,
										Description: `The message condition of the step (for message API)`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed:    true,
										Description: `The policy of the step (plugin ID)`,
									},
								},
							},
							Description: `Publish flow steps used for MESSAGE and NATIVE APIs`,
						},
						"request": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed:    true,
										Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
									},
									"configuration": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed:    true,
										Description: `A description for the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed:    true,
										Description: `To enable the step globally.`,
									},
									"message_condition": schema.StringAttribute{
										Computed:    true,
										Description: `The message condition of the step (for message API)`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed:    true,
										Description: `The policy of the step (plugin ID)`,
									},
								},
							},
							Description: `Request flow steps used for PROXY and MESSAGE APIs`,
						},
						"response": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed:    true,
										Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
									},
									"configuration": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed:    true,
										Description: `A description for the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed:    true,
										Description: `To enable the step globally.`,
									},
									"message_condition": schema.StringAttribute{
										Computed:    true,
										Description: `The message condition of the step (for message API)`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed:    true,
										Description: `The policy of the step (plugin ID)`,
									},
								},
							},
							Description: `Response flow steps used for PROXY and MESSAGE APIs`,
						},
						"selectors": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"channel": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"channel": schema.StringAttribute{
												Computed:    true,
												Description: `The channel of the selector`,
											},
											"channel_operator": schema.StringAttribute{
												Computed:    true,
												Description: `Operator function to match a URI path`,
											},
											"entrypoints": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `Among all entrypoints types, restrict which one will trigger this flow. Unset or empty means "all types".`,
											},
											"operations": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `The list of operations associated with this channel selector.`,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `Selector type.`,
											},
										},
										Description: `Channel selector`,
									},
									"condition": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"condition": schema.StringAttribute{
												Computed:    true,
												Description: `The EL condition of the selector`,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `Selector type.`,
											},
										},
										Description: `Condition selector`,
									},
									"http": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"methods": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `Methods to match, unset or empty means "any"`,
											},
											"path": schema.StringAttribute{
												Computed:    true,
												Description: `The path to match`,
											},
											"path_operator": schema.StringAttribute{
												Computed:    true,
												Description: `Operator function to match a URI path`,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `Selector type.`,
											},
										},
										Description: `HTTP selector`,
									},
								},
							},
						},
						"subscribe": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"condition": schema.StringAttribute{
										Computed:    true,
										Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
									},
									"configuration": schema.StringAttribute{
										CustomType:  jsontypes.NormalizedType{},
										Computed:    true,
										Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
									},
									"description": schema.StringAttribute{
										Computed:    true,
										Description: `A description for the step`,
									},
									"enabled": schema.BoolAttribute{
										Computed:    true,
										Description: `To enable the step globally.`,
									},
									"message_condition": schema.StringAttribute{
										Computed:    true,
										Description: `The message condition of the step (for message API)`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `The name of the step`,
									},
									"policy": schema.StringAttribute{
										Computed:    true,
										Description: `The policy of the step (plugin ID)`,
									},
								},
							},
							Description: `Subscribe flow steps used for MESSAGE and NATIVE APIs`,
						},
						"tags": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `Flow's informative tags.`,
						},
					},
				},
				Description: `Common flows for the API where traffic policies are configured.`,
			},
			"groups": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Name or UUIDs of existing groups (of users) associated with this API.`,
			},
			"hrid": schema.StringAttribute{
				Required:    true,
				Description: `Human-readable ID of a spec`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(256),
					stringvalidator.RegexMatches(regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`), "must match pattern "+regexp.MustCompile(`^[a-zA-Z][a-zA-Z0-9_-]{2,}$`).String()),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `API's uuid.`,
			},
			"labels": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Informative labels for this API.`,
			},
			"lifecycle_state": schema.StringAttribute{
				Computed:    true,
				Description: `The status of the API regarding the console.`,
			},
			"listeners": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"http": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"cors": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"allow_credentials": schema.BoolAttribute{
											Computed:    true,
											Description: `` + "`" + `Access-Control-Allow-Credentials` + "`" + `: Indicates whether or not the response to the request can be exposed when the credentials flag is true.`,
										},
										"allow_headers": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `` + "`" + `Access-Control-Allow-Headers` + "`" + `: Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request.`,
										},
										"allow_methods": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `` + "`" + `Access-Control-Allow-Methods` + "`" + `: Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request. HTTP methods that are allow to access the resource.`,
										},
										"allow_origin": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `` + "`" + `Access-Control-Allow-Origin` + "`" + `: The origin parameter specifies a URI that may access the resource. Scheme, domain and port are part of the same-origin definition.` + "\n" +
												`If you choose to enable '*' it means that is allows all requests, regardless of origin. URIs RegExp patterns that may access the resource`,
										},
										"enabled": schema.BoolAttribute{
											Computed:    true,
											Description: `Enable CORS`,
										},
										"expose_headers": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `` + "`" + `Access-Control-Expose-Headers` + "`" + `: This header lets a server whitelist headers that browsers are allowed to access.`,
										},
										"max_age": schema.Int32Attribute{
											Computed:    true,
											Description: `How long (in seconds) the results of a preflight request can be cached (-1 if disabled).`,
										},
										"run_policies": schema.BoolAttribute{
											Computed:    true,
											Description: `Allow the Gateway to run policies during in pre-flight request`,
										},
									},
									Description: `Http listener Cross-Origin Resource Sharing`,
								},
								"entrypoints": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"configuration": schema.StringAttribute{
												CustomType:  jsontypes.NormalizedType{},
												Computed:    true,
												Description: `JSON configuration for the selected ` + "`" + `type` + "`" + `. Parsed as JSON.`,
											},
											"dlq": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"endpoint": schema.StringAttribute{
														Computed:    true,
														Description: `The endpoint of the DLQ.`,
													},
												},
												Description: `Dead Letter Queue to process undelivered messages.`,
											},
											"qos": schema.StringAttribute{
												Computed:    true,
												Description: `Type of the quality of service (for message APIs).`,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `The type of the entrypoint`,
											},
										},
									},
									Description: `A list of possible entrypoint of the same type.`,
								},
								"paths": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"host": schema.StringAttribute{
												Computed:    true,
												Description: `Virtual host required to access this API. (` + "`" + `Host` + "`" + ` or ` + "`" + `:Authority` + "`" + ` headers, remote address for websockets)`,
											},
											"override_access": schema.BoolAttribute{
												Computed:    true,
												Description: `Override default organization entrypoint with ` + "`" + `host` + "`" + ``,
											},
											"path": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `One of the possible context paths of this API`,
								},
								"servers": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `Restrict the API to a given "server id", when the gateway runs in multiple servers mode (several ports per protocol).`,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `Listener type.`,
								},
							},
							Description: `HTTP Listener`,
						},
						"kafka": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"entrypoints": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"configuration": schema.StringAttribute{
												CustomType:  jsontypes.NormalizedType{},
												Computed:    true,
												Description: `JSON configuration for the selected ` + "`" + `type` + "`" + `. Parsed as JSON.`,
											},
											"dlq": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"endpoint": schema.StringAttribute{
														Computed:    true,
														Description: `The endpoint of the DLQ.`,
													},
												},
												Description: `Dead Letter Queue to process undelivered messages.`,
											},
											"qos": schema.StringAttribute{
												Computed:    true,
												Description: `Type of the quality of service (for message APIs).`,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `The type of the entrypoint`,
											},
										},
									},
									Description: `A list of possible entrypoint of the same type.`,
								},
								"host": schema.StringAttribute{
									Computed:    true,
									Description: `A hostname for which the API will match against SNI.`,
								},
								"servers": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `Restrict the API to a given "server id", when the gateway runs in multiple servers mode (several ports per protocol).`,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `Listener type.`,
								},
							},
							Description: `Kafka listener`,
						},
						"subscription": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"entrypoints": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"configuration": schema.StringAttribute{
												CustomType:  jsontypes.NormalizedType{},
												Computed:    true,
												Description: `JSON configuration for the selected ` + "`" + `type` + "`" + `. Parsed as JSON.`,
											},
											"dlq": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"endpoint": schema.StringAttribute{
														Computed:    true,
														Description: `The endpoint of the DLQ.`,
													},
												},
												Description: `Dead Letter Queue to process undelivered messages.`,
											},
											"qos": schema.StringAttribute{
												Computed:    true,
												Description: `Type of the quality of service (for message APIs).`,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `The type of the entrypoint`,
											},
										},
									},
									Description: `A list of possible entrypoint of the same type.`,
								},
								"servers": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `Restrict the API to a given "server id", when the gateway runs in multiple servers mode (several ports per protocol).`,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `Listener type.`,
								},
							},
							Description: `Subscription listener for message API.`,
						},
						"tcp": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"entrypoints": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"configuration": schema.StringAttribute{
												CustomType:  jsontypes.NormalizedType{},
												Computed:    true,
												Description: `JSON configuration for the selected ` + "`" + `type` + "`" + `. Parsed as JSON.`,
											},
											"dlq": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"endpoint": schema.StringAttribute{
														Computed:    true,
														Description: `The endpoint of the DLQ.`,
													},
												},
												Description: `Dead Letter Queue to process undelivered messages.`,
											},
											"qos": schema.StringAttribute{
												Computed:    true,
												Description: `Type of the quality of service (for message APIs).`,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `The type of the entrypoint`,
											},
										},
									},
									Description: `A list of possible entrypoint of the same type.`,
								},
								"hosts": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `A list of hostnames for which the API will match against SNI.  This must be unique for all TCP listener for a given server id. See 'servers' attribute`,
								},
								"servers": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `Restrict the API to a given "server id", when the gateway runs in multiple servers mode (several ports per protocol).`,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `Listener type.`,
								},
							},
							Description: `TCP listener`,
						},
					},
				},
				Description: `The list of listeners defining how this API can be called. They depend on the API type.`,
			},
			"members": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"role": schema.StringAttribute{
							Computed:    true,
							Description: `The role of the user in regards of the managed oject (API, Application, etc.)`,
						},
						"source": schema.StringAttribute{
							Computed:    true,
							Description: `Where the memeber was created (system, idp, etc.)`,
						},
						"source_id": schema.StringAttribute{
							Computed:    true,
							Description: `Id of the user in the source`,
						},
					},
				},
				Description: `Users that can access or manage the API (depending on their roles).`,
			},
			"metadata": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"default_value": schema.StringAttribute{
							Computed:    true,
							Description: `The default value of the metadata if the value is not set.`,
						},
						"format": schema.StringAttribute{
							Computed:    true,
							Description: `The format of the metadata.`,
						},
						"hidden": schema.BoolAttribute{
							Computed:    true,
							Description: `if this metadata should be hidden`,
						},
						"key": schema.StringAttribute{
							Computed:    true,
							Description: `The key of the metadata if different from sanitized name (lowercase + hyphens).`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `The name of the metadata.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `The value of the metadata.`,
						},
					},
				},
				Description: `The list of API's metadata.`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `API's name. Duplicate names can exists.`,
			},
			"organization_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `organization ID`,
			},
			"pages": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"configuration": schema.MapAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `Key/value page configuration (Configure swagger UI or or use Redoc instead)`,
						},
						"content": schema.StringAttribute{
							Computed:    true,
							Description: `The content of the page, if any.`,
						},
						"cross_id": schema.StringAttribute{
							Computed:    true,
							Description: `Page's cross uuid.`,
						},
						"homepage": schema.BoolAttribute{
							Computed:    true,
							Description: `If true, this page will be displayed as the homepage of your API documentation.`,
						},
						"hrid": schema.StringAttribute{
							Computed:    true,
							Description: `A unique human readable id identifying this resource`,
						},
						"name": schema.StringAttribute{
							Computed: true,
							MarkdownDescription: `This is the display name of the page in APIM and on the portal.` + "\n" +
								`This field can be edited safely if you want to rename a page.`,
						},
						"parent_hrid": schema.StringAttribute{
							Computed: true,
							MarkdownDescription: `If your page contains a folder, setting this field to the folder's hrid will be reflected ` + "\n" +
								`into APIM by making the page a child of this folder.`,
						},
						"published": schema.BoolAttribute{
							Computed:    true,
							Description: `If true, the page will be accessible from the portal (default is false)`,
						},
						"source": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.StringAttribute{
									CustomType:  jsontypes.NormalizedType{},
									Computed:    true,
									Description: `JSON object configuration of the fetch plugin. Parsed as JSON.`,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `The type of the page source (fetcher plugin ID).`,
								},
							},
							MarkdownDescription: `Allow you to fetch pages from various external sources, ` + "\n" +
								`overriding page content each time the source is fetched.`,
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Description: `The type of the documentation page or folder.`,
						},
						"visibility": schema.StringAttribute{
							Computed:    true,
							Description: `The visibility of the entity regarding the portal.`,
						},
					},
				},
				Description: `Pages for the API. Elements positioned earlier in the list are displayed first, with subsequent elements appearing below.`,
			},
			"plans": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"characteristics": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `Plan informative characteristics`,
						},
						"description": schema.StringAttribute{
							Computed:    true,
							Description: `A description for this plan.`,
						},
						"excluded_groups": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `Access-control, UUID of groups excluded from this plan`,
						},
						"flows": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"connect": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed:    true,
													Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
												},
												"configuration": schema.StringAttribute{
													CustomType:  jsontypes.NormalizedType{},
													Computed:    true,
													Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed:    true,
													Description: `A description for the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed:    true,
													Description: `To enable the step globally.`,
												},
												"message_condition": schema.StringAttribute{
													Computed:    true,
													Description: `The message condition of the step (for message API)`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed:    true,
													Description: `The policy of the step (plugin ID)`,
												},
											},
										},
										Description: `Connect flow steps used for NATIVE APIs`,
									},
									"enabled": schema.BoolAttribute{
										Computed:    true,
										Description: `Is the flow enabled.`,
									},
									"interact": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed:    true,
													Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
												},
												"configuration": schema.StringAttribute{
													CustomType:  jsontypes.NormalizedType{},
													Computed:    true,
													Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed:    true,
													Description: `A description for the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed:    true,
													Description: `To enable the step globally.`,
												},
												"message_condition": schema.StringAttribute{
													Computed:    true,
													Description: `The message condition of the step (for message API)`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed:    true,
													Description: `The policy of the step (plugin ID)`,
												},
											},
										},
										Description: `Interact flow steps used for NATIVE APIs`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `Flow's name.`,
									},
									"publish": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed:    true,
													Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
												},
												"configuration": schema.StringAttribute{
													CustomType:  jsontypes.NormalizedType{},
													Computed:    true,
													Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed:    true,
													Description: `A description for the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed:    true,
													Description: `To enable the step globally.`,
												},
												"message_condition": schema.StringAttribute{
													Computed:    true,
													Description: `The message condition of the step (for message API)`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed:    true,
													Description: `The policy of the step (plugin ID)`,
												},
											},
										},
										Description: `Publish flow steps used for MESSAGE and NATIVE APIs`,
									},
									"request": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed:    true,
													Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
												},
												"configuration": schema.StringAttribute{
													CustomType:  jsontypes.NormalizedType{},
													Computed:    true,
													Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed:    true,
													Description: `A description for the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed:    true,
													Description: `To enable the step globally.`,
												},
												"message_condition": schema.StringAttribute{
													Computed:    true,
													Description: `The message condition of the step (for message API)`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed:    true,
													Description: `The policy of the step (plugin ID)`,
												},
											},
										},
										Description: `Request flow steps used for PROXY and MESSAGE APIs`,
									},
									"response": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed:    true,
													Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
												},
												"configuration": schema.StringAttribute{
													CustomType:  jsontypes.NormalizedType{},
													Computed:    true,
													Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed:    true,
													Description: `A description for the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed:    true,
													Description: `To enable the step globally.`,
												},
												"message_condition": schema.StringAttribute{
													Computed:    true,
													Description: `The message condition of the step (for message API)`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed:    true,
													Description: `The policy of the step (plugin ID)`,
												},
											},
										},
										Description: `Response flow steps used for PROXY and MESSAGE APIs`,
									},
									"selectors": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"channel": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"channel": schema.StringAttribute{
															Computed:    true,
															Description: `The channel of the selector`,
														},
														"channel_operator": schema.StringAttribute{
															Computed:    true,
															Description: `Operator function to match a URI path`,
														},
														"entrypoints": schema.ListAttribute{
															Computed:    true,
															ElementType: types.StringType,
															Description: `Among all entrypoints types, restrict which one will trigger this flow. Unset or empty means "all types".`,
														},
														"operations": schema.ListAttribute{
															Computed:    true,
															ElementType: types.StringType,
															Description: `The list of operations associated with this channel selector.`,
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `Selector type.`,
														},
													},
													Description: `Channel selector`,
												},
												"condition": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"condition": schema.StringAttribute{
															Computed:    true,
															Description: `The EL condition of the selector`,
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `Selector type.`,
														},
													},
													Description: `Condition selector`,
												},
												"http": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"methods": schema.ListAttribute{
															Computed:    true,
															ElementType: types.StringType,
															Description: `Methods to match, unset or empty means "any"`,
														},
														"path": schema.StringAttribute{
															Computed:    true,
															Description: `The path to match`,
														},
														"path_operator": schema.StringAttribute{
															Computed:    true,
															Description: `Operator function to match a URI path`,
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `Selector type.`,
														},
													},
													Description: `HTTP selector`,
												},
											},
										},
									},
									"subscribe": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"condition": schema.StringAttribute{
													Computed:    true,
													Description: `The EL condition return a boolean to execute this step at runtime. Empty expression implies it is enabled.`,
												},
												"configuration": schema.StringAttribute{
													CustomType:  jsontypes.NormalizedType{},
													Computed:    true,
													Description: `JSON Object configuration of the policy used. Parsed as JSON.`,
												},
												"description": schema.StringAttribute{
													Computed:    true,
													Description: `A description for the step`,
												},
												"enabled": schema.BoolAttribute{
													Computed:    true,
													Description: `To enable the step globally.`,
												},
												"message_condition": schema.StringAttribute{
													Computed:    true,
													Description: `The message condition of the step (for message API)`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `The name of the step`,
												},
												"policy": schema.StringAttribute{
													Computed:    true,
													Description: `The policy of the step (plugin ID)`,
												},
											},
										},
										Description: `Subscribe flow steps used for MESSAGE and NATIVE APIs`,
									},
									"tags": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `Flow's informative tags.`,
									},
								},
							},
							MarkdownDescription: `Flows like API flows, composed of step running policies. ` + "\n" +
								`All steps are executed before the next plan flow or before the API flows,` + "\n" +
								`same on the reponse, which means API reponse flows will always run last.`,
						},
						"general_conditions_hrid": schema.StringAttribute{
							Computed:    true,
							Description: `API page ` + "`" + `hrid` + "`" + ` that serves as general conditions documentation of this plan`,
						},
						"hrid": schema.StringAttribute{
							Computed:    true,
							Description: `A unique human readable id identifying this resource`,
						},
						"mode": schema.StringAttribute{
							Computed:    true,
							Description: `The behavioural mode of the Plan (Standard for classical plan, Push for subscription plan).`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Name of the plan`,
						},
						"security": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"configuration": schema.StringAttribute{
									CustomType:  jsontypes.NormalizedType{},
									Computed:    true,
									Description: `JSON Object to configure specific attributes of a Plan. Parsed as JSON.`,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `API Plan security implementation.`,
								},
							},
							Description: `API plan security`,
						},
						"selection_rule": schema.StringAttribute{
							Computed:    true,
							Description: `An EL expression that must return a boolean to enable the flow based on the request.`,
						},
						"status": schema.StringAttribute{
							Computed:    true,
							Description: `Plan status, only ` + "`" + `PUBLISHED` + "`" + ` makes the plan available at runtime.`,
						},
						"tags": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `Sharding tags that restrict deployment to Gateways having those tags on. No tags means "always deploy". This tags list must be a subset of the API's tags list.`,
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Description: `Only one possible type: API`,
						},
						"validation": schema.StringAttribute{
							Computed: true,
							MarkdownDescription: `Specifies if subscriptions must be manually validated by a human actor.` + "\n" +
								`For automation API, it is default to ` + "`" + `AUTO` + "`" + `.`,
						},
					},
				},
				Description: `Available plans for the API to define API security. You must provide a plan if ` + "`" + `state` + "`" + ` is ` + "`" + `STARTED` + "`" + `. Plans are prioritized by their position in the list, with earlier entries having higher priority.`,
			},
			"primary_owner": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"display_name": schema.StringAttribute{
						Computed:    true,
						Description: `Owner's name.`,
					},
					"email": schema.StringAttribute{
						Computed:    true,
						Description: `Owner's email. Can be null if owner is a group.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `Owner's uuid.`,
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Description: `The type of membership`,
					},
				},
				Description: `User owner of this. Can perform all possible actions on it.`,
			},
			"properties": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"dynamic": schema.BoolAttribute{
							Computed:    true,
							Description: `When the value was populated from dynamic property service.`,
						},
						"encrypted": schema.BoolAttribute{
							Computed:    true,
							Description: `When the value has been encrypted in database.`,
						},
						"key": schema.StringAttribute{
							Computed:    true,
							Description: `Property key.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `Property value.`,
						},
					},
				},
				Description: `Properties usable using EL.`,
			},
			"resources": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"configuration": schema.StringAttribute{
							CustomType:  jsontypes.NormalizedType{},
							Computed:    true,
							Description: `JSON Object configuration specific to this resource. Parsed as JSON.`,
						},
						"enabled": schema.BoolAttribute{
							Computed:    true,
							Description: `Make it available or not.`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `API resource name`,
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Description: `Resource type (resource plugin ID)`,
						},
					},
				},
				Description: `Data resources usable in policy to access (mostly) external data (authentication, cache, registries...).`,
			},
			"response_templates": schema.MapAttribute{
				Computed: true,
				ElementType: types.MapType{
					ElemType: types.ObjectType{
						AttrTypes: map[string]attr.Type{
							`body`: types.StringType,
							`headers`: types.MapType{
								ElemType: types.StringType,
							},
							`propagate_error_key_to_logs`: types.BoolType,
							`status`:                      types.Int64Type,
						},
					},
				},
				MarkdownDescription: `Map of content-type dependent Response Templates for the API (Not applicable for Native` + "\n" +
					`API) to customize Gateway responses body on predefined errors.` + "\n" +
					`` + "\n" +
					`Key of the map is the error code.`,
			},
			"services": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dynamic_property": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"configuration": schema.StringAttribute{
								CustomType:  jsontypes.NormalizedType{},
								Computed:    true,
								Description: `JSON configuration of the service. Parsed as JSON.`,
							},
							"enabled": schema.BoolAttribute{
								Computed:    true,
								Description: `Is the service enabled or not.`,
							},
							"override_configuration": schema.BoolAttribute{
								Computed:    true,
								Description: `When the configuration overrides an inherited configuration.`,
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Description: `The service plugin ID used.`,
							},
						},
						Description: `Specifies an API property fetch using an external source.`,
					},
				},
				Description: `Api services (dynamic properties)`,
			},
			"state": schema.StringAttribute{
				Computed:    true,
				Description: `STARTED will make this API callable on tis context path, STOPPED will yield 404 error`,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Sharding tags that restrict deployment to Gateways having those tags on. No tags means "always deploy".`,
			},
			"type": schema.StringAttribute{
				Computed:    true,
				Description: `API's type.`,
			},
			"version": schema.StringAttribute{
				Computed:    true,
				Description: `API's version. It's a simple string only used to help manage API versioning.`,
			},
			"visibility": schema.StringAttribute{
				Computed:    true,
				Description: `The visibility of the entity regarding the portal.`,
			},
		},
	}
}

func (r *Apiv4DataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(*ApimProviderConfigureData)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *ApimProviderConfigureData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.EnvironmentID = providerData.EnvironmentID
	r.OrganizationID = providerData.OrganizationID
	r.client = providerData.SDKClient
}

func (r *Apiv4DataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *Apiv4DataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	if (data.EnvironmentID.IsNull() || data.EnvironmentID.IsUnknown()) && !r.EnvironmentID.IsUnknown() {
		data.EnvironmentID = r.EnvironmentID
	}

	if (data.OrganizationID.IsNull() || data.OrganizationID.IsUnknown()) && !r.OrganizationID.IsUnknown() {
		data.OrganizationID = r.OrganizationID
	}

	request, requestDiags := data.ToOperationsGetAPIRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Apis.Get(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.APIV4State != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedApiv4State(ctx, res.APIV4State)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
