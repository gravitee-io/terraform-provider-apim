// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/gravitee-io/terraform-provider-apim/internal/provider/types"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/operations"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SharedPolicyGroupDataSourceModel) RefreshFromSharedSharedPolicyGroupState(ctx context.Context, resp *shared.SharedPolicyGroupState) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.APIType = types.StringValue(string(resp.APIType))
		r.CrossID = types.StringPointerValue(resp.CrossID)
		r.Description = types.StringPointerValue(resp.Description)
		r.EnvironmentID = types.StringPointerValue(resp.EnvironmentID)
		r.Hrid = types.StringValue(resp.Hrid)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		r.OrganizationID = types.StringPointerValue(resp.OrganizationID)
		r.Phase = types.StringValue(string(resp.Phase))
		r.PrerequisiteMessage = types.StringPointerValue(resp.PrerequisiteMessage)
		r.Steps = []tfTypes.FlowStep{}
		if len(r.Steps) > len(resp.Steps) {
			r.Steps = r.Steps[:len(resp.Steps)]
		}
		for stepsCount, stepsItem := range resp.Steps {
			var steps tfTypes.FlowStep
			steps.Condition = types.StringPointerValue(stepsItem.Condition)
			steps.Configuration = types.StringPointerValue(stepsItem.Configuration)
			steps.Description = types.StringPointerValue(stepsItem.Description)
			steps.Enabled = types.BoolPointerValue(stepsItem.Enabled)
			steps.MessageCondition = types.StringPointerValue(stepsItem.MessageCondition)
			steps.Name = types.StringPointerValue(stepsItem.Name)
			steps.Policy = types.StringPointerValue(stepsItem.Policy)
			if stepsCount+1 > len(r.Steps) {
				r.Steps = append(r.Steps, steps)
			} else {
				r.Steps[stepsCount].Condition = steps.Condition
				r.Steps[stepsCount].Configuration = steps.Configuration
				r.Steps[stepsCount].Description = steps.Description
				r.Steps[stepsCount].Enabled = steps.Enabled
				r.Steps[stepsCount].MessageCondition = steps.MessageCondition
				r.Steps[stepsCount].Name = steps.Name
				r.Steps[stepsCount].Policy = steps.Policy
			}
		}
	}

	return diags
}

func (r *SharedPolicyGroupDataSourceModel) ToOperationsGetPolicyGroupRequest(ctx context.Context) (*operations.GetPolicyGroupRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	environmentID := new(string)
	if !r.EnvironmentID.IsUnknown() && !r.EnvironmentID.IsNull() {
		*environmentID = r.EnvironmentID.ValueString()
	} else {
		environmentID = nil
	}
	var hrid string
	hrid = r.Hrid.ValueString()

	out := operations.GetPolicyGroupRequest{
		OrganizationID: organizationID,
		EnvironmentID:  environmentID,
		Hrid:           hrid,
	}

	return &out, diags
}
