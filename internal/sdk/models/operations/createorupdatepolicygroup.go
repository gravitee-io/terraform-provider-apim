// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/models/shared"
	"net/http"
)

type CreateOrUpdatePolicyGroupGlobals struct {
	// organization ID
	OrganizationID *string `default:"DEFAULT" pathParam:"style=simple,explode=false,name=orgId"`
	// environment ID
	EnvironmentID *string `default:"DEFAULT" pathParam:"style=simple,explode=false,name=envId"`
}

func (c CreateOrUpdatePolicyGroupGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateOrUpdatePolicyGroupGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *CreateOrUpdatePolicyGroupGlobals) GetOrganizationID() *string {
	if c == nil {
		return nil
	}
	return c.OrganizationID
}

func (c *CreateOrUpdatePolicyGroupGlobals) GetEnvironmentID() *string {
	if c == nil {
		return nil
	}
	return c.EnvironmentID
}

type CreateOrUpdatePolicyGroupRequest struct {
	// organization ID
	OrganizationID *string `default:"DEFAULT" pathParam:"style=simple,explode=false,name=orgId"`
	// environment ID
	EnvironmentID *string `default:"DEFAULT" pathParam:"style=simple,explode=false,name=envId"`
	// For modifying requests, this parameter allow you to test the result of an endpoint without actually persisting
	// the state of the underlying spec.
	//
	DryRun *bool `default:"false" queryParam:"style=form,explode=true,name=dryRun"`
	// Shared Policy Group Specification
	SharedPolicyGroupSpec shared.SharedPolicyGroupSpec `request:"mediaType=application/json"`
}

func (c CreateOrUpdatePolicyGroupRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateOrUpdatePolicyGroupRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"SharedPolicyGroupSpec"}); err != nil {
		return err
	}
	return nil
}

func (c *CreateOrUpdatePolicyGroupRequest) GetOrganizationID() *string {
	if c == nil {
		return nil
	}
	return c.OrganizationID
}

func (c *CreateOrUpdatePolicyGroupRequest) GetEnvironmentID() *string {
	if c == nil {
		return nil
	}
	return c.EnvironmentID
}

func (c *CreateOrUpdatePolicyGroupRequest) GetDryRun() *bool {
	if c == nil {
		return nil
	}
	return c.DryRun
}

func (c *CreateOrUpdatePolicyGroupRequest) GetSharedPolicyGroupSpec() shared.SharedPolicyGroupSpec {
	if c == nil {
		return shared.SharedPolicyGroupSpec{}
	}
	return c.SharedPolicyGroupSpec
}

type CreateOrUpdatePolicyGroupResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// State of the successfully created / updated Shared Policy Group
	SharedPolicyGroupState *shared.SharedPolicyGroupState
	// Request is invalid
	HTTPError *shared.HTTPError
	// Default error
	Error *shared.Error
}

func (c *CreateOrUpdatePolicyGroupResponse) GetContentType() string {
	if c == nil {
		return ""
	}
	return c.ContentType
}

func (c *CreateOrUpdatePolicyGroupResponse) GetStatusCode() int {
	if c == nil {
		return 0
	}
	return c.StatusCode
}

func (c *CreateOrUpdatePolicyGroupResponse) GetRawResponse() *http.Response {
	if c == nil {
		return nil
	}
	return c.RawResponse
}

func (c *CreateOrUpdatePolicyGroupResponse) GetSharedPolicyGroupState() *shared.SharedPolicyGroupState {
	if c == nil {
		return nil
	}
	return c.SharedPolicyGroupState
}

func (c *CreateOrUpdatePolicyGroupResponse) GetHTTPError() *shared.HTTPError {
	if c == nil {
		return nil
	}
	return c.HTTPError
}

func (c *CreateOrUpdatePolicyGroupResponse) GetError() *shared.Error {
	if c == nil {
		return nil
	}
	return c.Error
}
