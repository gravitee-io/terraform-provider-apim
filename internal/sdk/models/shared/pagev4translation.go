// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
	"time"
)

// PageV4Translation - Documentation page translation. Can be of multiple formats.
type PageV4Translation struct {
	// A unique human readable id identifying this resource
	Hrid string `json:"hrid"`
	// Page's cross uuid.
	CrossID *string `json:"crossId,omitempty"`
	// This is the display name of the page in APIM and on the portal.
	// This field can be edited safely if you want to rename a page.
	//
	Name string `json:"name"`
	// The type of the documentation page or folder.
	Type PageType `json:"type"`
	// The content of the page, if any.
	Content *string `json:"content,omitempty"`
	// The order used to display the page in APIM and on the portal.
	Order int64 `json:"order"`
	// If true, the page will be accessible from the portal (default is false)
	Published *bool `default:"false" json:"published"`
	// The visibility of the resource regarding the portal.
	Visibility *Visibility `default:"PUBLIC" json:"visibility"`
	// Page's last update date.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Page's content type.
	ContentType *string `json:"contentType,omitempty"`
	// Allow you to fetch pages from various external sources,
	// overriding page content each time the source is fetched.
	//
	Source *PageSource `json:"source,omitempty"`
	// Key/value page configuration (Configure swagger UI or or use Redoc instead)
	Configuration map[string]string `json:"configuration,omitempty"`
	// If true, this page will be displayed as the homepage of your API documentation.
	Homepage *bool `json:"homepage,omitempty"`
	// If your page contains a folder, setting this field to the map key associated to the
	// folder entry will be reflected into APIM by making the page a child of this folder.
	//
	Parent *string `json:"parent,omitempty"`
	// List of access controls.
	AccessControls []AccessControl `json:"accessControls,omitempty"`
	// Page's metadata.
	Metadata map[string]string `json:"metadata,omitempty"`
	// If folder is published but not shown in Portal.
	Hidden *bool `json:"hidden,omitempty"`
}

func (p PageV4Translation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PageV4Translation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"hrid", "name", "type", "order"}); err != nil {
		return err
	}
	return nil
}

func (p *PageV4Translation) GetHrid() string {
	if p == nil {
		return ""
	}
	return p.Hrid
}

func (p *PageV4Translation) GetCrossID() *string {
	if p == nil {
		return nil
	}
	return p.CrossID
}

func (p *PageV4Translation) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PageV4Translation) GetType() PageType {
	if p == nil {
		return PageType("")
	}
	return p.Type
}

func (p *PageV4Translation) GetContent() *string {
	if p == nil {
		return nil
	}
	return p.Content
}

func (p *PageV4Translation) GetOrder() int64 {
	if p == nil {
		return 0
	}
	return p.Order
}

func (p *PageV4Translation) GetPublished() *bool {
	if p == nil {
		return nil
	}
	return p.Published
}

func (p *PageV4Translation) GetVisibility() *Visibility {
	if p == nil {
		return nil
	}
	return p.Visibility
}

func (p *PageV4Translation) GetUpdatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *PageV4Translation) GetContentType() *string {
	if p == nil {
		return nil
	}
	return p.ContentType
}

func (p *PageV4Translation) GetSource() *PageSource {
	if p == nil {
		return nil
	}
	return p.Source
}

func (p *PageV4Translation) GetConfiguration() map[string]string {
	if p == nil {
		return nil
	}
	return p.Configuration
}

func (p *PageV4Translation) GetHomepage() *bool {
	if p == nil {
		return nil
	}
	return p.Homepage
}

func (p *PageV4Translation) GetParent() *string {
	if p == nil {
		return nil
	}
	return p.Parent
}

func (p *PageV4Translation) GetAccessControls() []AccessControl {
	if p == nil {
		return nil
	}
	return p.AccessControls
}

func (p *PageV4Translation) GetMetadata() map[string]string {
	if p == nil {
		return nil
	}
	return p.Metadata
}

func (p *PageV4Translation) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}
