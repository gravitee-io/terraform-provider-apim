// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
)

// HTTPSelectorType - Selector type.
type HTTPSelectorType string

const (
	HTTPSelectorTypeHTTP      HTTPSelectorType = "HTTP"
	HTTPSelectorTypeChannel   HTTPSelectorType = "CHANNEL"
	HTTPSelectorTypeCondition HTTPSelectorType = "CONDITION"
)

func (e HTTPSelectorType) ToPointer() *HTTPSelectorType {
	return &e
}
func (e *HTTPSelectorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HTTP":
		fallthrough
	case "CHANNEL":
		fallthrough
	case "CONDITION":
		*e = HTTPSelectorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HTTPSelectorType: %v", v)
	}
}

// HTTPSelector - HTTP selector
type HTTPSelector struct {
	// Selector type.
	Type HTTPSelectorType `json:"type"`
	// The path to match
	Path *string `default:"/" json:"path"`
	// Operator function to match a URI path
	PathOperator *Operator `default:"STARTS_WITH" json:"pathOperator"`
	// Methods to match, unset or empty means "any"
	Methods []HTTPMethod `json:"methods,omitempty"`
}

func (h HTTPSelector) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HTTPSelector) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (h *HTTPSelector) GetType() HTTPSelectorType {
	if h == nil {
		return HTTPSelectorType("")
	}
	return h.Type
}

func (h *HTTPSelector) GetPath() *string {
	if h == nil {
		return nil
	}
	return h.Path
}

func (h *HTTPSelector) GetPathOperator() *Operator {
	if h == nil {
		return nil
	}
	return h.PathOperator
}

func (h *HTTPSelector) GetMethods() []HTTPMethod {
	if h == nil {
		return nil
	}
	return h.Methods
}
