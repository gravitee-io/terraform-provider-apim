// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConditionSelectorType - Selector type.
type ConditionSelectorType string

const (
	ConditionSelectorTypeHTTP      ConditionSelectorType = "HTTP"
	ConditionSelectorTypeChannel   ConditionSelectorType = "CHANNEL"
	ConditionSelectorTypeCondition ConditionSelectorType = "CONDITION"
)

func (e ConditionSelectorType) ToPointer() *ConditionSelectorType {
	return &e
}
func (e *ConditionSelectorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HTTP":
		fallthrough
	case "CHANNEL":
		fallthrough
	case "CONDITION":
		*e = ConditionSelectorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConditionSelectorType: %v", v)
	}
}

type ConditionSelector struct {
	// Selector type.
	Type ConditionSelectorType `json:"type"`
	// The condition of the selector
	Condition string `json:"condition"`
}

func (o *ConditionSelector) GetType() ConditionSelectorType {
	if o == nil {
		return ConditionSelectorType("")
	}
	return o.Type
}

func (o *ConditionSelector) GetCondition() string {
	if o == nil {
		return ""
	}
	return o.Condition
}
