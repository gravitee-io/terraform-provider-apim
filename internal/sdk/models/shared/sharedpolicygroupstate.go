// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// SharedPolicyGroupState - State of Shared Policy Groups that has been created/updated
type SharedPolicyGroupState struct {
	// A unique human readable id identifying this resource
	Hrid string `json:"hrid"`
	// API's type.
	APIType APIType `json:"apiType"`
	// The description of the shared policy group
	Description *string `json:"description,omitempty"`
	// The prerequisite message of the shared policy group. This message is displayed to the user to help understand the prerequisite to use the shared policy group.
	PrerequisiteMessage *string `json:"prerequisiteMessage,omitempty"`
	// The name of the shared policy group
	Name string `json:"name"`
	// The execution phase of a policy.
	Phase FlowPhase `json:"phase"`
	// SharedPolicyGroup Steps
	Steps []StepV4 `json:"steps,omitempty"`
	// When a resource has been created regardless of errors, this field is used to persist the error message encountered during validation
	Errors *Errors `json:"errors,omitempty"`
	// The id of the shared policy group.
	ID *string `json:"id,omitempty"`
	// The Cross ID is used to identify a shared policy group that has been promoted from one environment to another.
	CrossID *string `json:"crossId,omitempty"`
	// The environment ID of the shared policy group.
	EnvironmentID *string `json:"environmentId,omitempty"`
	// The organization ID of the shared policy group.
	OrganizationID *string `json:"organizationId,omitempty"`
}

func (s *SharedPolicyGroupState) GetHrid() string {
	if s == nil {
		return ""
	}
	return s.Hrid
}

func (s *SharedPolicyGroupState) GetAPIType() APIType {
	if s == nil {
		return APIType("")
	}
	return s.APIType
}

func (s *SharedPolicyGroupState) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *SharedPolicyGroupState) GetPrerequisiteMessage() *string {
	if s == nil {
		return nil
	}
	return s.PrerequisiteMessage
}

func (s *SharedPolicyGroupState) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SharedPolicyGroupState) GetPhase() FlowPhase {
	if s == nil {
		return FlowPhase("")
	}
	return s.Phase
}

func (s *SharedPolicyGroupState) GetSteps() []StepV4 {
	if s == nil {
		return nil
	}
	return s.Steps
}

func (s *SharedPolicyGroupState) GetErrors() *Errors {
	if s == nil {
		return nil
	}
	return s.Errors
}

func (s *SharedPolicyGroupState) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SharedPolicyGroupState) GetCrossID() *string {
	if s == nil {
		return nil
	}
	return s.CrossID
}

func (s *SharedPolicyGroupState) GetEnvironmentID() *string {
	if s == nil {
		return nil
	}
	return s.EnvironmentID
}

func (s *SharedPolicyGroupState) GetOrganizationID() *string {
	if s == nil {
		return nil
	}
	return s.OrganizationID
}
