// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
)

type ListenerUnionType string

const (
	ListenerUnionTypeHTTP         ListenerUnionType = "HTTP"
	ListenerUnionTypeTCP          ListenerUnionType = "TCP"
	ListenerUnionTypeSubscription ListenerUnionType = "SUBSCRIPTION"
	ListenerUnionTypeKafka        ListenerUnionType = "KAFKA"
)

type Listener struct {
	HTTPListener         *HTTPListener         `queryParam:"inline"`
	SubscriptionListener *SubscriptionListener `queryParam:"inline"`
	TCPListener          *TCPListener          `queryParam:"inline"`
	KafkaListener        *KafkaListener        `queryParam:"inline"`

	Type ListenerUnionType
}

func CreateListenerHTTP(http HTTPListener) Listener {
	typ := ListenerUnionTypeHTTP

	typStr := ListenerType(typ)
	http.Type = typStr

	return Listener{
		HTTPListener: &http,
		Type:         typ,
	}
}

func CreateListenerTCP(tcp TCPListener) Listener {
	typ := ListenerUnionTypeTCP

	typStr := ListenerType(typ)
	tcp.Type = typStr

	return Listener{
		TCPListener: &tcp,
		Type:        typ,
	}
}

func CreateListenerSubscription(subscription SubscriptionListener) Listener {
	typ := ListenerUnionTypeSubscription

	typStr := ListenerType(typ)
	subscription.Type = typStr

	return Listener{
		SubscriptionListener: &subscription,
		Type:                 typ,
	}
}

func CreateListenerKafka(kafka KafkaListener) Listener {
	typ := ListenerUnionTypeKafka

	typStr := ListenerType(typ)
	kafka.Type = typStr

	return Listener{
		KafkaListener: &kafka,
		Type:          typ,
	}
}

func (u *Listener) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "HTTP":
		httpListener := new(HTTPListener)
		if err := utils.UnmarshalJSON(data, &httpListener, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == HTTP) type HTTPListener within Listener: %w", string(data), err)
		}

		u.HTTPListener = httpListener
		u.Type = ListenerUnionTypeHTTP
		return nil
	case "TCP":
		tcpListener := new(TCPListener)
		if err := utils.UnmarshalJSON(data, &tcpListener, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == TCP) type TCPListener within Listener: %w", string(data), err)
		}

		u.TCPListener = tcpListener
		u.Type = ListenerUnionTypeTCP
		return nil
	case "SUBSCRIPTION":
		subscriptionListener := new(SubscriptionListener)
		if err := utils.UnmarshalJSON(data, &subscriptionListener, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == SUBSCRIPTION) type SubscriptionListener within Listener: %w", string(data), err)
		}

		u.SubscriptionListener = subscriptionListener
		u.Type = ListenerUnionTypeSubscription
		return nil
	case "KAFKA":
		kafkaListener := new(KafkaListener)
		if err := utils.UnmarshalJSON(data, &kafkaListener, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == KAFKA) type KafkaListener within Listener: %w", string(data), err)
		}

		u.KafkaListener = kafkaListener
		u.Type = ListenerUnionTypeKafka
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Listener", string(data))
}

func (u Listener) MarshalJSON() ([]byte, error) {
	if u.HTTPListener != nil {
		return utils.MarshalJSON(u.HTTPListener, "", true)
	}

	if u.SubscriptionListener != nil {
		return utils.MarshalJSON(u.SubscriptionListener, "", true)
	}

	if u.TCPListener != nil {
		return utils.MarshalJSON(u.TCPListener, "", true)
	}

	if u.KafkaListener != nil {
		return utils.MarshalJSON(u.KafkaListener, "", true)
	}

	return nil, errors.New("could not marshal union type Listener: all fields are null")
}
