// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
)

// PlanV4 - API Plan
type PlanV4 struct {
	// A unique human readable id identifying this resource
	Hrid string `json:"hrid"`
	// Name of the plan
	Name string `json:"name"`
	// A description for this plan.
	Description *string `json:"description,omitempty"`
	// API plan security
	Security PlanSecurity `json:"security"`
	// Plan informative characteristics
	Characteristics []string `json:"characteristics,omitempty"`
	// Access-control, UUID of groups excluded from this plan
	ExcludedGroups []string `json:"excludedGroups,omitempty"`
	// An EL expression that must return a boolean to enable the flow based on the request.
	SelectionRule *string `json:"selectionRule,omitempty"`
	// Plan status, only `PUBLISHED` makes the plan available at runtime.
	Status PlanStatus `json:"status"`
	// Sharding tags that restrict deployment to Gateways having those tags on. No tags means "always deploy". This tags list must be a subset of the API's tags list.
	Tags []string `json:"tags,omitempty"`
	// Only one possible type: API
	Type *PlanType `default:"API" json:"type"`
	// Specifies if subscriptions must be manually validated by a human actor.
	// For automation API, it is default to `AUTO`.
	//
	Validation *PlanValidation `default:"AUTO" json:"validation"`
	// Flows like API flows, composed of step running policies.
	// All steps are executed before the next plan flow or before the API flows,
	// same on the reponse, which means API reponse flows will always run last.
	//
	Flows []FlowV4 `json:"flows,omitempty"`
	// The behavioural mode of the Plan (Standard for classical plan, Push for subscription plan).
	Mode PlanMode `json:"mode"`
	// API page `hrid` that serves as general conditions documentation of this plan
	GeneralConditionsHrid *string `json:"generalConditionsHrid,omitempty"`
}

func (p PlanV4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlanV4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"hrid", "name", "security", "status", "mode"}); err != nil {
		return err
	}
	return nil
}

func (p *PlanV4) GetHrid() string {
	if p == nil {
		return ""
	}
	return p.Hrid
}

func (p *PlanV4) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PlanV4) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PlanV4) GetSecurity() PlanSecurity {
	if p == nil {
		return PlanSecurity{}
	}
	return p.Security
}

func (p *PlanV4) GetCharacteristics() []string {
	if p == nil {
		return nil
	}
	return p.Characteristics
}

func (p *PlanV4) GetExcludedGroups() []string {
	if p == nil {
		return nil
	}
	return p.ExcludedGroups
}

func (p *PlanV4) GetSelectionRule() *string {
	if p == nil {
		return nil
	}
	return p.SelectionRule
}

func (p *PlanV4) GetStatus() PlanStatus {
	if p == nil {
		return PlanStatus("")
	}
	return p.Status
}

func (p *PlanV4) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *PlanV4) GetType() *PlanType {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PlanV4) GetValidation() *PlanValidation {
	if p == nil {
		return nil
	}
	return p.Validation
}

func (p *PlanV4) GetFlows() []FlowV4 {
	if p == nil {
		return nil
	}
	return p.Flows
}

func (p *PlanV4) GetMode() PlanMode {
	if p == nil {
		return PlanMode("")
	}
	return p.Mode
}

func (p *PlanV4) GetGeneralConditionsHrid() *string {
	if p == nil {
		return nil
	}
	return p.GeneralConditionsHrid
}
