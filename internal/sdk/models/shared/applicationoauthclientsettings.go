// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ApplicationType - OAuth client application type:
// `browser` for single page apps (SPA),
// `web` for regular web apps,
// `native` for smartphone apps,
// `backend_to_backend` for backend to backend.
type ApplicationType string

const (
	ApplicationTypeBrowser          ApplicationType = "browser"
	ApplicationTypeWeb              ApplicationType = "web"
	ApplicationTypeNative           ApplicationType = "native"
	ApplicationTypeBackendToBackend ApplicationType = "backend_to_backend"
)

func (e ApplicationType) ToPointer() *ApplicationType {
	return &e
}
func (e *ApplicationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "browser":
		fallthrough
	case "web":
		fallthrough
	case "native":
		fallthrough
	case "backend_to_backend":
		*e = ApplicationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationType: %v", v)
	}
}

type GrantType string

const (
	GrantTypeAuthorizationCode GrantType = "authorization_code"
	GrantTypeImplicit          GrantType = "implicit"
	GrantTypeRefreshToken      GrantType = "refresh_token"
	GrantTypePassword          GrantType = "password"
	GrantTypeClientCredentials GrantType = "client_credentials"
)

func (e GrantType) ToPointer() *GrantType {
	return &e
}
func (e *GrantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authorization_code":
		fallthrough
	case "implicit":
		fallthrough
	case "refresh_token":
		fallthrough
	case "password":
		fallthrough
	case "client_credentials":
		*e = GrantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GrantType: %v", v)
	}
}

// ApplicationOAuthClientSettings - Application OAuth client settings. This require Dynamic Client Registration to be enabled at the environment level.
type ApplicationOAuthClientSettings struct {
	// OAuth client application type:
	// `browser` for single page apps (SPA),
	// `web` for regular web apps,
	// `native` for smartphone apps,
	// `backend_to_backend` for backend to backend.
	//
	ApplicationType ApplicationType `json:"applicationType"`
	// OAuth client grant types. `authorization_code` is mandatory except when application type is `backend_to_backend`.
	// `refresh_token` can be used only application type is `web` and `browser`.
	// `password` (Resource Owner Password) only with applicationType `native`.
	// `client_credentials` only works  when application type is `backend_to_backend`
	//
	GrantTypes []GrantType `json:"grantTypes"`
	// OAuth client redirect Uris
	RedirectUris             []string          `json:"redirectUris,omitempty"`
	AdditionalClientMetadata map[string]string `json:"additionalClientMetadata,omitempty"`
}

func (a *ApplicationOAuthClientSettings) GetApplicationType() ApplicationType {
	if a == nil {
		return ApplicationType("")
	}
	return a.ApplicationType
}

func (a *ApplicationOAuthClientSettings) GetGrantTypes() []GrantType {
	if a == nil {
		return []GrantType{}
	}
	return a.GrantTypes
}

func (a *ApplicationOAuthClientSettings) GetRedirectUris() []string {
	if a == nil {
		return nil
	}
	return a.RedirectUris
}

func (a *ApplicationOAuthClientSettings) GetAdditionalClientMetadata() map[string]string {
	if a == nil {
		return nil
	}
	return a.AdditionalClientMetadata
}
