// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SamplingType - The type of the sampling:
//
// `PROBABILITY`: based on a specified probability,
// `TEMPORAL`: all messages for on time duration,
// `COUNT`: for every number of specified messages
type SamplingType string

const (
	SamplingTypeProbability SamplingType = "PROBABILITY"
	SamplingTypeTemporal    SamplingType = "TEMPORAL"
	SamplingTypeCount       SamplingType = "COUNT"
)

func (e SamplingType) ToPointer() *SamplingType {
	return &e
}
func (e *SamplingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROBABILITY":
		fallthrough
	case "TEMPORAL":
		fallthrough
	case "COUNT":
		*e = SamplingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SamplingType: %v", v)
	}
}

// Sampling - API analytics sampling (message API only). This is meant to log only a portion to avoid overflowing the log sink.
type Sampling struct {
	// The type of the sampling:
	//
	// `PROBABILITY`: based on a specified probability,
	// `TEMPORAL`: all messages for on time duration,
	// `COUNT`: for every number of specified messages
	//
	Type SamplingType `json:"type"`
	// The value of the sampling:
	//
	// `PROBABILITY`: between `0.01` and `0.5`,
	// `TEMPORAL`: ISO-8601 duration format, 1 second minimum (PT1S)
	// `COUNT`: greater than `1`,
	//
	Value *string `json:"value,omitempty"`
}

func (s *Sampling) GetType() SamplingType {
	if s == nil {
		return SamplingType("")
	}
	return s.Type
}

func (s *Sampling) GetValue() *string {
	if s == nil {
		return nil
	}
	return s.Value
}
