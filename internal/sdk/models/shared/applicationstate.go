// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
)

// ApplicationStateStatus - Application are either ACTIVE or ARCHIVED never actually deleted.
type ApplicationStateStatus string

const (
	ApplicationStateStatusActive   ApplicationStateStatus = "ACTIVE"
	ApplicationStateStatusArchived ApplicationStateStatus = "ARCHIVED"
)

func (e ApplicationStateStatus) ToPointer() *ApplicationStateStatus {
	return &e
}
func (e *ApplicationStateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "ARCHIVED":
		*e = ApplicationStateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationStateStatus: %v", v)
	}
}

// ApplicationState - Application state that has been created/updated
type ApplicationState struct {
	// A unique human readable id identifying this resource
	Hrid string `json:"hrid"`
	// Application's name. Duplicate names can exists.
	Name string `json:"name"`
	// This is where you can clearly state the API’s purpose and what problems it solves to help drive API discovery and adoption by making it easier for developers to find and understand the API’s capabilities.
	Description string `json:"description"`
	// Application's domain.
	Domain *string `json:"domain,omitempty"`
	// List of groups associated with the Application. This groups are names or UUIDs of existing groups in APIM.
	Groups []string `json:"groups,omitempty"`
	// Application's picture Url.
	PictureURL *string `json:"pictureUrl,omitempty"`
	// If true, new members added to the Application spec will
	// be notified when the Application is synced with APIM.
	NotifyMembers *bool `default:"false" json:"notifyMembers"`
	// Application's background url
	Background *string `json:"background,omitempty"`
	// User owner of this. Can perform all possible actions on it.
	PrimaryOwner *PrimaryOwner `json:"primaryOwner,omitempty"`
	// Application settings defines the configuration of consumers authentication. Depending on the control plane configuration some applications types may be restricted. `app` and `oauth` are mutually exclusive. If none is set it fallbacks to `app` without any property set.
	Settings *ApplicationSettings `json:"settings,omitempty"`
	// The list of Application's metadata.
	Metadata []Metadata `json:"metadata,omitempty"`
	// Users that can access or manage this application (depending on their roles).
	Members []Member `json:"members,omitempty"`
	// Application are either ACTIVE or ARCHIVED never actually deleted.
	Status *ApplicationStateStatus `default:"ACTIVE" json:"status"`
	// When a resource has been created regardless of errors, this field is used to persist the error message encountered during validation
	Errors *Errors `json:"errors,omitempty"`
	// Application's uuid.
	ID *string `json:"id,omitempty"`
	// The environment ID of the Application.
	EnvironmentID *string `default:"DEFAULT" json:"environmentId"`
	// The organization ID of the Application.
	OrganizationID *string `default:"DEFAULT" json:"organizationId"`
}

func (a ApplicationState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ApplicationState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"hrid", "name", "description"}); err != nil {
		return err
	}
	return nil
}

func (a *ApplicationState) GetHrid() string {
	if a == nil {
		return ""
	}
	return a.Hrid
}

func (a *ApplicationState) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *ApplicationState) GetDescription() string {
	if a == nil {
		return ""
	}
	return a.Description
}

func (a *ApplicationState) GetDomain() *string {
	if a == nil {
		return nil
	}
	return a.Domain
}

func (a *ApplicationState) GetGroups() []string {
	if a == nil {
		return nil
	}
	return a.Groups
}

func (a *ApplicationState) GetPictureURL() *string {
	if a == nil {
		return nil
	}
	return a.PictureURL
}

func (a *ApplicationState) GetNotifyMembers() *bool {
	if a == nil {
		return nil
	}
	return a.NotifyMembers
}

func (a *ApplicationState) GetBackground() *string {
	if a == nil {
		return nil
	}
	return a.Background
}

func (a *ApplicationState) GetPrimaryOwner() *PrimaryOwner {
	if a == nil {
		return nil
	}
	return a.PrimaryOwner
}

func (a *ApplicationState) GetSettings() *ApplicationSettings {
	if a == nil {
		return nil
	}
	return a.Settings
}

func (a *ApplicationState) GetMetadata() []Metadata {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *ApplicationState) GetMembers() []Member {
	if a == nil {
		return nil
	}
	return a.Members
}

func (a *ApplicationState) GetStatus() *ApplicationStateStatus {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *ApplicationState) GetErrors() *Errors {
	if a == nil {
		return nil
	}
	return a.Errors
}

func (a *ApplicationState) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *ApplicationState) GetEnvironmentID() *string {
	if a == nil {
		return nil
	}
	return a.EnvironmentID
}

func (a *ApplicationState) GetOrganizationID() *string {
	if a == nil {
		return nil
	}
	return a.OrganizationID
}
