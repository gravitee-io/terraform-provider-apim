// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
)

// Origin - The origin of the API.
type Origin string

const (
	OriginManagement Origin = "MANAGEMENT"
	OriginKubernetes Origin = "KUBERNETES"
)

func (e Origin) ToPointer() *Origin {
	return &e
}
func (e *Origin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MANAGEMENT":
		fallthrough
	case "KUBERNETES":
		*e = Origin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Origin: %v", v)
	}
}

// Mode - The mode of the API.
// fully_managed: Mode indicating the api is fully managed by the origin and so, only the origin should be able to manage the api.
// api_definition_only: Mode indicating the api is partially managed by the origin and so, only the origin should be able to manage the api definition part of the api. This includes everything regarding the definition of the apis (plans, flows, metadata, ...)
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type Mode string

const (
	ModeFullyManaged      Mode = "FULLY_MANAGED"
	ModeAPIDefinitionOnly Mode = "API_DEFINITION_ONLY"
)

func (e Mode) ToPointer() *Mode {
	return &e
}
func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FULLY_MANAGED":
		fallthrough
	case "API_DEFINITION_ONLY":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

// SyncFrom - syncFrom stands for where the Gateway should source the API definition from.
// If the value is KUBERNETES, then the gateway will sync the definition by listening to changes
// issued on a kubernetes config map. If the value is MANAGEMENT, then the gateway will sync
// the definition using the same datastore as APIM.
// Defining MANAGEMENT as source for sync is useful e.g. when a single operator should operate
// on gateways deployed on multiple kubernetes clusters.
type SyncFrom string

const (
	SyncFromManagement SyncFrom = "MANAGEMENT"
	SyncFromKubernetes SyncFrom = "KUBERNETES"
)

func (e SyncFrom) ToPointer() *SyncFrom {
	return &e
}
func (e *SyncFrom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MANAGEMENT":
		fallthrough
	case "KUBERNETES":
		*e = SyncFrom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyncFrom: %v", v)
	}
}

// DefinitionContext - the context where the api definition was created.
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type DefinitionContext struct {
	// The origin of the API.
	origin *Origin `const:"KUBERNETES" json:"origin,omitempty"`
	// The mode of the API.
	// fully_managed: Mode indicating the api is fully managed by the origin and so, only the origin should be able to manage the api.
	// api_definition_only: Mode indicating the api is partially managed by the origin and so, only the origin should be able to manage the api definition part of the api. This includes everything regarding the definition of the apis (plans, flows, metadata, ...)
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	mode *Mode `const:"FULLY_MANAGED" json:"mode,omitempty"`
	// syncFrom stands for where the Gateway should source the API definition from.
	// If the value is KUBERNETES, then the gateway will sync the definition by listening to changes
	// issued on a kubernetes config map. If the value is MANAGEMENT, then the gateway will sync
	// the definition using the same datastore as APIM.
	// Defining MANAGEMENT as source for sync is useful e.g. when a single operator should operate
	// on gateways deployed on multiple kubernetes clusters.
	syncFrom *SyncFrom `const:"MANAGEMENT" json:"syncFrom,omitempty"`
}

func (d DefinitionContext) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DefinitionContext) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DefinitionContext) GetOrigin() *Origin {
	return OriginKubernetes.ToPointer()
}

func (o *DefinitionContext) GetMode() *Mode {
	return ModeFullyManaged.ToPointer()
}

func (o *DefinitionContext) GetSyncFrom() *SyncFrom {
	return SyncFromManagement.ToPointer()
}
