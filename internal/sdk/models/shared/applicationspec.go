// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
)

// ApplicationSpecStatus - Application are either ACTIVE or ARCHIVED never actually deleted.
type ApplicationSpecStatus string

const (
	ApplicationSpecStatusActive   ApplicationSpecStatus = "ACTIVE"
	ApplicationSpecStatusArchived ApplicationSpecStatus = "ARCHIVED"
)

func (e ApplicationSpecStatus) ToPointer() *ApplicationSpecStatus {
	return &e
}
func (e *ApplicationSpecStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "ARCHIVED":
		*e = ApplicationSpecStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationSpecStatus: %v", v)
	}
}

// ApplicationSpec - Defines the desired state of Application.
// It represents an API consumer.
// Applications act on behalf of users to request tokens, provide user identity information, and access protected resources from APIs.
// They can be of different types, such as Simple, Web, SPA, Native, or Backend-to-backend, each with specific configuration requirements.
// Applications are also used to manage API keys, analytics, and subscriptions.
type ApplicationSpec struct {
	// A unique human readable id identifying this resource
	Hrid string `json:"hrid"`
	// Application's name. Duplicate names can exists.
	Name string `json:"name"`
	// This is where you can clearly state the API’s purpose and what problems it solves to help drive API discovery and adoption by making it easier for developers to find and understand the API’s capabilities.
	Description string `json:"description"`
	// Application's domain.
	Domain *string `json:"domain,omitempty"`
	// List of groups associated with the Application. This groups are names or UUIDs of existing groups in APIM.
	Groups []string `json:"groups,omitempty"`
	// Application's picture Url.
	PictureURL *string `json:"pictureUrl,omitempty"`
	// If true, new members added to the Application spec will
	// be notified when the Application is synced with APIM.
	NotifyMembers *bool `default:"false" json:"notifyMembers"`
	// Application's background url
	Background *string `json:"background,omitempty"`
	// User owner of this. Can perform all possible actions on it.
	PrimaryOwner *PrimaryOwner `json:"primaryOwner,omitempty"`
	// Application settings defines the configuration of consumers authentication. Depending on the control plane configuration some applications types may be restricted. `app` and `oauth` are mutually exclusive. If none is set it fallbacks to `app` without any property set.
	Settings *ApplicationSettings `json:"settings,omitempty"`
	// The list of Application's metadata.
	Metadata []Metadata `json:"metadata,omitempty"`
	// Users that can access or manage this application (depending on their roles).
	Members []Member `json:"members,omitempty"`
	// Application are either ACTIVE or ARCHIVED never actually deleted.
	Status *ApplicationSpecStatus `default:"ACTIVE" json:"status"`
}

func (a ApplicationSpec) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ApplicationSpec) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"hrid", "name", "description"}); err != nil {
		return err
	}
	return nil
}

func (a *ApplicationSpec) GetHrid() string {
	if a == nil {
		return ""
	}
	return a.Hrid
}

func (a *ApplicationSpec) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *ApplicationSpec) GetDescription() string {
	if a == nil {
		return ""
	}
	return a.Description
}

func (a *ApplicationSpec) GetDomain() *string {
	if a == nil {
		return nil
	}
	return a.Domain
}

func (a *ApplicationSpec) GetGroups() []string {
	if a == nil {
		return nil
	}
	return a.Groups
}

func (a *ApplicationSpec) GetPictureURL() *string {
	if a == nil {
		return nil
	}
	return a.PictureURL
}

func (a *ApplicationSpec) GetNotifyMembers() *bool {
	if a == nil {
		return nil
	}
	return a.NotifyMembers
}

func (a *ApplicationSpec) GetBackground() *string {
	if a == nil {
		return nil
	}
	return a.Background
}

func (a *ApplicationSpec) GetPrimaryOwner() *PrimaryOwner {
	if a == nil {
		return nil
	}
	return a.PrimaryOwner
}

func (a *ApplicationSpec) GetSettings() *ApplicationSettings {
	if a == nil {
		return nil
	}
	return a.Settings
}

func (a *ApplicationSpec) GetMetadata() []Metadata {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *ApplicationSpec) GetMembers() []Member {
	if a == nil {
		return nil
	}
	return a.Members
}

func (a *ApplicationSpec) GetStatus() *ApplicationSpecStatus {
	if a == nil {
		return nil
	}
	return a.Status
}
