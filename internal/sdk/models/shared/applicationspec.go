// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
)

// ApplicationSpecStatus - Application are either ACTIVE or ARCHIVED never actually deleted.
type ApplicationSpecStatus string

const (
	ApplicationSpecStatusActive   ApplicationSpecStatus = "ACTIVE"
	ApplicationSpecStatusArchived ApplicationSpecStatus = "ARCHIVED"
)

func (e ApplicationSpecStatus) ToPointer() *ApplicationSpecStatus {
	return &e
}
func (e *ApplicationSpecStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "ARCHIVED":
		*e = ApplicationSpecStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationSpecStatus: %v", v)
	}
}

// ApplicationSpec - Defines the desired state of Application.
// It represents an API consumer.
// Applications act on behalf of users to request tokens, provide user identity information, and access protected resources from APIs.
// They can be of different types, such as Simple, Web, SPA, Native, or Backend-to-backend, each with specific configuration requirements.
// Applications are also used to manage API keys, analytics, and subscriptions.
type ApplicationSpec struct {
	// A unique human readable id identifying this resource
	Hrid string `json:"hrid"`
	// Application's name. Duplicate names can exists.
	Name string `json:"name"`
	// Application's description.
	Description string `json:"description"`
	// Application's domain.
	Domain *string `json:"domain,omitempty"`
	// List of groups associated with the Application.
	// This groups are id or name references to existing groups in APIM.
	Groups []string `json:"groups,omitempty"`
	// Application's picture Url.
	PictureURL *string `json:"pictureUrl,omitempty"`
	// If true, new members added to the Application spec will
	// be notified when the Application is synced with APIM.
	NotifyMembers *bool `default:"false" json:"notifyMembers"`
	// Application's background url
	Background *string `json:"background,omitempty"`
	// Primary owner, the creator of the application. Can perform all possible API actions.
	PrimaryOwner *PrimaryOwner `json:"primaryOwner,omitempty"`
	// Application settings defines the configuration of consumers authentication. Depending on the control plane configuration some applications types may be restricted. `app` and `oauth` are mutually exclusive. If none is set it fallbacks to `app` without any property set.
	Settings *ApplicationSettings `json:"settings,omitempty"`
	// The list of Application's metadata.
	Metadata []Metadata `json:"metadata,omitempty"`
	// Set of members associated with the application
	Members []MemberInput `json:"members,omitempty"`
	// Application are either ACTIVE or ARCHIVED never actually deleted.
	Status *ApplicationSpecStatus `default:"ACTIVE" json:"status"`
}

func (a ApplicationSpec) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ApplicationSpec) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"hrid", "name", "description"}); err != nil {
		return err
	}
	return nil
}

func (o *ApplicationSpec) GetHrid() string {
	if o == nil {
		return ""
	}
	return o.Hrid
}

func (o *ApplicationSpec) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ApplicationSpec) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ApplicationSpec) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *ApplicationSpec) GetGroups() []string {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *ApplicationSpec) GetPictureURL() *string {
	if o == nil {
		return nil
	}
	return o.PictureURL
}

func (o *ApplicationSpec) GetNotifyMembers() *bool {
	if o == nil {
		return nil
	}
	return o.NotifyMembers
}

func (o *ApplicationSpec) GetBackground() *string {
	if o == nil {
		return nil
	}
	return o.Background
}

func (o *ApplicationSpec) GetPrimaryOwner() *PrimaryOwner {
	if o == nil {
		return nil
	}
	return o.PrimaryOwner
}

func (o *ApplicationSpec) GetSettings() *ApplicationSettings {
	if o == nil {
		return nil
	}
	return o.Settings
}

func (o *ApplicationSpec) GetMetadata() []Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ApplicationSpec) GetMembers() []MemberInput {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *ApplicationSpec) GetStatus() *ApplicationSpecStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
