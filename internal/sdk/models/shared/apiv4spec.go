// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
)

// APIV4SpecAnalytics - API analytics configuration to enable/disable what can be observed.
type APIV4SpecAnalytics struct {
	// Whether or not analytics are enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// API analytics sampling (message API only). This is meant to log only a portion to avoid overflowing the log sink.
	Sampling *Sampling `json:"sampling,omitempty"`
	// API logging configuration (Not for native APIs)
	Logging *LoggingV4 `json:"logging,omitempty"`
	// OpenTelemetry tracing (Not for native APIs)
	Tracing *TracingV4 `json:"tracing,omitempty"`
}

func (a *APIV4SpecAnalytics) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *APIV4SpecAnalytics) GetSampling() *Sampling {
	if a == nil {
		return nil
	}
	return a.Sampling
}

func (a *APIV4SpecAnalytics) GetLogging() *LoggingV4 {
	if a == nil {
		return nil
	}
	return a.Logging
}

func (a *APIV4SpecAnalytics) GetTracing() *TracingV4 {
	if a == nil {
		return nil
	}
	return a.Tracing
}

// APIV4Spec - ApiV4DefinitionSpec defines the desired state of ApiDefinition.
type APIV4Spec struct {
	// A unique human readable id identifying this resource
	Hrid string `json:"hrid"`
	// API's name. Duplicate names can exists.
	Name string `json:"name"`
	// API's version. It's a simple string only used to help manage API versioning.
	Version string `json:"version"`
	// API's type.
	Type APIType `json:"type"`
	// Basic API documentation to describe what this API does.
	Description *string `json:"description,omitempty"`
	// Sharding tags that restrict deployment to Gateways having those tags on. No tags means "always deploy".
	Tags []string `json:"tags,omitempty"`
	// The list of listeners defining how this API can be called. They depend on the API type.
	Listeners []Listener `json:"listeners"`
	// Common endpoints properties and container of endpoints specifying backends this API can call.
	EndpointGroups []EndpointGroupV4   `json:"endpointGroups"`
	Analytics      *APIV4SpecAnalytics `json:"analytics,omitempty"`
	// Defines the failover behavior to bypass endpoints when some are slow.
	Failover *FailoverV4 `json:"failover,omitempty"`
	// Properties usable using EL.
	Properties []PropertyInput `json:"properties,omitempty"`
	// Data resources usable in policy to access (mostly) external data (authentication, cache, registries...).
	Resources []APIResource `json:"resources,omitempty"`
	// Available plans for the API to define API security. You must provide a plan if `state` is `STARTED`. Plans are prioritized by their position in the list, with earlier entries having higher priority.
	Plans []PlanV4 `json:"plans,omitempty"`
	// Flow execution enablement (Not applicable for Native API)
	FlowExecution *FlowExecution `json:"flowExecution,omitempty"`
	// Common flows for the API where traffic policies are configured.
	Flows []FlowV4 `json:"flows,omitempty"`
	// Map of content-type dependent Response Templates for the API (Not applicable for Native
	// API) to customize Gateway responses body on predefined errors.
	//
	// Key of the map is the error code.
	//
	ResponseTemplates map[string]map[string]ResponseTemplate `json:"responseTemplates,omitempty"`
	// Api services (dynamic properties)
	Services *APIServices `json:"services,omitempty"`
	// Name or UUIDs of existing groups (of users) associated with this API.
	Groups []string `json:"groups,omitempty"`
	// The visibility of the entity regarding the portal.
	Visibility *Visibility `default:"PUBLIC" json:"visibility"`
	// STARTED will make this API callable on tis context path, STOPPED will yield 404 error
	State *LifecycleState `json:"state,omitempty"`
	// User owner of this. Can perform all possible actions on it.
	PrimaryOwner *PrimaryOwner `json:"primaryOwner,omitempty"`
	// Informative labels for this API.
	Labels []string `json:"labels,omitempty"`
	// The list of API's metadata.
	Metadata []Metadata `json:"metadata,omitempty"`
	// The status of the API regarding the console.
	LifecycleState APILifecycleState `json:"lifecycleState"`
	// The list of category names (or UUID) associated with this API.
	Categories []string `json:"categories,omitempty"`
	// Users that can access or manage the API (depending on their roles).
	Members []Member `json:"members,omitempty"`
	// If true, new members added to the API spec will
	// be notified when the API is synced with APIM.
	NotifyMembers *bool `default:"true" json:"notifyMembers"`
	// Pages for the API. Elements positioned earlier in the list are displayed first, with subsequent elements appearing below.
	Pages []PageV4Input `json:"pages,omitempty"`
}

func (a APIV4Spec) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *APIV4Spec) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"hrid", "name", "version", "type", "listeners", "endpointGroups", "lifecycleState"}); err != nil {
		return err
	}
	return nil
}

func (a *APIV4Spec) GetHrid() string {
	if a == nil {
		return ""
	}
	return a.Hrid
}

func (a *APIV4Spec) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *APIV4Spec) GetVersion() string {
	if a == nil {
		return ""
	}
	return a.Version
}

func (a *APIV4Spec) GetType() APIType {
	if a == nil {
		return APIType("")
	}
	return a.Type
}

func (a *APIV4Spec) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *APIV4Spec) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *APIV4Spec) GetListeners() []Listener {
	if a == nil {
		return []Listener{}
	}
	return a.Listeners
}

func (a *APIV4Spec) GetEndpointGroups() []EndpointGroupV4 {
	if a == nil {
		return []EndpointGroupV4{}
	}
	return a.EndpointGroups
}

func (a *APIV4Spec) GetAnalytics() *APIV4SpecAnalytics {
	if a == nil {
		return nil
	}
	return a.Analytics
}

func (a *APIV4Spec) GetFailover() *FailoverV4 {
	if a == nil {
		return nil
	}
	return a.Failover
}

func (a *APIV4Spec) GetProperties() []PropertyInput {
	if a == nil {
		return nil
	}
	return a.Properties
}

func (a *APIV4Spec) GetResources() []APIResource {
	if a == nil {
		return nil
	}
	return a.Resources
}

func (a *APIV4Spec) GetPlans() []PlanV4 {
	if a == nil {
		return nil
	}
	return a.Plans
}

func (a *APIV4Spec) GetFlowExecution() *FlowExecution {
	if a == nil {
		return nil
	}
	return a.FlowExecution
}

func (a *APIV4Spec) GetFlows() []FlowV4 {
	if a == nil {
		return nil
	}
	return a.Flows
}

func (a *APIV4Spec) GetResponseTemplates() map[string]map[string]ResponseTemplate {
	if a == nil {
		return nil
	}
	return a.ResponseTemplates
}

func (a *APIV4Spec) GetServices() *APIServices {
	if a == nil {
		return nil
	}
	return a.Services
}

func (a *APIV4Spec) GetGroups() []string {
	if a == nil {
		return nil
	}
	return a.Groups
}

func (a *APIV4Spec) GetVisibility() *Visibility {
	if a == nil {
		return nil
	}
	return a.Visibility
}

func (a *APIV4Spec) GetState() *LifecycleState {
	if a == nil {
		return nil
	}
	return a.State
}

func (a *APIV4Spec) GetPrimaryOwner() *PrimaryOwner {
	if a == nil {
		return nil
	}
	return a.PrimaryOwner
}

func (a *APIV4Spec) GetLabels() []string {
	if a == nil {
		return nil
	}
	return a.Labels
}

func (a *APIV4Spec) GetMetadata() []Metadata {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *APIV4Spec) GetLifecycleState() APILifecycleState {
	if a == nil {
		return APILifecycleState("")
	}
	return a.LifecycleState
}

func (a *APIV4Spec) GetCategories() []string {
	if a == nil {
		return nil
	}
	return a.Categories
}

func (a *APIV4Spec) GetMembers() []Member {
	if a == nil {
		return nil
	}
	return a.Members
}

func (a *APIV4Spec) GetNotifyMembers() *bool {
	if a == nil {
		return nil
	}
	return a.NotifyMembers
}

func (a *APIV4Spec) GetPages() []PageV4Input {
	if a == nil {
		return nil
	}
	return a.Pages
}
