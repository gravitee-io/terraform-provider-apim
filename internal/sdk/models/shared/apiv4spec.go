// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
)

// APIV4Spec - ApiV4DefinitionSpec defines the desired state of ApiDefinition.
type APIV4Spec struct {
	// A unique human readable id identifying this resource
	Hrid string `json:"hrid"`
	// API's name. Duplicate names can exists.
	Name string `json:"name"`
	// API's version. It's a simple string only used in the portal.
	Version string `json:"version"`
	// API's type.
	Type APIType `json:"type"`
	// API's description. A short description of your API.
	Description *string `json:"description,omitempty"`
	// The list of sharding tags associated with this API.
	Tags []string `json:"tags,omitempty"`
	// The list of listeners associated with this API.
	Listeners      []Listener        `json:"listeners"`
	EndpointGroups []EndpointGroupV4 `json:"endpointGroups"`
	// API analytics
	Analytics *Analytics `json:"analytics,omitempty"`
	// API Failover
	Failover   *FailoverV4 `json:"failover,omitempty"`
	Properties []Property  `json:"properties,omitempty"`
	Resources  []Resource  `json:"resources,omitempty"`
	// List of Plans for the API
	Plans []PlanV4 `json:"plans,omitempty"`
	// Flow execution
	FlowExecution *FlowExecution `json:"flowExecution,omitempty"`
	// List of flows for the API
	Flows []FlowV4 `json:"flows,omitempty"`
	// A list of Response Templates for the API (Not applicable for Native API)
	ResponseTemplates map[string]map[string]ResponseTemplate `json:"responseTemplates,omitempty"`
	// Api services
	Services *APIServices `json:"services,omitempty"`
	// List of groups associated with the API.
	// This groups are id or name references to existing groups in APIM.
	Groups []string `json:"groups,omitempty"`
	// The visibility of the resource regarding the portal.
	Visibility *Visibility `default:"PUBLIC" json:"visibility"`
	// The state of the API regarding the gateway(s).
	State *LifecycleState `json:"state,omitempty"`
	// Primary owner, the creator of the application. Can perform all possible API actions.
	PrimaryOwner *PrimaryOwner `json:"primaryOwner,omitempty"`
	// List of labels of the API
	Labels []string `json:"labels,omitempty"`
	// The list of API's metadata.
	Metadata []Metadata `json:"metadata,omitempty"`
	// The status of the API regarding the console.
	LifecycleState APILifecycleState `json:"lifecycleState"`
	// The list of category keys associated with this API.
	Categories []string `json:"categories,omitempty"`
	// Set of members associated with the plan
	Members []MemberInput `json:"members,omitempty"`
	// If true, new members added to the API spec will
	// be notified when the API is synced with APIM.
	NotifyMembers *bool `default:"true" json:"notifyMembers"`
	// List of Pages for the API
	Pages []PageV4Input `json:"pages,omitempty"`
}

func (a APIV4Spec) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *APIV4Spec) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"hrid", "name", "version", "type", "listeners", "endpointGroups", "lifecycleState"}); err != nil {
		return err
	}
	return nil
}

func (a *APIV4Spec) GetHrid() string {
	if a == nil {
		return ""
	}
	return a.Hrid
}

func (a *APIV4Spec) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *APIV4Spec) GetVersion() string {
	if a == nil {
		return ""
	}
	return a.Version
}

func (a *APIV4Spec) GetType() APIType {
	if a == nil {
		return APIType("")
	}
	return a.Type
}

func (a *APIV4Spec) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *APIV4Spec) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *APIV4Spec) GetListeners() []Listener {
	if a == nil {
		return []Listener{}
	}
	return a.Listeners
}

func (a *APIV4Spec) GetEndpointGroups() []EndpointGroupV4 {
	if a == nil {
		return []EndpointGroupV4{}
	}
	return a.EndpointGroups
}

func (a *APIV4Spec) GetAnalytics() *Analytics {
	if a == nil {
		return nil
	}
	return a.Analytics
}

func (a *APIV4Spec) GetFailover() *FailoverV4 {
	if a == nil {
		return nil
	}
	return a.Failover
}

func (a *APIV4Spec) GetProperties() []Property {
	if a == nil {
		return nil
	}
	return a.Properties
}

func (a *APIV4Spec) GetResources() []Resource {
	if a == nil {
		return nil
	}
	return a.Resources
}

func (a *APIV4Spec) GetPlans() []PlanV4 {
	if a == nil {
		return nil
	}
	return a.Plans
}

func (a *APIV4Spec) GetFlowExecution() *FlowExecution {
	if a == nil {
		return nil
	}
	return a.FlowExecution
}

func (a *APIV4Spec) GetFlows() []FlowV4 {
	if a == nil {
		return nil
	}
	return a.Flows
}

func (a *APIV4Spec) GetResponseTemplates() map[string]map[string]ResponseTemplate {
	if a == nil {
		return nil
	}
	return a.ResponseTemplates
}

func (a *APIV4Spec) GetServices() *APIServices {
	if a == nil {
		return nil
	}
	return a.Services
}

func (a *APIV4Spec) GetGroups() []string {
	if a == nil {
		return nil
	}
	return a.Groups
}

func (a *APIV4Spec) GetVisibility() *Visibility {
	if a == nil {
		return nil
	}
	return a.Visibility
}

func (a *APIV4Spec) GetState() *LifecycleState {
	if a == nil {
		return nil
	}
	return a.State
}

func (a *APIV4Spec) GetPrimaryOwner() *PrimaryOwner {
	if a == nil {
		return nil
	}
	return a.PrimaryOwner
}

func (a *APIV4Spec) GetLabels() []string {
	if a == nil {
		return nil
	}
	return a.Labels
}

func (a *APIV4Spec) GetMetadata() []Metadata {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *APIV4Spec) GetLifecycleState() APILifecycleState {
	if a == nil {
		return APILifecycleState("")
	}
	return a.LifecycleState
}

func (a *APIV4Spec) GetCategories() []string {
	if a == nil {
		return nil
	}
	return a.Categories
}

func (a *APIV4Spec) GetMembers() []MemberInput {
	if a == nil {
		return nil
	}
	return a.Members
}

func (a *APIV4Spec) GetNotifyMembers() *bool {
	if a == nil {
		return nil
	}
	return a.NotifyMembers
}

func (a *APIV4Spec) GetPages() []PageV4Input {
	if a == nil {
		return nil
	}
	return a.Pages
}
