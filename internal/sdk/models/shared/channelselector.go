// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/gravitee-io/terraform-provider-apim/internal/sdk/internal/utils"
)

// ChannelSelectorType - Selector type.
type ChannelSelectorType string

const (
	ChannelSelectorTypeHTTP      ChannelSelectorType = "HTTP"
	ChannelSelectorTypeChannel   ChannelSelectorType = "CHANNEL"
	ChannelSelectorTypeCondition ChannelSelectorType = "CONDITION"
)

func (e ChannelSelectorType) ToPointer() *ChannelSelectorType {
	return &e
}
func (e *ChannelSelectorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HTTP":
		fallthrough
	case "CHANNEL":
		fallthrough
	case "CONDITION":
		*e = ChannelSelectorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChannelSelectorType: %v", v)
	}
}

// Operation - The operation associated with this channel selector.
type Operation string

const (
	OperationPublish   Operation = "PUBLISH"
	OperationSubscribe Operation = "SUBSCRIBE"
)

func (e Operation) ToPointer() *Operation {
	return &e
}
func (e *Operation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLISH":
		fallthrough
	case "SUBSCRIBE":
		*e = Operation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Operation: %v", v)
	}
}

// ChannelSelector - Channel selector
type ChannelSelector struct {
	// Selector type.
	Type ChannelSelectorType `json:"type"`
	// The list of operations associated with this channel selector.
	Operations []Operation `json:"operations,omitempty"`
	// The channel of the selector
	Channel *string `default:"/" json:"channel"`
	// The path operator of the selector
	ChannelOperator *Operator `default:"STARTS_WITH" json:"channelOperator"`
	Entrypoints     []string  `json:"entrypoints,omitempty"`
}

func (c ChannelSelector) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ChannelSelector) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ChannelSelector) GetType() ChannelSelectorType {
	if o == nil {
		return ChannelSelectorType("")
	}
	return o.Type
}

func (o *ChannelSelector) GetOperations() []Operation {
	if o == nil {
		return nil
	}
	return o.Operations
}

func (o *ChannelSelector) GetChannel() *string {
	if o == nil {
		return nil
	}
	return o.Channel
}

func (o *ChannelSelector) GetChannelOperator() *Operator {
	if o == nil {
		return nil
	}
	return o.ChannelOperator
}

func (o *ChannelSelector) GetEntrypoints() []string {
	if o == nil {
		return nil
	}
	return o.Entrypoints
}
